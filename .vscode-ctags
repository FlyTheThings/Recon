!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APERTURE_DISTANCE_PX	SRC/Modules/Shadow-Detection/calib.h	/^const double APERTURE_DISTANCE_PX = 283.0;$/;"	v
AbortMission_AllDronesHover	SRC/Modules/Guidance/Guidance.hpp	/^	inline void GuidanceEngine::AbortMission_AllDronesHover(void) {$/;"	f	class:Guidance::GuidanceEngine
AbortMission_AllDronesLandNow	SRC/Modules/Guidance/Guidance.hpp	/^	inline void GuidanceEngine::AbortMission_AllDronesLandNow(void) {$/;"	f	class:Guidance::GuidanceEngine
AbortMission_AllDronesReturnHomeAndLand	SRC/Modules/Guidance/Guidance.hpp	/^	inline void GuidanceEngine::AbortMission_AllDronesReturnHomeAndLand(void) {$/;"	f	class:Guidance::GuidanceEngine
AboutWindow	SRC/UI/AboutWindow.cpp	/^AboutWindow::AboutWindow() {$/;"	f	class:AboutWindow
AboutWindow	SRC/UI/AboutWindow.hpp	/^class AboutWindow {$/;"	c
Action	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t Action;$/;"	m	class:DroneInterface::Packet_CameraControl
Action	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t Action;$/;"	m	class:DroneInterface::Packet_EmergencyCommand
Add	SRC/Maps/CacheMem.cpp	/^	void CacheMem::Add(Tile tile, SatelliteSource source, std::vector<uint8_t> & data, int width, int height) {$/;"	f	class:Maps::CacheMem
Add	SRC/Maps/CacheMem.cpp	/^	void CacheMem::Add(Tile tile, SatelliteSource source, uint8_t * data, int width, int height) {$/;"	f	class:Maps::CacheMem
Add	SRC/UI/Drawable.hpp	/^		void Add(Drawable * d) { m_drawables.push_back(d); m_drawableNames.insert(d->DrawableName);}$/;"	f	class:DrawableHost
AddHash	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet::AddHash(void) {$/;"	f	class:DroneInterface::Packet
AddHeader	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet::AddHeader(uint32_t Size, uint8_t PID) {$/;"	f	class:DroneInterface::Packet
AddImageTimestampToLogAndFPSReport	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::AddImageTimestampToLogAndFPSReport(TimePoint Timestamp) {$/;"	f	class:DroneInterface::RealDrone
AddLowFlier	SRC/Modules/Guidance/Guidance.cpp	/^    bool GuidanceEngine::AddLowFlier(std::string const & Serial) {$/;"	f	class:Guidance::GuidanceEngine
AddMessage	SRC/UI/MessageBoxOverlay.cpp	/^void MessageBoxOverlay::AddMessage(std::string const & Message, int Token) {$/;"	f	class:MessageBoxOverlay
AddOutdatedDataNote	SRC/UI/VehicleControlWidget.hpp	/^		static void AddOutdatedDataNote(std::string & Str, std::chrono::time_point<std::chrono::steady_clock> const & Timestamp) {$/;"	f	class:VehicleControlWidget
AddSimulatedDrone	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			inline SimulatedDrone * AddSimulatedDrone(std::string Serial, Eigen::Vector3d const & Position_LLA) {$/;"	f	class:DroneInterface::DroneManager
AddText	SRC/UI/MyGui.hpp	/^	inline void AddText(ImDrawList * DrawList, ImVec2 const & pos, ImU32 col, const char * text_begin, const char* text_end = NULL,$/;"	f	namespace:MyGui
AllDronesHitTheDeck	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::AllDronesHitTheDeck(void) {$/;"	f	class:VehicleControlWidget
AllDronesReturnHomeAndLand	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::AllDronesReturnHomeAndLand(void) {$/;"	f	class:VehicleControlWidget
AllDronesStopAndHover	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::AllDronesStopAndHover(void) {$/;"	f	class:VehicleControlWidget
AllFlyingDronesReachedTargetHAG	SRC/UI/VehicleControlWidget.hpp	/^inline bool VehicleControlWidget::AllFlyingDronesReachedTargetHAG(std::vector<DroneInterface::Drone *> const & Drones,$/;"	f	class:VehicleControlWidget
AllFlyingDronesReachedTargetPositions2D	SRC/UI/VehicleControlWidget.hpp	/^inline bool VehicleControlWidget::AllFlyingDronesReachedTargetPositions2D(std::vector<DroneInterface::Drone *> const & Drones,$/;"	f	class:VehicleControlWidget
AllFlyingDronesSetTargetPositionToTakeoffPoint2D	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::AllFlyingDronesSetTargetPositionToTakeoffPoint2D(std::vector<DroneInterface::Drone *> const & Drones,$/;"	f	class:VehicleControlWidget
AllFlyingDronesStageVerticalyForLanding	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::AllFlyingDronesStageVerticalyForLanding(std::vector<DroneInterface::Drone *> const & Drones,$/;"	f	class:VehicleControlWidget
AllTilesPresent	SRC/Maps/DataTileProvider.cpp	/^	bool DataTileProvider::AllTilesPresent(std::vector<Tile> const & Tiles) {$/;"	f	class:Maps::DataTileProvider
AlphaCompositePixel	SRC/Maps/DataTileVizEvaluator.cpp	/^	static Math::RGBA8888 AlphaCompositePixel(Math::RGBA8888 Front, Math::RGBA8888 Back) {$/;"	f	namespace:Maps
Altitude	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			double  Altitude;  \/\/WGS84 Altitude (m)$/;"	m	class:DroneInterface::Packet_CoreTelemetry
AnimatedVariable1D	SRC/UI/Animation.hpp	/^		AnimatedVariable1D() : ValA(0.0), ValB(0.0), state(0) { }$/;"	f	class:AnimatedVariable1D
AnimatedVariable1D	SRC/UI/Animation.hpp	/^class AnimatedVariable1D {$/;"	c
AnimatedVariable1D	SRC/UI/Animation.hpp	/^inline AnimatedVariable1D::AnimatedVariable1D(double A, double B, double Duration)$/;"	f	class:AnimatedVariable1D
AnimatedVariable1D	SRC/UI/Animation.hpp	/^inline AnimatedVariable1D::AnimatedVariable1D(double A, double B, double Duration, timeSeries1D const & TransitionFun)$/;"	f	class:AnimatedVariable1D
AnimationDuration	SRC/UI/ConsoleWidget.hpp	/^	static constexpr float AnimationDuration = 0.5f;$/;"	m	class:ConsoleWidget
AnimationInProgress	SRC/UI/MapWidget.hpp	/^		bool                             AnimationInProgress;   \/\/Set when the animation is done and the End State has been effected.$/;"	m	class:MapWidget
AnimationTimeInterval	SRC/UI/MapWidget.hpp	/^		std::tuple<TimePoint, TimePoint> AnimationTimeInterval; \/\/Actual time interval over which the animation takes place$/;"	m	class:MapWidget
AnimationTimeMs	SRC/UI/MapWidget.hpp	/^		static constexpr std::chrono::milliseconds AnimationTimeMs = std::chrono::milliseconds(2000);$/;"	m	class:MapWidget
AppearHideToggle	SRC/UI/ConsoleWidget.hpp	/^	void  AppearHideToggle(void)  { WidgetHeight.Transition(); ScrollToBottomRequest = true; }$/;"	f	class:ConsoleWidget
Arguments	SRC/ReconMain.cpp	/^namespace Arguments {$/;"	n	file:
AttachToFRFFile	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^		bool AttachToFRFFile(FRFImage & File) const {$/;"	f	class:ShadowMapInfoBlock
AvailableTestBenches	SRC/TestBenches.hpp	/^	inline std::vector<std::string> AvailableTestBenches = {$/;"	m	namespace:TestBenches
AvoidanceZones	SRC/Maps/DataTileTypes.hpp	/^		AvoidanceZones,$/;"	m	class:Maps::DataLayer
AvoidanceZonesTool	SRC/UI/AvoidanceZonesTool.cpp	/^AvoidanceZonesTool::AvoidanceZonesTool() :$/;"	f	class:AvoidanceZonesTool
AvoidanceZonesTool	SRC/UI/AvoidanceZonesTool.hpp	/^class AvoidanceZonesTool {$/;"	c
BOARD_SIZE	SRC/Modules/Shadow-Detection/calib.h	/^const cv::Size BOARD_SIZE = cv::Size(7, 5);$/;"	v
BUILD_TYPE	Makefile	/^BUILD_TYPE = Release$/;"	m
BatLevel	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t  BatLevel;     \/\/Equals DJIBatteryState.chargeRemainingInPercent$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
BatWarning	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t  BatWarning;   \/\/0=No Warning, 1=Warning, 2=Serious Warning$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
BeginMenu	SRC/UI/MyGui.hpp	/^	inline bool BeginMenu(const char* txticon, float XMargin, const char* label, bool enabled = true) {$/;"	f	namespace:MyGui
BeginMenuWithStatus	SRC/UI/MyGui.hpp	/^	inline bool BeginMenuWithStatus(const char* col1Text, float col1Width, const char* col2Text, Math::Vector4 col2Color, bool enabled = true) {$/;"	f	namespace:MyGui
Bisect	SRC/Polygon.cpp	/^void Triangle::Bisect(Triangle & subTriangleADC, Triangle & subTriangleABD){$/;"	f	class:Triangle
BisectIntersection	SRC/Polygon.cpp	/^bool Triangle::BisectIntersection(const Eigen::Vector2d & Intersection, Triangle & subTriangleADC, Triangle & subTriangleABD){$/;"	f	class:Triangle
BlackToWhite	SRC/Colormaps.hpp	/^	BlackToWhite,$/;"	m	class:Colormap
BlockAdd	SRC/Maps/CacheFile.cpp	/^void CacheFile::BlockAdd(Tile tile, SatelliteSource source, std::vector<uint8_t> const & data) {$/;"	f	class:Maps::CacheFile
BlockAdd	SRC/Maps/FRFTileStore.cpp	/^void FRFTileStore::BlockAdd(Tile tile, FRFImage const * Data) {$/;"	f	class:Maps::FRFTileStore
BlockAverageFRF	SRC/Maps/DataTileProvider.cpp	/^	static void BlockAverageFRF(FRFImage * SourceImage, FRFImage * DestImage, int SourceFirstRow, int SourceFirstCol, int DestRow, int DestCol) {$/;"	f	namespace:Maps
BlockRemove	SRC/Maps/CacheFile.cpp	/^void CacheFile::BlockRemove(Tile tile, SatelliteSource source) {$/;"	f	class:Maps::CacheFile
BlockRemove	SRC/Maps/FRFTileStore.cpp	/^void FRFTileStore::BlockRemove(Tile tile) {$/;"	f	class:Maps::FRFTileStore
BlockTryGet	SRC/Maps/CacheFile.cpp	/^std::shared_ptr<std::vector<uint8_t>> CacheFile::BlockTryGet(Tile tile, SatelliteSource source) {$/;"	f	class:Maps::CacheFile
BlockTryGet	SRC/Maps/FRFTileStore.cpp	/^std::shared_ptr<std::vector<uint8_t>> FRFTileStore::BlockTryGet(Tile tile) {$/;"	f	class:Maps::FRFTileStore
BookmarkManager	SRC/UI/BookmarkManager.hpp	/^		BookmarkManager() : Log(*(ReconUI::Instance().Log)) { LoadFromDisk(); }$/;"	f	class:BookmarkManager
BookmarkManager	SRC/UI/BookmarkManager.hpp	/^class BookmarkManager {$/;"	c
Bookmarks	SRC/UI/BookmarkManager.hpp	/^		std::vector<LocationBookmark> Bookmarks;$/;"	m	class:BookmarkManager
BreakAtIntersections	SRC/Polygon.cpp	/^std::Evector<LineSegment> BreakAtIntersections(std::Evector<LineSegment> const & InputSegments) {$/;"	f
BufferNewLines	SRC/Journal.h	/^inline std::string Journal::BufferNewLines(std::string S, size_t Width) {$/;"	f	class:Journal
BytesNeeded	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet::BytesNeeded(uint32_t & ByteCount) {$/;"	f	class:DroneInterface::Packet
CAMERA_MODEL_PATH	SRC/Modules/Shadow-Detection/calib.h	/^const std::string CAMERA_MODEL_PATH = (Handy::Paths::ThisExecutableDirectory() \/ "FisheyCamModel.txt").string();$/;"	v
CC	Makefile	/^CC = gcc$/;"	m
CMV_MAX_BUF	SRC/Modules/Shadow-Detection/ocam_utils.h	12;"	d
COMPILE_DEPGEN_FLAGS	Makefile	/^COMPILE_DEPGEN_FLAGS  = -MT $@ -MMD -MP -MF DEP\/$(*F).d$/;"	m
COMPILE_FLAGS	Makefile	/^COMPILE_FLAGS         = -c -fdiagnostics-color=auto -pthread $(COMPILE_WARNING_FLAGS) $(RECON_INCLUDE_FLAGS) $(COMPILE_DEPGEN_FLAGS) \\$/;"	m
COMPILE_WARNING_FLAGS	Makefile	/^COMPILE_WARNING_FLAGS = -Wall -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-function -Wno-strict-aliasing \\$/;"	m
CacheFile	SRC/Maps/CacheFile.cpp	/^CacheFile::CacheFile(ITileFileReceiver * receiver, Journal & LogRef) : Log(LogRef), m_receiver(receiver), m_threads(4) {$/;"	f	class:Maps::CacheFile
CacheFile	SRC/Maps/CacheFile.hpp	/^	class CacheFile {$/;"	c	namespace:Maps
CacheFile_GetNumBytes	SRC/Maps/SatelliteCacheMaster.hpp	/^		uint64_t CacheFile_GetNumBytes()       { return m_cacheFile->GetNumBytes();       }$/;"	f	class:Maps::SatelliteCacheMaster
CacheFile_GetNumBytesOnDisk	SRC/Maps/SatelliteCacheMaster.hpp	/^		uint64_t CacheFile_GetNumBytesOnDisk() { return m_cacheFile->GetNumBytesOnDisk(); }$/;"	f	class:Maps::SatelliteCacheMaster
CacheFile_GetNumItems	SRC/Maps/SatelliteCacheMaster.hpp	/^		uint64_t CacheFile_GetNumItems()       { return m_cacheFile->GetNumItems();       }$/;"	f	class:Maps::SatelliteCacheMaster
CacheMem	SRC/Maps/CacheMem.hpp	/^		CacheMem(Journal & LogRef) : Log(LogRef) { }$/;"	f	struct:Maps::CacheMem
CacheMem	SRC/Maps/CacheMem.hpp	/^struct CacheMem {$/;"	s	namespace:Maps
CheckAdjacency	SRC/Polygon.cpp	/^bool SimplePolygon::CheckAdjacency (SimplePolygon const & otherPolygon){$/;"	f	class:SimplePolygon
CheckHash	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet::CheckHash(void) const {$/;"	f	class:DroneInterface::Packet
CheckHashSizeAndPID	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet::CheckHashSizeAndPID(uint8_t PID) const {$/;"	f	class:DroneInterface::Packet
CheckIntersect	SRC/Polygon.cpp	/^bool SimplePolygon::CheckIntersect(SimplePolygon const & otherPolygon, std::vector< Eigen::Vector2d> & FinalIntersect){$/;"	f	class:SimplePolygon
ClassicNIR	SRC/Colormaps.hpp	/^	ClassicNIR,$/;"	m	class:Colormap
Clear	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet::Clear(void) {$/;"	f	class:DroneInterface::Packet
Clear	SRC/Polygon.hpp	/^    void Clear(void) { m_boundary.Clear(); m_holes.clear(); }$/;"	f	class:Polygon
Clear	SRC/Polygon.hpp	/^    void Clear(void) { m_components.clear(); }$/;"	f	class:PolygonCollection
Clear	SRC/Polygon.hpp	/^    void Clear(void) { m_vertices.clear(); }$/;"	f	class:SimplePolygon
Clear	SRC/SimpleKVStore.hpp	/^		void Clear(void) { std::scoped_lock slock(Mtx); Index.clear(); DensifyValuesFile(); }$/;"	f	class:SimpleKVStore
ClearHazardCondition	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::ClearHazardCondition(std::string Serial) {$/;"	f	class:VehicleControlWidget
ClearLog	SRC/UI/ConsoleWidget.hpp	/^	void ClearLog() { Items.clear(); ScrollToBottomRequest = true; }$/;"	f	class:ConsoleWidget
ClearPartitionLabels	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::ClearPartitionLabels(void) {$/;"	f	class:GuidanceOverlay
ClearSimulatedDrones	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			inline void ClearSimulatedDrones(void) {$/;"	f	class:DroneInterface::DroneManager
ClearSurveyRegionPartition	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::ClearSurveyRegionPartition() {$/;"	f	class:GuidanceOverlay
ClearTriangleLabels	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::ClearTriangleLabels(void) {$/;"	f	class:GuidanceOverlay
ClearTriangles	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::ClearTriangles(void) {$/;"	f	class:GuidanceOverlay
Close	SRC/SimpleKVStore.hpp	/^inline void SimpleKVStore::Close() {$/;"	f	class:SimpleKVStore
Colormap	SRC/Colormaps.hpp	/^enum class Colormap {$/;"	c
Colormaps	SRC/Colormaps.hpp	/^namespace Colormaps {$/;"	n
CommandWidget	SRC/UI/CommandWidget.hpp	/^		CommandWidget() : Log(*(ReconUI::Instance().Log)) {$/;"	f	class:CommandWidget
CommandWidget	SRC/UI/CommandWidget.hpp	/^class CommandWidget {$/;"	c
ComputeInteriorIntersection	SRC/Polygon.cpp	/^bool LineSegment::ComputeInteriorIntersection(LineSegment const & Other, Eigen::Vector2d & Intersection, bool & IsInteriorThis, bool & IsInteriorOther) const {$/;"	f	class:LineSegment
ComputeIntersection	SRC/Polygon.cpp	/^bool LineSegment::ComputeIntersection(LineSegment const & Other, Eigen::Vector2d & Intersection) const {$/;"	f	class:LineSegment
ComputeNavigationProfiles	SRC/UI/MapWidget.cpp	/^void MapWidget::ComputeNavigationProfiles(std::tuple<Eigen::Vector2d, double> const & StartState, std::tuple<Eigen::Vector2d, double> const & EndState) {$/;"	f	class:MapWidget
ComputeTarget2DVelocityBasedOnTargetPosAndSpeed	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::ComputeTarget2DVelocityBasedOnTargetPosAndSpeed(double TargetLat, double TargetLon, double TargetMoveSpeed,$/;"	f	class:DroneInterface::SimulatedDrone
ConsoleWidget	SRC/UI/ConsoleWidget.cpp	/^ConsoleWidget::ConsoleWidget() {$/;"	f	class:ConsoleWidget
ConsoleWidget	SRC/UI/ConsoleWidget.hpp	/^class ConsoleWidget {$/;"	c
ConsoleWidgetHeightInLines	SRC/UI/ConsoleWidget.hpp	/^	static constexpr float ConsoleWidgetHeightInLines = 17.0f;$/;"	m	class:ConsoleWidget
Contains	SRC/Polygon.cpp	/^bool SimplePolygon::Contains(SimplePolygon const & OtherPoly) const {$/;"	f	class:SimplePolygon
ContainsPoint	SRC/Polygon.cpp	/^bool LineSegment::ContainsPoint(Eigen::Vector2d const & Point) const {$/;"	f	class:LineSegment
ContainsPoint	SRC/Polygon.cpp	/^bool Polygon::ContainsPoint(Eigen::Vector2d const & Point) const {$/;"	f	class:Polygon
ContainsPoint	SRC/Polygon.cpp	/^bool PolygonCollection::ContainsPoint(Eigen::Vector2d const & Point) const {$/;"	f	class:PolygonCollection
ContainsPoint	SRC/Polygon.cpp	/^bool SimplePolygon::ContainsPoint(Eigen::Vector2d const & Point) const {$/;"	f	class:SimplePolygon
ContentHeight	SRC/UI/CommandWidget.hpp	/^		float ContentHeight; \/\/Height of widget content from last draw pass$/;"	m	class:CommandWidget
ContentHeight	SRC/UI/VehicleControlWidget.hpp	/^		float ContentHeight; \/\/Height of widget content from last draw pass$/;"	m	class:VehicleControlWidget
ControlThreadMain	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::ControlThreadMain(void) {$/;"	f	class:VehicleControlWidget
CornerRadius	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float CornerRadius = 0.2f; \/\/Radius of arc (m) to make when cutting corner at this waypoint. Only used when CurvedTrajectory = true in the parent mission.$/;"	m	struct:DroneInterface::Waypoint
CreateSampleWaypointMission	SRC/Modules/DJI-Drone-Interface/DroneUtils.cpp	/^	WaypointMission CreateSampleWaypointMission(int NumWaypoints, bool CurvedTrajectories, bool LandAtEnd, Eigen::Vector2d const & StartPos_LL, double HAG) {$/;"	f	namespace:DroneInterface
CurvedFlight	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t CurvedFlight;$/;"	m	class:DroneInterface::Packet_ExecuteWaypointMission
CurvedTrajectory	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		bool CurvedTrajectory   = false; \/\/If true, cut corners near waypoints, giving curved trajectory. If false, fly point-to-point, stopping at each waypoint.$/;"	m	struct:DroneInterface::WaypointMission
CustomSanitize	SRC/Polygon.cpp	/^void SimplePolygon::CustomSanitize(std::Evector<LineSegment> segments) {$/;"	f	class:SimplePolygon
DEBUGFLAGS	Makefile	/^	DEBUGFLAGS = $/;"	m
DEBUGFLAGS	Makefile	/^	DEBUGFLAGS = -g$/;"	m
DEFINE_FLAGS	Makefile	/^DEFINE_FLAGS = -DGSL_USE_STD_BYTE -DLOADGLFWICON -DIMGUIAPP_USE_FAS -DWITH_ALSA$/;"	m
DJICam	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t  DJICam;       \/\/0:No Cam, 1:Cam present but feed off, 2:Cam present and feed on$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
Dark	SRC/UI/Themes.hpp	/^		Dark,$/;"	m	class:Themes::Theme
DataEditThreadMain	SRC/Maps/DataTileProvider.cpp	/^	void DataTileProvider::DataEditThreadMain(void) {$/;"	f	class:Maps::DataTileProvider
DataLayer	SRC/Maps/DataTileTypes.hpp	/^	enum class DataLayer {$/;"	c	namespace:Maps
DataLayerToString	SRC/Maps/DataTileTypes.hpp	/^	inline std::string DataLayerToString(DataLayer layer) {$/;"	f	namespace:Maps
DataReceivedHandler	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::DataReceivedHandler(const std::shared_ptr<tacopie::tcp_client> & client, const tacopie::tcp_client::read_result & res) {$/;"	f	class:DroneInterface::RealDrone
DataTileCacheItem	SRC/Maps/DataTileProvider.hpp	/^			DataTileCacheItem(FRFTileStore * AssociatedFileStore) : m_FRFFileStore(AssociatedFileStore) { }$/;"	f	struct:Maps::DataTileCacheItem
DataTileCacheItem	SRC/Maps/DataTileProvider.hpp	/^	struct DataTileCacheItem {$/;"	s	namespace:Maps
DataTileMinZoomLevel	SRC/Maps/DataTileProvider.hpp	/^			static constexpr int32_t DataTileMinZoomLevel = 15; \/\/The lowest pyramid level for which viz tiles are maintained and returned (empty below this)$/;"	m	struct:Maps::DataTileProvider
DataTileProvider	SRC/Maps/DataTileProvider.cpp	/^	DataTileProvider::DataTileProvider(Journal & LogRef) : Log(LogRef), m_FRFFileStore(new FRFTileStore(this, LogRef)), m_abort(false),$/;"	f	class:Maps::DataTileProvider
DataTileProvider	SRC/Maps/DataTileProvider.hpp	/^	struct DataTileProvider : IFRFFileReceiver {$/;"	s	namespace:Maps
Delete	SRC/SimpleKVStore.hpp	/^		void Delete(std::string const & Key) { std::scoped_lock slock(Mtx); Index.erase(Key); }$/;"	f	class:SimpleKVStore
DeleteBookmarkDialog	SRC/UI/ModalDialogs.hpp	/^class DeleteBookmarkDialog {$/;"	c
DensifyValuesFile	SRC/SimpleKVStore.hpp	/^inline bool SimpleKVStore::DensifyValuesFile() {$/;"	f	class:SimpleKVStore
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_Acknowledgment::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_Acknowledgment
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_CameraControl::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_CameraControl
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_CompressedImage::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_CompressedImage
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_CoreTelemetry::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_CoreTelemetry
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_EmergencyCommand::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_EmergencyCommand
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_ExecuteWaypointMission::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_ExecuteWaypointMission
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_ExtendedTelemetry::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_ExtendedTelemetry
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_Image::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_Image
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_MessageString::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_MessageString
Deserialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_VirtualStickCommand::Deserialize(Packet const & SourcePacket) {$/;"	f	class:DroneInterface::Packet_VirtualStickCommand
Destroy	SRC/Maps/DataTileProvider.hpp	/^			static void               Destroy(void)          { delete s_instance; s_instance = nullptr; }$/;"	f	struct:Maps::DataTileProvider
Destroy	SRC/Maps/SatelliteCacheMaster.hpp	/^		static void                   Destroy(void)          { delete s_instance; s_instance = nullptr; }$/;"	f	class:Maps::SatelliteCacheMaster
Destroy	SRC/ProgOptions.hpp	/^		static void Destroy() { delete s_instance; s_instance = nullptr; }$/;"	f	class:ProgOptions
DisconnectHandler	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::DisconnectHandler(void) {$/;"	f	class:DroneInterface::RealDrone
Draw	SRC/UI/AboutWindow.cpp	/^void AboutWindow::Draw() {$/;"	f	class:AboutWindow
Draw	SRC/UI/CommandWidget.hpp	/^inline void CommandWidget::Draw() {$/;"	f	class:CommandWidget
Draw	SRC/UI/ConsoleWidget.cpp	/^void ConsoleWidget::Draw() {$/;"	f	class:ConsoleWidget
Draw	SRC/UI/GNSSReceiverWindow.hpp	/^inline void GNSSReceiverWindow::Draw() {$/;"	f	class:GNSSReceiverWindow
Draw	SRC/UI/LiveFiducialsWidget.hpp	/^inline void LiveFiducialsWidget::Draw() {$/;"	f	class:LiveFiducialsWidget
Draw	SRC/UI/MainMenu.hpp	/^inline void MainMenu::Draw() {$/;"	f	class:MainMenu
Draw	SRC/UI/MapWidget.cpp	/^void MapWidget::Draw(void) {$/;"	f	class:MapWidget
Draw	SRC/UI/ModalDialogs.hpp	/^		void Draw() {$/;"	f	class:DeleteBookmarkDialog
Draw	SRC/UI/ModalDialogs.hpp	/^		void Draw() {$/;"	f	class:InformationDialog
Draw	SRC/UI/ModalDialogs.hpp	/^		void Draw() {$/;"	f	class:NewBookmarkDialog
Draw	SRC/UI/ModalDialogs.hpp	/^		void Draw() {$/;"	f	class:SelectActiveRegionDialog
Draw	SRC/UI/ModalDialogs.hpp	/^		void Draw() {$/;"	f	class:ZoomToCoordsDialog
Draw	SRC/UI/ReconUI.cpp	/^void ReconUI::Draw() {$/;"	f	class:ReconUI
Draw	SRC/UI/SettingsWindow.hpp	/^inline void SettingsWindow::Draw() {$/;"	f	class:SettingsWindow
Draw	SRC/UI/SimFiducialsWidget.hpp	/^inline void SimFiducialsWidget::Draw() {$/;"	f	class:SimFiducialsWidget
Draw	SRC/UI/StatusBar.hpp	/^	void Draw() {$/;"	f	namespace:StatusBar
Draw	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::Draw() {$/;"	f	class:VehicleControlWidget
Draw	SRC/UI/VisWidget.hpp	/^inline void VisWidget::Draw() {$/;"	f	class:VisWidget
DrawChildren	SRC/UI/Drawable.hpp	/^		void DrawChildren() {$/;"	f	class:DrawableHost
DrawContextMenu	SRC/UI/ModalDialogs.hpp	/^		void DrawContextMenu(bool Open, int itemIndex) {$/;"	f	class:SelectActiveRegionDialog
DrawContextMenu	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::DrawContextMenu(bool Open, DroneInterface::Drone & drone) {$/;"	f	class:VehicleControlWidget
DrawDataTiles	SRC/UI/MapWidget.hpp	/^		bool DrawDataTiles = true;$/;"	m	class:MapWidget
DrawDataTooltip	SRC/UI/MapWidget.hpp	/^		bool DrawDataTooltip = false;$/;"	m	class:MapWidget
DrawDroneInteractable	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::DrawDroneInteractable(DroneInterface::Drone & drone, vehicleState & State, size_t DroneIndex) {$/;"	f	class:VehicleControlWidget
DrawMapOverlay	SRC/UI/VehicleControlWidget.hpp	/^inline bool VehicleControlWidget::DrawMapOverlay(Eigen::Vector2d const & CursorPos_ScreenSpace, Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList,$/;"	f	class:VehicleControlWidget
DrawMission_ManualControl	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::DrawMission_ManualControl(vehicleState * State, Eigen::Vector2d const & dronePos_ScreenSpace, ImDrawList * DrawList) {$/;"	f	class:VehicleControlWidget
DrawMission_Waypoints	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::DrawMission_Waypoints(size_t DroneNum, DroneInterface::Drone * Drone, Eigen::Vector2d const & dronePos_ScreenSpace,$/;"	f	class:VehicleControlWidget
DrawModalDialogs	SRC/UI/ModalDialogs.hpp	/^inline void DrawModalDialogs(void) {$/;"	f
DrawPlus	SRC/UI/SurveyRegionTool.cpp	/^static void DrawPlus(ImDrawList * DrawList, Eigen::Vector2d const & Center_ScreenSpace, ImU32 Color) {$/;"	f	file:
DrawTool	SRC/UI/AvoidanceZonesTool.cpp	/^void AvoidanceZonesTool::DrawTool(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList) {$/;"	f	class:AvoidanceZonesTool
DrawTool	SRC/UI/LandingZonesTool.cpp	/^void LandingZonesTool::DrawTool(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList) {$/;"	f	class:LandingZonesTool
DrawTool	SRC/UI/MSATool.cpp	/^void MSATool::DrawTool(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList) {$/;"	f	class:MSATool
DrawTriangle	SRC/UI/AvoidanceZonesTool.cpp	/^void AvoidanceZonesTool::DrawTriangle(Eigen::Vector2d const & p_min, float scale, ImDrawList * DrawList) {$/;"	f	class:AvoidanceZonesTool
DrawTriangle	SRC/UI/LandingZonesTool.cpp	/^void LandingZonesTool::DrawTriangle(Eigen::Vector2d const & p_min, float scale, ImDrawList * DrawList) {$/;"	f	class:LandingZonesTool
DrawTriangle	SRC/UI/MSATool.cpp	/^void MSATool::DrawTriangle(Eigen::Vector2d const & p_min, float scale, ImDrawList * DrawList) {$/;"	f	class:MSATool
DrawTriangle	SRC/UI/SurveyRegionTool.cpp	/^void SurveyRegionsTool::DrawTriangle(Eigen::Vector2d const & p_min, float scale, ImDrawList * DrawList) {$/;"	f	class:SurveyRegionsTool
DrawVideoWindows	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::DrawVideoWindows(void) {$/;"	f	class:VehicleControlWidget
Draw_Button	SRC/UI/AvoidanceZonesTool.cpp	/^bool AvoidanceZonesTool::Draw_Button(void) {$/;"	f	class:AvoidanceZonesTool
Draw_Button	SRC/UI/LandingZonesTool.cpp	/^bool LandingZonesTool::Draw_Button(void) {$/;"	f	class:LandingZonesTool
Draw_Button	SRC/UI/MSATool.cpp	/^bool MSATool::Draw_Button(void) {$/;"	f	class:MSATool
Draw_Button	SRC/UI/SurveyRegionTool.cpp	/^bool SurveyRegionsTool::Draw_Button(void) {$/;"	f	class:SurveyRegionsTool
Draw_DataTiles	SRC/UI/MapWidget.cpp	/^void MapWidget::Draw_DataTiles(int32_t RecDataZoomLevel, Eigen::Vector4d const & ViewableAreaNM, ImDrawList * DrawList) {$/;"	f	class:MapWidget
Draw_DropDown	SRC/UI/AvoidanceZonesTool.cpp	/^void AvoidanceZonesTool::Draw_DropDown(Eigen::Vector2d const & PopupULCorner, float PopupWidth) {$/;"	f	class:AvoidanceZonesTool
Draw_DropDown	SRC/UI/LandingZonesTool.cpp	/^void LandingZonesTool::Draw_DropDown(Eigen::Vector2d const & PopupULCorner, float PopupWidth) {$/;"	f	class:LandingZonesTool
Draw_DropDown	SRC/UI/MSATool.cpp	/^void MSATool::Draw_DropDown(Eigen::Vector2d const & PopupULCorner, float PopupWidth) {$/;"	f	class:MSATool
Draw_DropDown	SRC/UI/SurveyRegionTool.cpp	/^void SurveyRegionsTool::Draw_DropDown(Eigen::Vector2d const & PopupULCorner, float PopupWidth) {$/;"	f	class:SurveyRegionsTool
Draw_MessageBox	SRC/UI/MessageBoxOverlay.cpp	/^void MessageBoxOverlay::Draw_MessageBox(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList, bool CursorInBounds) {$/;"	f	class:MessageBoxOverlay
Draw_NavigationAnimation	SRC/UI/MapWidget.cpp	/^bool MapWidget::Draw_NavigationAnimation(void) {$/;"	f	class:MapWidget
Draw_Overlay	SRC/UI/AvoidanceZonesTool.cpp	/^void AvoidanceZonesTool::Draw_Overlay(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList, bool CursorInBounds) {$/;"	f	class:AvoidanceZonesTool
Draw_Overlay	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::Draw_Overlay(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList, bool CursorInBounds) {$/;"	f	class:GuidanceOverlay
Draw_Overlay	SRC/UI/LandingZonesTool.cpp	/^void LandingZonesTool::Draw_Overlay(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList, bool CursorInBounds) {$/;"	f	class:LandingZonesTool
Draw_Overlay	SRC/UI/MSATool.cpp	/^void MSATool::Draw_Overlay(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList, bool CursorInBounds) {$/;"	f	class:MSATool
Draw_Overlay	SRC/UI/ShadowMapOverlay.cpp	/^void ShadowMapOverlay::Draw_Overlay(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList, bool CursorInBounds) {$/;"	f	class:ShadowMapOverlay
Draw_Overlay	SRC/UI/SurveyRegionTool.cpp	/^void SurveyRegionsTool::Draw_Overlay(Eigen::Vector2d const & CursorPos_ScreenSpace, Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList, bool CursorInBounds) {$/;"	f	class:SurveyRegionsTool
Draw_Overlay	SRC/UI/TimeAvailableOverlay.cpp	/^void TimeAvailableOverlay::Draw_Overlay(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList, bool CursorInBounds) {$/;"	f	class:TimeAvailableOverlay
Draw_Partition	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::Draw_Partition(Eigen::Vector2d const & CursorPos_NM, ImDrawList * DrawList, bool CursorInBounds,$/;"	f	class:GuidanceOverlay
Draw_SatTiles	SRC/UI/MapWidget.cpp	/^void MapWidget::Draw_SatTiles(int32_t MaxSatZoomLevel, Eigen::Vector4d const & ViewableAreaNM, ImDrawList * DrawList) {$/;"	f	class:MapWidget
Drawable	SRC/UI/Drawable.hpp	/^class Drawable {$/;"	c
DrawableHost	SRC/UI/Drawable.hpp	/^class DrawableHost {$/;"	c
DrawableName	SRC/UI/Drawable.hpp	/^		std::string DrawableName; \/\/Typically the name\/ID of the window if drawable is a window$/;"	m	class:Drawable
Drone	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^    class Drone {$/;"	c	namespace:DroneInterface
DroneCommand_GoHomeAndLand	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::DroneCommand_GoHomeAndLand(DroneInterface::Drone & Drone, vehicleState & State) {$/;"	f	class:VehicleControlWidget
DroneCommand_Hover	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::DroneCommand_Hover(DroneInterface::Drone & Drone, vehicleState & State) {$/;"	f	class:VehicleControlWidget
DroneCommand_LandNow	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::DroneCommand_LandNow(DroneInterface::Drone & Drone, vehicleState & State) {$/;"	f	class:VehicleControlWidget
DroneIconScale	SRC/ProgOptions.hpp	/^		float DroneIconScale;    \/\/Value of 1 means 1 pixel to 1 pixel. Value of 2 means 2 screen pixels per image pixel, etc.$/;"	m	class:ProgOptions
DroneInterface	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^namespace DroneInterface {$/;"	n
DroneInterface	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^namespace DroneInterface {$/;"	n	file:
DroneInterface	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^namespace DroneInterface {$/;"	n
DroneInterface	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^namespace DroneInterface {$/;"	n
DroneInterface	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^namespace DroneInterface {$/;"	n
DroneInterface	SRC/Modules/DJI-Drone-Interface/DroneUtils.cpp	/^namespace DroneInterface {$/;"	n	file:
DroneInterface	SRC/Modules/DJI-Drone-Interface/DroneUtils.hpp	/^namespace DroneInterface {$/;"	n
DroneInterface	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^namespace DroneInterface {$/;"	n	file:
DroneInterface	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^namespace DroneInterface {$/;"	n	file:
DroneMain	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::DroneMain(void) {$/;"	f	class:DroneInterface::SimulatedDrone
DroneManager	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			DroneManager() : m_abort(false) {$/;"	f	class:DroneInterface::DroneManager
DroneManager	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^	class DroneManager {$/;"	c	namespace:DroneInterface
DroneSerial	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			std::string DroneSerial;$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
Dummy	SRC/UI/Themes.hpp	/^		Dummy,  \/\/Don't change anything$/;"	m	class:Themes::Theme
DummyButtonStyle	SRC/UI/MyGui.hpp	/^			DummyButtonStyle() {$/;"	f	class:MyGui::DummyButtonStyle
DummyButtonStyle	SRC/UI/MyGui.hpp	/^	class DummyButtonStyle {$/;"	c	namespace:MyGui
ECEF2LLA	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector3d ECEF2LLA(Eigen::Vector3d const & Position_ECEF) {$/;"	f
ELF_FLAGS	Makefile	/^ELF_FLAGS             = -fdata-sections -ffunction-sections$/;"	m
EXTERNAL_OBJFILES	Makefile	/^EXTERNAL_OBJFILES = $(addprefix OBJ\/External\/,$(addsuffix .o,$(basename $(notdir $(EXTERNAL_SRCFILES)))))$/;"	m
EXTERNAL_SRCFILES	Makefile	/^EXTERNAL_SRCFILES = ..\/restclient-cpp\/source\/connection.cc \\$/;"	m
Earcut	SRC/Earcut.hpp	/^class Earcut {$/;"	c	namespace:mapbox::detail
Empty	SRC/Polygon.hpp	/^    bool Empty(void) const { return m_vertices.empty(); }$/;"	f	class:SimplePolygon
Erase_Circle	SRC/Maps/DataTileProvider.hpp	/^	inline void DataTileProvider::Erase_Circle(Eigen::Vector2d const & Center_NM, double Radius_meters, DataLayer layer) {$/;"	f	class:Maps::DataTileProvider
Erase_Rect	SRC/Maps/DataTileProvider.hpp	/^	inline void DataTileProvider::Erase_Rect(Eigen::Vector2d const & Center_NM, double LengthX, double LengthY, double AngleDeg, DataLayer layer) {$/;"	f	class:Maps::DataTileProvider
EstimateMissionTime	SRC/Modules/Guidance/Guidance.cpp	/^    double EstimateMissionTime(DroneInterface::Waypoint const & A, DroneInterface::Waypoint const & B, double TargetSpeed) {$/;"	f	namespace:Guidance
EstimateMissionTime	SRC/Modules/Guidance/Guidance.cpp	/^    double EstimateMissionTime(DroneInterface::WaypointMission const & Mission) {$/;"	f	namespace:Guidance
EvaluateVisualizationAndLoadIntoGPUMem	SRC/Maps/DataTileVizEvaluator.cpp	/^	ImTextureID EvaluateVisualizationAndLoadIntoGPUMem(FRFImage const * sourceFRFImage, VizualizationTileKey Key) {$/;"	f	namespace:Maps
ExecuteEdit	SRC/UI/AvoidanceZonesTool.cpp	/^void AvoidanceZonesTool::ExecuteEdit(Eigen::Vector2d const & CursorPos_NM) {$/;"	f	class:AvoidanceZonesTool
ExecuteEdit	SRC/UI/LandingZonesTool.cpp	/^void LandingZonesTool::ExecuteEdit(Eigen::Vector2d const & CursorPos_NM) {$/;"	f	class:LandingZonesTool
ExecuteEdit	SRC/UI/MSATool.cpp	/^void MSATool::ExecuteEdit(Eigen::Vector2d const & CursorPos_NM) {$/;"	f	class:MSATool
ExecuteEditActionOnTile_Circle	SRC/Maps/DataTileProvider.cpp	/^	bool DataTileProvider::ExecuteEditActionOnTile_Circle(PaintActionItem const & Action, Tile tile, Eigen::Vector4d const & AABB_NM) {$/;"	f	class:Maps::DataTileProvider
ExecuteEditActionOnTile_Rectangle	SRC/Maps/DataTileProvider.cpp	/^	bool DataTileProvider::ExecuteEditActionOnTile_Rectangle(PaintActionItem const & Action, Tile tile, Eigen::Vector4d const & AABB_NM) {$/;"	f	class:Maps::DataTileProvider
ExecuteWaypointMission	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::ExecuteWaypointMission(WaypointMission & Mission) {$/;"	f	class:DroneInterface::RealDrone
ExecuteWaypointMission	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::ExecuteWaypointMission(WaypointMission & Mission) {$/;"	f	class:DroneInterface::SimulatedDrone
ExpirationTimeSeconds	SRC/Maps/CacheMem.cpp	/^	constexpr std::chrono::seconds CacheMem::ExpirationTimeSeconds;$/;"	m	class:Maps::CacheMem	file:
ExpirationTimeSeconds	SRC/Maps/CacheMem.hpp	/^		static constexpr std::chrono::seconds ExpirationTimeSeconds = std::chrono::seconds(20);$/;"	m	struct:Maps::CacheMem
ExpirationTimeSeconds	SRC/Maps/DataTileProvider.hpp	/^			static constexpr std::chrono::seconds ExpirationTimeSeconds = std::chrono::seconds(20);$/;"	m	struct:Maps::DataTileProvider
FINAL_SIZE	SRC/Modules/Shadow-Detection/calib.h	/^const cv::Size FINAL_SIZE = cv::Size(1280, 720);$/;"	v
FRFImageIsTrivial	SRC/Maps/DataTileProvider.cpp	/^	bool DataTileCacheItem::FRFImageIsTrivial(void) {$/;"	f	class:Maps::DataTileCacheItem
FRFTileStore	SRC/Maps/FRFTileStore.cpp	/^FRFTileStore::FRFTileStore(IFRFFileReceiver * receiver, Journal & LogRef) : Log(LogRef), m_receiver(receiver), m_threads(4) {$/;"	f	class:Maps::FRFTileStore
FRFTileStore	SRC/Maps/FRFTileStore.hpp	/^	class FRFTileStore {$/;"	c	namespace:Maps
FileTimeEpoch_TOW	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^		double   FileTimeEpoch_TOW  = std::nan(""); \/\/The GPW Time of Week of the time-0 epoch used for file time. Set to NaN when absolute time is unknown$/;"	m	class:ShadowMapInfoBlock
FileTimeEpoch_Week	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^		uint32_t FileTimeEpoch_Week = 0U;           \/\/The GPS week of the time-0 epoch used for file time. Set to 0 when absolute time is unknown$/;"	m	class:ShadowMapInfoBlock
FinishNewPolyOrHole	SRC/UI/SurveyRegionTool.cpp	/^void SurveyRegionsTool::FinishNewPolyOrHole(SurveyRegion * surveyRegion) {$/;"	f	class:SurveyRegionsTool
FlightMode	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t  FlightMode;   \/\/Based on FCS.flightMode$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
ForwardScanForSync	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet::ForwardScanForSync(void) {$/;"	f	class:DroneInterface::Packet
FractionalPart	SRC/Utilities.hpp	/^inline double FractionalPart(double x) { return x - std::floor(x); }$/;"	f
FragmentIntersections	SRC/Polygon.cpp	/^void SimplePolygon::FragmentIntersections(SimplePolygon & OtherPoly) {$/;"	f	class:SimplePolygon
Frame	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			cv::Mat Frame;$/;"	m	class:DroneInterface::Packet_CompressedImage
Frame	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			cv::Mat Frame;$/;"	m	class:DroneInterface::Packet_Image
FrameSync	SRC/ReconMain.cpp	/^	FrameSyncType FrameSync    = FrameSyncType::INVALID;  \/\/VSync on\/off or enabled dynamically$/;"	m	namespace:Arguments	file:
FrameSyncToString	SRC/ReconMain.cpp	/^static std::string FrameSyncToString(FrameSyncType Sync) {$/;"	f	file:
FrameSyncTypeFromString	SRC/ReconMain.cpp	/^static FrameSyncType FrameSyncTypeFromString(std::string const & s) {$/;"	f	file:
GNSSManager	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			GNSSManager() : m_receiverConnected(false), m_reset(false), m_abort(false),$/;"	f	class:GNSSReceiver::GNSSManager
GNSSManager	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^	class GNSSManager {$/;"	c	namespace:GNSSReceiver
GNSSModuleEnabled	SRC/ProgOptions.hpp	/^		bool GNSSModuleEnabled;             \/\/If true, the GNSS receiver module should listen for GNSS receivers at the specified device path$/;"	m	class:ProgOptions
GNSSModuleVerbose	SRC/ProgOptions.hpp	/^		bool GNSSModuleVerbose;             \/\/If true, the GNSS receiver module will print out info about receiver status (for debugging GNSS)$/;"	m	class:ProgOptions
GNSSReceiver	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^namespace GNSSReceiver {$/;"	n
GNSSReceiverBaudRate	SRC/ProgOptions.hpp	/^		int GNSSReceiverBaudRate;           \/\/Baud rate for serial device$/;"	m	class:ProgOptions
GNSSReceiverDevicePath	SRC/ProgOptions.hpp	/^		std::string GNSSReceiverDevicePath; \/\/Path to serial device representing the GNSS receiver (or the port number on Windows)$/;"	m	class:ProgOptions
GNSSReceiverWindow	SRC/UI/GNSSReceiverWindow.hpp	/^		GNSSReceiverWindow() { }$/;"	f	class:GNSSReceiverWindow
GNSSReceiverWindow	SRC/UI/GNSSReceiverWindow.hpp	/^class GNSSReceiverWindow {$/;"	c
GNSSSatCount	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint16_t GNSSSatCount; \/\/Equals FCS.satelliteCount$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
GNSSSignal	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t  GNSSSignal;   \/\/From FCS.GPSSignalLevel (−1: None, ≥ 0: equals signal level)$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
GarbageCollectionThreadMain	SRC/Maps/DataTileProvider.cpp	/^	void DataTileProvider::GarbageCollectionThreadMain(void) {$/;"	f	class:Maps::DataTileProvider
GarbageCollectionThreadMain	SRC/Maps/SatelliteCacheMaster.cpp	/^void SatelliteCacheMaster::GarbageCollectionThreadMain(void) {$/;"	f	class:Maps::SatelliteCacheMaster
Get	SRC/Maps/CacheMem.cpp	/^	ImTextureID CacheMem::Get(Tile tile, SatelliteSource source) {$/;"	f	class:Maps::CacheMem
Get	SRC/SimpleKVStore.hpp	/^inline bool SimpleKVStore::Get(std::string const & Key, std::vector<uint8_t> & Value) {$/;"	f	class:SimpleKVStore
GetAABB	SRC/Polygon.cpp	/^Eigen::Vector4d SimplePolygon::GetAABB(void) const {$/;"	f	class:SimplePolygon
GetAABB	SRC/UI/GuidanceOverlay.cpp	/^Math::Vector4 GetAABB(Eigen::Vector2d const & A, Eigen::Vector2d const & B, Eigen::Vector2d const & C) {$/;"	f
GetActiveLimitations	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetActiveLimitations(bool & MaxHAG, bool & MaxDistFromHome, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetActiveLimitations	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetActiveLimitations(bool & MaxHAG, bool & MaxDistFromHome, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetActiveSurveyRegion	SRC/SurveyRegionManager.hpp	/^		SurveyRegion * GetActiveSurveyRegion(void) {$/;"	f	class:SurveyRegionManager
GetActiveWarnings	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetActiveWarnings(std::vector<std::string> & ActiveWarnings, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetActiveWarnings	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetActiveWarnings(std::vector<std::string> & ActiveWarnings, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetArea	SRC/Polygon.cpp	/^double Polygon::GetArea(void) const {$/;"	f	class:Polygon
GetArea	SRC/Polygon.cpp	/^double PolygonCollection::GetArea(void) const {$/;"	f	class:PolygonCollection
GetArea	SRC/Polygon.cpp	/^double SimplePolygon::GetArea(void) const {$/;"	f	class:SimplePolygon
GetArea	SRC/Polygon.cpp	/^double Triangle::GetArea(){$/;"	f	class:Triangle
GetAvailableToken	SRC/UI/MessageBoxOverlay.cpp	/^int MessageBoxOverlay::GetAvailableToken(void) {$/;"	f	class:MessageBoxOverlay
GetCentroidAndAABB	SRC/UI/GuidanceOverlay.cpp	/^void GetCentroidAndAABB(std::Evector<Eigen::Vector2d> const & points, Eigen::Vector2d & Centroid, Math::Vector4 & AABB) {$/;"	f
GetChildTiles	SRC/Maps/Tile.hpp	/^		std::vector<Tile> GetChildTiles() {$/;"	f	struct:Maps::Tile
GetColormap	SRC/Colormaps.hpp	/^	inline std::vector<std::tuple<uint8_t,uint8_t,uint8_t>> const & GetColormap(Colormap cmap) {$/;"	f	class:Colormaps::std
GetConnectedDroneSerialNumbers	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			inline std::vector<std::string> GetConnectedDroneSerialNumbers(void) {$/;"	f	class:DroneInterface::DroneManager
GetCopyOfActiveRegionData	SRC/SurveyRegionManager.hpp	/^		bool GetCopyOfActiveRegionData(std::string * Name, PolygonCollection * Region, std::Evector<Triangle> * Triangulation) {$/;"	f	class:SurveyRegionManager
GetCorners	SRC/Maps/DataTileProvider.cpp	/^	void PaintActionItem::GetCorners(Eigen::Vector2d & P1_NM, Eigen::Vector2d & P2_NM, Eigen::Vector2d & P3_NM, Eigen::Vector2d & P4_NM) {$/;"	f	class:Maps::PaintActionItem
GetCurrentLatLonBounds	SRC/UI/MapWidget.cpp	/^void MapWidget::GetCurrentLatLonBounds(Eigen::Vector2d & LatBounds, Eigen::Vector2d & LonBounds) {$/;"	f	class:MapWidget
GetCurrentWaypointMission	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetCurrentWaypointMission(WaypointMission & Mission) {$/;"	f	class:DroneInterface::RealDrone
GetCurrentWaypointMission	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetCurrentWaypointMission(WaypointMission & Mission) {$/;"	f	class:DroneInterface::SimulatedDrone
GetData	SRC/Maps/DataTileProvider.cpp	/^	double DataTileProvider::GetData(Eigen::Vector2d const & Position_NM, DataLayer layer, double Timeout) {$/;"	f	class:Maps::DataTileProvider
GetDataExtremesOnLine	SRC/Maps/DataTileProvider.cpp	/^	bool DataTileProvider::GetDataExtremesOnLine(Eigen::Vector2d const & PointA_NM, Eigen::Vector2d const & PointB_NM, double SampleDist, DataLayer layer,$/;"	f	class:Maps::DataTileProvider
GetDateAndTimeString	SRC/Journal.h	/^inline std::string Journal::GetDateAndTimeString(void) {$/;"	f	class:Journal
GetDefaultRenderingAPI	SRC/ReconMain.cpp	/^static RenderingAPI GetDefaultRenderingAPI(void) {$/;"	f	file:
GetDistanceBetweenTwoPoints	SRC/Modules/Guidance/Guidance.cpp	/^    double GetDistanceBetweenTwoPoints (double const a_latitude, double const a_longitude, double const b_latitude, double const b_longitude){$/;"	f	namespace:Guidance
GetDistanceToNearestEndpoint	SRC/Polygon.cpp	/^double LineSegment::GetDistanceToNearestEndpoint(Eigen::Vector2d const & Point) const {$/;"	f	class:LineSegment
GetDownloadURL	SRC/Maps/SatelliteSources.hpp	/^	inline std::string GetDownloadURL(Tile tile, SatelliteSource Source) {$/;"	f	namespace:Maps
GetDrone	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			inline Drone * GetDrone(std::string const & Serial) {$/;"	f	class:DroneInterface::DroneManager
GetDroneSerial	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	std::string RealDrone::GetDroneSerial(void) {$/;"	f	class:DroneInterface::RealDrone
GetDroneSerial	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	std::string SimulatedDrone::GetDroneSerial(void) {$/;"	f	class:DroneInterface::SimulatedDrone
GetFRFLayerIndex	SRC/Maps/DataTileProvider.cpp	/^	static int GetFRFLayerIndex(FRFImage const & FRF, DataLayer layer) {$/;"	f	namespace:Maps
GetFlightMode	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetFlightMode(std::string & FlightModeStr, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetFlightMode	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetFlightMode(std::string & FlightModeStr, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetGNSSStatus	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetGNSSStatus(unsigned int & SatCount, int & SignalLevel, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetGNSSStatus	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetGNSSStatus(unsigned int & SatCount, int & SignalLevel, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetGPSTime	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^	inline bool GNSSManager::GetGPSTime(uint32_t & Week, double & TOW, TimePoint & Timestamp) {$/;"	f	class:GNSSReceiver::GNSSManager
GetGroundAlt	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^	inline bool GNSSManager::GetGroundAlt(double & Altitude) {$/;"	f	class:GNSSReceiver::GNSSManager
GetHAG	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetHAG(double & HAG, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetHAG	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetHAG(double & HAG, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetLength	SRC/Polygon.cpp	/^double LineSegment::GetLength(void) const {$/;"	f	class:LineSegment
GetLineSegments	SRC/Polygon.cpp	/^std::Evector<LineSegment> SimplePolygon::GetLineSegments(void) const {$/;"	f	class:SimplePolygon
GetMapLocationAndZoomForGivenLatLonBounds	SRC/UI/MapWidget.cpp	/^std::tuple<Eigen::Vector2d, double> MapWidget::GetMapLocationAndZoomForGivenLatLonBounds(Eigen::Vector2d const & LatBounds, Eigen::Vector2d const & LonBounds) {$/;"	f	class:MapWidget
GetMissionProgressStr	SRC/Modules/Guidance/Guidance.hpp	/^	inline std::string GuidanceEngine::GetMissionProgressStr(void) {$/;"	f	class:Guidance::GuidanceEngine
GetMissionStatusStr	SRC/Modules/Guidance/Guidance.hpp	/^	inline std::string GuidanceEngine::GetMissionStatusStr(void) {$/;"	f	class:Guidance::GuidanceEngine
GetMostRecentFrame	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetMostRecentFrame(cv::Mat & Frame, unsigned int & FrameNumber, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetMostRecentFrame	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetMostRecentFrame(cv::Mat & Frame, unsigned int & FrameNumber, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetMostRecentShadowMap	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline bool ShadowDetectionEngine::GetMostRecentShadowMap(InstantaneousShadowMap & ShadowMap) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
GetMostRecentTimeAvailFun	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	inline bool ShadowPropagationEngine::GetMostRecentTimeAvailFun(TimeAvailableFunction & TimeAvailFun) {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
GetNMCoordsOfLRCornerOfTile	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector2d GetNMCoordsOfLRCornerOfTile(int32_t TileX, int32_t TileY, int32_t PyramidLevel) {$/;"	f
GetNMCoordsOfULCornerOfTile	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector2d GetNMCoordsOfULCornerOfTile(int32_t TileX, int32_t TileY, int32_t PyramidLevel) {$/;"	f
GetNM_AABB	SRC/Maps/DataTileProvider.cpp	/^	Eigen::Vector4d PaintActionItem::GetNM_AABB(void) {$/;"	f	class:Maps::PaintActionItem
GetNewGCPName	SRC/UI/LiveFiducialsWidget.hpp	/^inline std::string LiveFiducialsWidget::GetNewGCPName(void) {$/;"	f	class:LiveFiducialsWidget
GetNewGCPName	SRC/UI/SimFiducialsWidget.hpp	/^inline std::string SimFiducialsWidget::GetNewGCPName(void) {$/;"	f	class:SimFiducialsWidget
GetNewRegionName	SRC/UI/ModalDialogs.hpp	/^		std::string GetNewRegionName(void) {$/;"	f	class:SelectActiveRegionDialog
GetNormalFilesInDirectory	SRC/Utilities.hpp	/^inline std::vector<std::filesystem::path> GetNormalFilesInDirectory(std::filesystem::path const & DirPath) {$/;"	f
GetNumBytes	SRC/Maps/CacheFile.cpp	/^uint64_t CacheFile::GetNumBytes()       { return m_file->GetNumBytes();       }$/;"	f	class:Maps::CacheFile
GetNumBytes	SRC/Maps/FRFTileStore.cpp	/^uint64_t FRFTileStore::GetNumBytes()       { return m_file->GetNumBytes();       }$/;"	f	class:Maps::FRFTileStore
GetNumBytes	SRC/SimpleKVStore.hpp	/^		uint64_t GetNumBytes() { std::scoped_lock slock(Mtx); RefreshSizesIfNeeded(); return m_numBytes; }$/;"	f	class:SimpleKVStore
GetNumBytesOnDisk	SRC/Maps/CacheFile.cpp	/^uint64_t CacheFile::GetNumBytesOnDisk() { return m_file->GetNumBytesOnDisk(); }$/;"	f	class:Maps::CacheFile
GetNumBytesOnDisk	SRC/Maps/FRFTileStore.cpp	/^uint64_t FRFTileStore::GetNumBytesOnDisk() { return m_file->GetNumBytesOnDisk(); }$/;"	f	class:Maps::FRFTileStore
GetNumBytesOnDisk	SRC/SimpleKVStore.hpp	/^		uint64_t GetNumBytesOnDisk() { std::scoped_lock slock(Mtx); RefreshSizesIfNeeded(); return m_numBytesOnDisk; }$/;"	f	class:SimpleKVStore
GetNumItems	SRC/Maps/CacheFile.cpp	/^uint64_t CacheFile::GetNumItems()       { return m_file->GetNumItems();       }$/;"	f	class:Maps::CacheFile
GetNumItems	SRC/Maps/FRFTileStore.cpp	/^uint64_t FRFTileStore::GetNumItems()       { return m_file->GetNumItems();       }$/;"	f	class:Maps::FRFTileStore
GetNumItems	SRC/SimpleKVStore.hpp	/^		uint64_t GetNumItems() { std::scoped_lock slock(Mtx); return (ValuesFile.IsOpen() ? Index.size() : 0U); }$/;"	f	class:SimpleKVStore
GetNumberOfDataTilesDrawn	SRC/UI/MapWidget.hpp	/^		int GetNumberOfDataTilesDrawn(void) const { return int(numDataTilesDrawn); }$/;"	f	class:MapWidget
GetNumberOfFiducials	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline size_t ShadowDetectionEngine::GetNumberOfFiducials(void) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
GetNumberOfSatTilesDrawn	SRC/UI/MapWidget.hpp	/^		int GetNumberOfSatTilesDrawn(void)  const { return int(numSatTilesDrawn);  }$/;"	f	class:MapWidget
GetOrientation	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetOrientation(double & Yaw, double & Pitch, double & Roll, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetOrientation	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetOrientation(double & Yaw, double & Pitch, double & Roll, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetPID	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet::GetPID(uint8_t & PID) const {$/;"	f	class:DroneInterface::Packet
GetParentTile	SRC/Maps/Tile.hpp	/^		Tile GetParentTile() { return Tile(Xi\/2, Yi\/2, Zoom-1); }$/;"	f	struct:Maps::Tile
GetPosition	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetPosition(double & Latitude, double & Longitude, double & Altitude, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetPosition	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetPosition(double & Latitude, double & Longitude, double & Altitude, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetPositionAccuracy	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^	inline bool GNSSManager::GetPositionAccuracy(double & HorizontalAcc, double & VerticalAcc, double & ThreeDAcc, TimePoint & Timestamp) {$/;"	f	class:GNSSReceiver::GNSSManager
GetPosition_ECEF	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^	inline bool GNSSManager::GetPosition_ECEF(Eigen::Vector3d & Pos_ECEF, TimePoint & Timestamp) {$/;"	f	class:GNSSReceiver::GNSSManager
GetPosition_LLA	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^	inline bool GNSSManager::GetPosition_LLA(Eigen::Vector3d & Pos_LLA, TimePoint & Timestamp) {$/;"	f	class:GNSSReceiver::GNSSManager
GetPosition_NM	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^	inline bool GNSSManager::GetPosition_NM(Eigen::Vector2d & Pos_NM, TimePoint & Timestamp) {$/;"	f	class:GNSSReceiver::GNSSManager
GetProviderDroneSerial	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline std::string ShadowDetectionEngine::GetProviderDroneSerial(void) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
GetRefFrame	SRC/Utilities.cpp	/^cv::Mat GetRefFrame(std::filesystem::path const & DatasetPath) {$/;"	f
GetReferenceFrame	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetReferenceFrame(double SecondsIntoVideo, cv::Mat & Frame) {$/;"	f	class:DroneInterface::SimulatedDrone
GetSerialsOfDronesUnderCommand	SRC/Modules/Guidance/Guidance.hpp	/^	inline std::vector<std::string> GuidanceEngine::GetSerialsOfDronesUnderCommand(void) {$/;"	f	class:Guidance::GuidanceEngine
GetSigInfo	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^	inline bool GNSSManager::GetSigInfo(int & SatCount_GPS,  int & SatCount_SBAS, int & SatCount_Galileo, int & SatCount_BeiDou,$/;"	f	class:GNSSReceiver::GNSSManager
GetSimVideoFilePath	SRC/Utilities.cpp	/^std::filesystem::path GetSimVideoFilePath(std::filesystem::path const & DatasetPath) {$/;"	f
GetSourceVideoFile	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	std::filesystem::path SimulatedDrone::GetSourceVideoFile(void) {$/;"	f	class:DroneInterface::SimulatedDrone
GetTakeoffPosition	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetTakeoffPosition(double & Latitude, double & Longitude, double & Altitude) {$/;"	f	class:DroneInterface::RealDrone
GetTakeoffPosition	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetTakeoffPosition(double & Latitude, double & Longitude, double & Altitude) {$/;"	f	class:DroneInterface::SimulatedDrone
GetThemeStrings_OneLine	SRC/UI/Themes.hpp	/^inline std::string Themes::GetThemeStrings_OneLine(void) {$/;"	f	class:Themes
GetTileIdentifier	SRC/Maps/SatelliteSources.hpp	/^	inline std::string GetTileIdentifier(Tile tile, SatelliteSource Source) {$/;"	f	namespace:Maps
GetTimestampOfMostRecentShadowMap	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline bool ShadowDetectionEngine::GetTimestampOfMostRecentShadowMap(TimePoint & Timestamp) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
GetTimestampOfMostRecentTimeAvailFun	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	inline bool ShadowPropagationEngine::GetTimestampOfMostRecentTimeAvailFun(TimePoint & Timestamp) {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
GetTriangleScore	SRC/Modules/Guidance/Guidance.cpp	/^    double GetTriangleScore(Triangle & triangle, ImagingRequirements const & ImagingReqs){$/;"	f	namespace:Guidance
GetValue	SRC/UI/Animation.hpp	/^inline double AnimatedVariable1D::GetValue() {$/;"	f	class:AnimatedVariable1D
GetVehicleBatteryLevel	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetVehicleBatteryLevel(double & BattLevel, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetVehicleBatteryLevel	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetVehicleBatteryLevel(double & BattLevel, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetVelocity	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::GetVelocity(double & V_North, double & V_East, double & V_Down, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
GetVelocity	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::GetVelocity(double & V_North, double & V_East, double & V_Down, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
GetVertices	SRC/Polygon.hpp	/^    std::Evector<Eigen::Vector2d> const & GetVertices(void) const { return m_vertices; }$/;"	f	class:SimplePolygon::std
GetViewableArea_NormalizedMercator	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector4d GetViewableArea_NormalizedMercator(Eigen::Vector2d const & ULCorner_NM, Eigen::Vector2d const & WindowDims, double Zoom, int32_t tileWidth) {$/;"	f
GetWidgetHeight	SRC/UI/ConsoleWidget.hpp	/^	float GetWidgetHeight(void)   {$/;"	f	class:ConsoleWidget
GetWidgetRecommendedHeight	SRC/UI/CommandWidget.hpp	/^		float GetWidgetRecommendedHeight(void) { return RecommendedHeight; } \/\/Typically equals ContentHeight, but changes smoothly with time for animation.$/;"	f	class:CommandWidget
GetWidgetRecommendedHeight	SRC/UI/VehicleControlWidget.hpp	/^		float GetWidgetRecommendedHeight(void) { return RecommendedHeight; } \/\/Typically equals ContentHeight, but changes smoothly with time for animation.$/;"	f	class:VehicleControlWidget
GetYawDelta	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	static double GetYawDelta(double Yaw, double TargetYaw) {$/;"	f	namespace:DroneInterface
GimbalPitch	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float GimbalPitch = std::nanf("");  \/\/Pitch of Gimbal, if connected (DJI Definition) in radians at waypoint.$/;"	m	struct:DroneInterface::Waypoint
GoHomeAndLand	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::GoHomeAndLand(void) {$/;"	f	class:DroneInterface::RealDrone
GoHomeAndLand	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::GoHomeAndLand(void) {$/;"	f	class:DroneInterface::SimulatedDrone
GraphicsAPI	SRC/ReconMain.cpp	/^	RenderingAPI  GraphicsAPI  = RenderingAPI::INVALID;   \/\/Rendering API (DirectX, OpenGL, etc.)$/;"	m	namespace:Arguments	file:
Guidance	SRC/Modules/Guidance/Guidance.cpp	/^namespace Guidance {$/;"	n	file:
Guidance	SRC/Modules/Guidance/Guidance.hpp	/^namespace Guidance {$/;"	n
GuidanceEngine	SRC/Modules/Guidance/Guidance.hpp	/^			GuidanceEngine() : m_running(false), m_abort(false), m_missionPrepDone(false) {$/;"	f	class:Guidance::GuidanceEngine
GuidanceEngine	SRC/Modules/Guidance/Guidance.hpp	/^	class GuidanceEngine {$/;"	c	namespace:Guidance
GuidanceOverlay	SRC/UI/GuidanceOverlay.hpp	/^class GuidanceOverlay {$/;"	c
GuidanceOverlay_Vis	SRC/UI/VisWidget.hpp	/^		int GuidanceOverlay_Vis; \/\/0=Partition, 1=Triangles, 2=Sequences, 3=Sequences+Missions$/;"	m	class:VisWidget
HAG	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			double  HAG;       \/\/Height above takeoff location$/;"	m	class:DroneInterface::Packet_CoreTelemetry
HAG	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   HAG;$/;"	m	class:DroneInterface::Packet_VirtualStickCommand
HAG	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float HAG       = 10.0f; \/\/m: Height above ground (vehicle altitude - takeoff altitude)$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeB
HAG	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float HAG     = 10.0f;  \/\/m: Height above ground (vehicle altitude - takeoff altitude)$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeA
HAG	SRC/Modules/Guidance/Guidance.hpp	/^			double HAG;             \/\/Height Above Ground (m)$/;"	m	struct:Guidance::ImagingRequirements
HEREHybridMaps	SRC/Maps/SatelliteSources.hpp	/^		HEREHybridMaps,$/;"	m	class:Maps::SatelliteSource
HERESatelliteMaps	SRC/Maps/SatelliteSources.hpp	/^		HERESatelliteMaps,$/;"	m	class:Maps::SatelliteSource
HFOV	SRC/Modules/Guidance/Guidance.hpp	/^			double HFOV;            \/\/Horizontal Field Of View (radians) for the camera on the low-flying drones$/;"	m	struct:Guidance::ImagingRequirements
Has	SRC/Maps/CacheMem.cpp	/^	bool CacheMem::Has(Tile tile, SatelliteSource source) {$/;"	f	class:Maps::CacheMem
Has	SRC/SimpleKVStore.hpp	/^		bool Has(std::string const & Key) { std::scoped_lock slock(Mtx); return (Index.count(Key) > 0U); }$/;"	f	class:SimpleKVStore
HasDrawable	SRC/UI/Drawable.hpp	/^		bool HasDrawable(std::string const & DrawableName) { return (m_drawableNames.count(DrawableName) > 0U); }$/;"	f	class:DrawableHost
HeaderLabel	SRC/UI/MyGui.hpp	/^	inline void HeaderLabel(const char * UnformattedText) {$/;"	f	namespace:MyGui
Hide	SRC/UI/LiveFiducialsWidget.hpp	/^inline void LiveFiducialsWidget::Hide() {$/;"	f	class:LiveFiducialsWidget
HighContrastCursor	SRC/ProgOptions.hpp	/^		bool HighContrastCursor; \/\/ImGui draws the cursor and tries to make it bigger and easier to see when true$/;"	m	class:ProgOptions
Hover	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::Hover(void) {$/;"	f	class:DroneInterface::RealDrone
Hover	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::Hover(void) {$/;"	f	class:DroneInterface::SimulatedDrone
IFRFFileReceiver	SRC/Maps/Interfaces.hpp	/^	struct IFRFFileReceiver {$/;"	s	namespace:Maps
IMViewUV0	SRC/UI/LiveFiducialsWidget.hpp	/^		ImVec2 IMViewUV0; \/\/The UV Coords of the upper-left corner of the view of the ref frame$/;"	m	class:LiveFiducialsWidget
IMViewUV0	SRC/UI/SimFiducialsWidget.hpp	/^		ImVec2 IMViewUV0; \/\/The UV Coords of the upper-left corner of the view of the ref frame$/;"	m	class:SimFiducialsWidget
IMViewUV1	SRC/UI/LiveFiducialsWidget.hpp	/^		ImVec2 IMViewUV1; \/\/The UV Coords of the lower-right corner of the view of the ref frame$/;"	m	class:LiveFiducialsWidget
IMViewUV1	SRC/UI/SimFiducialsWidget.hpp	/^		ImVec2 IMViewUV1; \/\/The UV Coords of the lower-right corner of the view of the ref frame$/;"	m	class:SimFiducialsWidget
IM_VEC2_CLASS_EXTRA	SRC/HandyImGuiInclude.hpp	12;"	d
IM_VEC2_CLASS_EXTRA	SRC/HandyImGuiInclude.hpp	9;"	d
IM_VEC4_CLASS_EXTRA	SRC/HandyImGuiInclude.hpp	10;"	d
IM_VEC4_CLASS_EXTRA	SRC/HandyImGuiInclude.hpp	21;"	d
ITileFileReceiver	SRC/Maps/Interfaces.hpp	/^	struct ITileFileReceiver {$/;"	s	namespace:Maps
ITileWebReceiver	SRC/Maps/Interfaces.hpp	/^	struct ITileWebReceiver {$/;"	s	namespace:Maps
Icon_Laptop_Dark_96x75	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_Laptop_Dark_96x75[] = {$/;"	v
Icon_Laptop_Light_96x75	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_Laptop_Light_96x75[] = {$/;"	v
Icon_Play_84x84	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_Play_84x84[] = {$/;"	v
Icon_QuadCopterTopView_Dark_42x42	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_QuadCopterTopView_Dark_42x42[] = {$/;"	v
Icon_QuadCopterTopView_Dark_84x84	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_QuadCopterTopView_Dark_84x84[] = {$/;"	v
Icon_QuadCopterTopView_LightHighlighted_84x84	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_QuadCopterTopView_LightHighlighted_84x84[] = {$/;"	v
Icon_QuadCopterTopView_Light_42x42	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_QuadCopterTopView_Light_42x42[] = {$/;"	v
Icon_QuadCopterTopView_Light_84x84	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_QuadCopterTopView_Light_84x84[] = {$/;"	v
Icon_Warning_84x84	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_Warning_84x84[] = {$/;"	v
Icon_Watchdog_Dark_84x84	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_Watchdog_Dark_84x84[] = {$/;"	v
Icon_Watchdog_Light_84x84	SRC/UI/EmbeddedIcons.cpp	/^const uint8_t Icon_Watchdog_Light_84x84[] = {$/;"	v
ImageCoordsToScreenSpace	SRC/UI/LiveFiducialsWidget.hpp	/^inline ImVec2 LiveFiducialsWidget::ImageCoordsToScreenSpace(Eigen::Vector2d const & Pos_ImageCoords, ImVec2 ULCorner_ScreenSpace, ImVec2 LRCorner_ScreenSpace) {$/;"	f	class:LiveFiducialsWidget
ImageCoordsToScreenSpace	SRC/UI/SimFiducialsWidget.hpp	/^inline ImVec2 SimFiducialsWidget::ImageCoordsToScreenSpace(Eigen::Vector2d const & Pos_ImageCoords, ImVec2 ULCorner_ScreenSpace, ImVec2 LRCorner_ScreenSpace) {$/;"	f	class:SimFiducialsWidget
ImagingRequirements	SRC/Modules/Guidance/Guidance.hpp	/^	struct ImagingRequirements {$/;"	s	namespace:Guidance
Index	SRC/SimpleKVStore.hpp	/^		std::unordered_map<std::string, std::tuple<uint64_t, uint64_t>> Index; \/\/Key --> <Offset, ValueLength>$/;"	m	class:SimpleKVStore
IndexToColor	SRC/UI/GuidanceOverlay.cpp	/^ImU32 GuidanceOverlay::IndexToColor(size_t Index, size_t N, float Opacity) {$/;"	f	class:GuidanceOverlay
InformationDialog	SRC/UI/ModalDialogs.hpp	/^class InformationDialog {$/;"	c
Init	SRC/Maps/DataTileProvider.hpp	/^			static void               Init(Journal & LogRef) { s_instance = new DataTileProvider(LogRef); }$/;"	f	struct:Maps::DataTileProvider
Init	SRC/Maps/SatelliteCacheMaster.hpp	/^		static void                   Init(Journal & LogRef) { s_instance = new SatelliteCacheMaster(LogRef); }$/;"	f	class:Maps::SatelliteCacheMaster
Init	SRC/ProgOptions.hpp	/^		static void Init(std::filesystem::path OptionFilePath, Journal & LogRef) { s_instance = new ProgOptions(OptionFilePath, LogRef); }$/;"	f	class:ProgOptions
InitializeFRFTileContents	SRC/Maps/DataTileProvider.cpp	/^	void DataTileCacheItem::InitializeFRFTileContents(FRFImage * FRFTile) {$/;"	f	class:Maps::DataTileCacheItem
InstallCrashReporting	SRC/ReconMain.cpp	/^bool InstallCrashReporting(void) {$/;"	f
Instance	SRC/Maps/DataTileProvider.hpp	/^			static DataTileProvider * Instance(void)         { return s_instance; }$/;"	f	struct:Maps::DataTileProvider
Instance	SRC/Maps/SatelliteCacheMaster.hpp	/^		static SatelliteCacheMaster * Instance(void)         { return s_instance; }$/;"	f	class:Maps::SatelliteCacheMaster
Instance	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			static DroneManager & Instance() { static DroneManager Obj; return Obj; }$/;"	f	class:DroneInterface::DroneManager
Instance	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			static GNSSManager & Instance() { static GNSSManager Obj; return Obj; }$/;"	f	class:GNSSReceiver::GNSSManager
Instance	SRC/Modules/Guidance/Guidance.hpp	/^			static GuidanceEngine & Instance() { static GuidanceEngine Obj; return Obj; }$/;"	f	class:Guidance::GuidanceEngine
Instance	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			static ShadowDetectionEngine & Instance() { static ShadowDetectionEngine Obj; return Obj; }$/;"	f	class:ShadowDetection::ShadowDetectionEngine
Instance	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			static ShadowPropagationEngine & Instance() { static ShadowPropagationEngine Obj; return Obj; }$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
Instance	SRC/ProgOptions.hpp	/^		static ProgOptions * Instance(void) { return s_instance; }$/;"	f	class:ProgOptions
Instance	SRC/SurveyRegionManager.hpp	/^		static SurveyRegionManager & Instance() { static SurveyRegionManager Obj; return Obj; }$/;"	f	class:SurveyRegionManager
Instance	SRC/UI/AboutWindow.hpp	/^		static AboutWindow & Instance() { static AboutWindow win; return win; }$/;"	f	class:AboutWindow
Instance	SRC/UI/BookmarkManager.hpp	/^		static BookmarkManager & Instance() { static BookmarkManager Obj; return Obj; }$/;"	f	class:BookmarkManager
Instance	SRC/UI/CommandWidget.hpp	/^		static CommandWidget & Instance() { static CommandWidget Widget; return Widget; }$/;"	f	class:CommandWidget
Instance	SRC/UI/ConsoleWidget.hpp	/^	static ConsoleWidget & Instance() { static ConsoleWidget Widget; return Widget; }$/;"	f	class:ConsoleWidget
Instance	SRC/UI/GNSSReceiverWindow.hpp	/^		static GNSSReceiverWindow & Instance() { static GNSSReceiverWindow win; return win; }$/;"	f	class:GNSSReceiverWindow
Instance	SRC/UI/LiveFiducialsWidget.hpp	/^		static LiveFiducialsWidget & Instance() { static LiveFiducialsWidget widget; return widget; }$/;"	f	class:LiveFiducialsWidget
Instance	SRC/UI/MainMenu.hpp	/^		static MainMenu & Instance() { static MainMenu menu; return menu; }$/;"	f	class:MainMenu
Instance	SRC/UI/MapWidget.hpp	/^		static MapWidget & Instance() { static MapWidget widget; return widget; }$/;"	f	class:MapWidget
Instance	SRC/UI/ModalDialogs.hpp	/^		static DeleteBookmarkDialog & Instance() { static DeleteBookmarkDialog Dialog; return Dialog; }$/;"	f	class:DeleteBookmarkDialog
Instance	SRC/UI/ModalDialogs.hpp	/^		static InformationDialog & Instance() { static InformationDialog Dialog; return Dialog; }$/;"	f	class:InformationDialog
Instance	SRC/UI/ModalDialogs.hpp	/^		static NewBookmarkDialog & Instance() { static NewBookmarkDialog Dialog; return Dialog; }$/;"	f	class:NewBookmarkDialog
Instance	SRC/UI/ModalDialogs.hpp	/^		static SelectActiveRegionDialog & Instance() { static SelectActiveRegionDialog Dialog; return Dialog; }$/;"	f	class:SelectActiveRegionDialog
Instance	SRC/UI/ModalDialogs.hpp	/^		static ZoomToCoordsDialog & Instance() { static ZoomToCoordsDialog Dialog; return Dialog; }$/;"	f	class:ZoomToCoordsDialog
Instance	SRC/UI/ReconUI.hpp	/^		static ReconUI & Instance() { static ReconUI app; return app; }$/;"	f	class:ReconUI
Instance	SRC/UI/SettingsWindow.hpp	/^		static SettingsWindow & Instance() { static SettingsWindow win; return win; }$/;"	f	class:SettingsWindow
Instance	SRC/UI/SimFiducialsWidget.hpp	/^		static SimFiducialsWidget & Instance() { static SimFiducialsWidget widget; return widget; }$/;"	f	class:SimFiducialsWidget
Instance	SRC/UI/TextureUploadFlowRestrictor.hpp	/^		static TextureUploadFlowRestrictor & Instance() { static TextureUploadFlowRestrictor Obj; return Obj; }$/;"	f	class:TextureUploadFlowRestrictor
Instance	SRC/UI/VehicleControlWidget.hpp	/^		static VehicleControlWidget & Instance() { static VehicleControlWidget Widget; return Widget; }$/;"	f	class:VehicleControlWidget
Instance	SRC/UI/VisWidget.hpp	/^		static VisWidget & Instance() { static VisWidget Widget; return Widget; }$/;"	f	class:VisWidget
InstantaneousShadowMap	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	class InstantaneousShadowMap {$/;"	c	namespace:ShadowDetection
IntersectsWith	SRC/Polygon.cpp	/^bool Polygon::IntersectsWith(Polygon const & OtherPoly) const {$/;"	f	class:Polygon
IntersectsWith	SRC/Polygon.cpp	/^bool SimplePolygon::IntersectsWith(SimplePolygon const & OtherPoly) const {$/;"	f	class:SimplePolygon
IsAlive	SRC/UI/Drawable.hpp	/^		bool IsAlive = true; \/\/Setting to false will trigger destruction by host$/;"	m	class:Drawable
IsCamImageFeedOn	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::IsCamImageFeedOn(void) {$/;"	f	class:DroneInterface::RealDrone
IsCamImageFeedOn	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::IsCamImageFeedOn(void) {$/;"	f	class:DroneInterface::SimulatedDrone
IsClosedOrClosing	SRC/UI/ConsoleWidget.hpp	/^	bool  IsClosedOrClosing(void) { return (WidgetHeight.IsInStateA() || WidgetHeight.IsTransitioning_B_To_A()); }$/;"	f	class:ConsoleWidget
IsConnected	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			inline bool IsConnected(void) { return m_receiverConnected; }$/;"	f	class:GNSSReceiver::GNSSManager
IsCurrentlyExecutingWaypointMission	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::IsCurrentlyExecutingWaypointMission(bool & Result, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
IsCurrentlyExecutingWaypointMission	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::IsCurrentlyExecutingWaypointMission(bool & Result, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
IsCurrentlyFlying	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::IsCurrentlyFlying(bool & Result, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::RealDrone
IsCurrentlyFlying	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::IsCurrentlyFlying(bool & Result, TimePoint & Timestamp) {$/;"	f	class:DroneInterface::SimulatedDrone
IsDJICamConnected	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::IsDJICamConnected(void) {$/;"	f	class:DroneInterface::RealDrone
IsDJICamConnected	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::IsDJICamConnected(void) {$/;"	f	class:DroneInterface::SimulatedDrone
IsDead	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::IsDead(void) {$/;"	f	class:DroneInterface::RealDrone
IsDegenerate	SRC/Polygon.cpp	/^bool LineSegment::IsDegenerate(void) const {$/;"	f	class:LineSegment
IsDroneHovered	SRC/UI/VehicleControlWidget.hpp	/^inline bool VehicleControlWidget::IsDroneHovered(Eigen::Vector2d const & CursorPos_ScreenSpace, Eigen::Vector2d const & drone_ScreenSpace,$/;"	f	class:VehicleControlWidget
IsErrorMessage	SRC/UI/MessageBoxOverlay.cpp	/^static bool IsErrorMessage(std::string const & Message, size_t & HeadLength) {$/;"	f	file:
IsEssentiallyIdentical	SRC/Maps/DataTileProvider.cpp	/^	bool PaintActionItem::IsEssentiallyIdentical(PaintActionItem const & OtherItem) {$/;"	f	class:Maps::PaintActionItem
IsFinished	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet::IsFinished(void) {$/;"	f	class:DroneInterface::Packet
IsFlying	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t IsFlying;  \/\/=1 if FCS.isFlying is true, =0 if false$/;"	m	class:DroneInterface::Packet_CoreTelemetry
IsInStateA	SRC/UI/Animation.hpp	/^inline bool AnimatedVariable1D::IsInStateA() {$/;"	f	class:AnimatedVariable1D
IsInStateB	SRC/UI/Animation.hpp	/^inline bool AnimatedVariable1D::IsInStateB() {$/;"	f	class:AnimatedVariable1D
IsOpen	SRC/SimpleKVStore.hpp	/^		bool IsOpen(void) {	std::scoped_lock slock(Mtx); return ValuesFile.IsOpen(); }$/;"	f	class:SimpleKVStore
IsPredictedToFinishWithoutShadows	SRC/Modules/Guidance/Guidance.cpp	/^    bool IsPredictedToFinishWithoutShadows(ShadowPropagation::TimeAvailableFunction const & TA, DroneInterface::WaypointMission const & Mission,$/;"	f	namespace:Guidance
IsReferenceFrameSet	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline bool ShadowDetectionEngine::IsReferenceFrameSet(void) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
IsRunning	SRC/Modules/Guidance/Guidance.cpp	/^    bool GuidanceEngine::IsRunning(void) {$/;"	f	class:Guidance::GuidanceEngine
IsRunning	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline bool ShadowDetectionEngine::IsRunning(void) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
IsRunning	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	inline bool ShadowPropagationEngine::IsRunning(void) {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
IsShadowMapFile	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^static inline bool IsShadowMapFile(FRFImage const & File) { return File.HasCustomBlock((uint64_t) 0U); }$/;"	f
IsTransitioning	SRC/UI/Animation.hpp	/^inline bool AnimatedVariable1D::IsTransitioning() {$/;"	f	class:AnimatedVariable1D
IsTransitioning	SRC/UI/ConsoleWidget.hpp	/^	bool  IsTransitioning(void)   { return WidgetHeight.IsTransitioning(); }$/;"	f	class:ConsoleWidget
IsTransitioning_A_To_B	SRC/UI/Animation.hpp	/^inline bool AnimatedVariable1D::IsTransitioning_A_To_B() {$/;"	f	class:AnimatedVariable1D
IsTransitioning_B_To_A	SRC/UI/Animation.hpp	/^inline bool AnimatedVariable1D::IsTransitioning_B_To_A() {$/;"	f	class:AnimatedVariable1D
IsTrivial	SRC/Polygon.hpp	/^    bool IsTrivial(void) const { return ((m_boundary.NumVertices() <= 2U) || (m_boundary.GetArea() <= 0.0)); }$/;"	f	class:Polygon
IsValid	SRC/Polygon.cpp	/^bool Polygon::IsValid(void) const {$/;"	f	class:Polygon
IsValid	SRC/Polygon.cpp	/^bool PolygonCollection::IsValid(void) const {$/;"	f	class:PolygonCollection
IsVisible	SRC/UI/Drawable.hpp	/^		bool IsVisible = true;$/;"	m	class:Drawable
IsWarningMessage	SRC/UI/MessageBoxOverlay.cpp	/^static bool IsWarningMessage(std::string const & Message, size_t & HeadLength) {$/;"	f	file:
IssueVirtualStickCommand	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::IssueVirtualStickCommand(VirtualStickCommand_ModeA const & Command) { $/;"	f	class:DroneInterface::RealDrone
IssueVirtualStickCommand	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::IssueVirtualStickCommand(VirtualStickCommand_ModeB const & Command) { $/;"	f	class:DroneInterface::RealDrone
IssueVirtualStickCommand	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::IssueVirtualStickCommand(VirtualStickCommand_ModeA const & Command) {$/;"	f	class:DroneInterface::SimulatedDrone
IssueVirtualStickCommand	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::IssueVirtualStickCommand(VirtualStickCommand_ModeB const & Command) {$/;"	f	class:DroneInterface::SimulatedDrone
Items	SRC/UI/ConsoleWidget.hpp	/^	std::vector<std::string> Items;$/;"	m	class:ConsoleWidget
Journal	SRC/Journal.h	/^class Journal {$/;"	c
Journal	SRC/Journal.h	/^inline Journal::Journal(std::filesystem::path LogPath, std::ostream * Stream, bool Append) {$/;"	f	class:Journal
LINKER_TRIM_FLAGS	Makefile	/^LINKER_TRIM_FLAGS = $/;"	m
LINK_FLAGS	Makefile	/^LINK_FLAGS            = -fdiagnostics-color=auto -static-libstdc++ -static-libgcc -lstdc++ -lstdc++fs \\$/;"	m
LLA2ECEF	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector3d LLA2ECEF(Eigen::Vector3d const & Position_LLA) {$/;"	f
LL_LL	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Vector2d LL_LL; \/\/(Latitude, Longitude) of center of lower-left pixel, in radians$/;"	m	class:ShadowDetection::InstantaneousShadowMap
LL_LL	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Vector2d LL_LL; \/\/(Latitude, Longitude) of center of lower-left pixel, in radians$/;"	m	class:ShadowDetection::ShadowMapHistory
LL_LL	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			Eigen::Vector2d LL_LL; \/\/(Latitude, Longitude) of center of lower-left pixel, in radians$/;"	m	class:ShadowPropagation::TimeAvailableFunction
LL_LL	SRC/UI/ShadowMapOverlay.hpp	/^		Eigen::Vector2d LL_LL; \/\/(Latitude, Longitude) of center of lower-left pixel, in radians$/;"	m	class:ShadowMapOverlay
LL_LL	SRC/UI/TimeAvailableOverlay.hpp	/^		Eigen::Vector2d LL_LL; \/\/(Latitude, Longitude) of center of lower-left pixel, in radians$/;"	m	class:TimeAvailableOverlay
LR_LL	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Vector2d LR_LL; \/\/(Latitude, Longitude) of center of lower-right pixel, in radians$/;"	m	class:ShadowDetection::InstantaneousShadowMap
LR_LL	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Vector2d LR_LL; \/\/(Latitude, Longitude) of center of lower-right pixel, in radians$/;"	m	class:ShadowDetection::ShadowMapHistory
LR_LL	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			Eigen::Vector2d LR_LL; \/\/(Latitude, Longitude) of center of lower-right pixel, in radians$/;"	m	class:ShadowPropagation::TimeAvailableFunction
LR_LL	SRC/UI/ShadowMapOverlay.hpp	/^		Eigen::Vector2d LR_LL; \/\/(Latitude, Longitude) of center of lower-right pixel, in radians$/;"	m	class:ShadowMapOverlay
LR_LL	SRC/UI/TimeAvailableOverlay.hpp	/^		Eigen::Vector2d LR_LL; \/\/(Latitude, Longitude) of center of lower-right pixel, in radians$/;"	m	class:TimeAvailableOverlay
LambdaTwistSolve	SRC/Modules/Shadow-Detection/lambda_twist.h	/^inline void LambdaTwistSolve(Eigen::Matrix3d const& BearingVectors,$/;"	f
LandAtEnd	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t LandAtEnd;$/;"	m	class:DroneInterface::Packet_ExecuteWaypointMission
LandAtLastWaypoint	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		bool LandAtLastWaypoint = false; \/\/If true, the vehicle lands after the final waypoint. If false, the vehicle hovers in P flight mode after last waypoint.$/;"	m	struct:DroneInterface::WaypointMission
LandLowestFlyingDrone	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::LandLowestFlyingDrone(std::vector<DroneInterface::Drone *> const & Drones,$/;"	f	class:VehicleControlWidget
LandNow	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::LandNow(void) {$/;"	f	class:DroneInterface::RealDrone
LandNow	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::LandNow(void) {$/;"	f	class:DroneInterface::SimulatedDrone
LandingZonesTool	SRC/UI/LandingZonesTool.cpp	/^LandingZonesTool::LandingZonesTool() :$/;"	f	class:LandingZonesTool
LandingZonesTool	SRC/UI/LandingZonesTool.hpp	/^class LandingZonesTool {$/;"	c
LatLonToNM	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector2d LatLonToNM(Eigen::Vector2d const & LatLon) {$/;"	f
Latitude	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			double  Latitude;  \/\/WGS84 Latitude (Degrees)$/;"	m	class:DroneInterface::Packet_CoreTelemetry
Latitude	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		double Latitude  = 0.0; \/\/WGS84 Latitude of waypoint (Radians)$/;"	m	struct:DroneInterface::Waypoint
LayerTimeTags	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^		std::vector<double> LayerTimeTags;          \/\/File-time tags for each layer. item n corresponds to layer n. Must have exactly one item per layer$/;"	m	class:ShadowMapInfoBlock
LayerVisible_AvoidanceZones	SRC/UI/VisWidget.hpp	/^		bool LayerVisible_AvoidanceZones;$/;"	m	class:VisWidget
LayerVisible_GuidanceOverlay	SRC/UI/VisWidget.hpp	/^		bool LayerVisible_GuidanceOverlay;$/;"	m	class:VisWidget
LayerVisible_MSA	SRC/UI/VisWidget.hpp	/^		bool LayerVisible_MSA;$/;"	m	class:VisWidget
LayerVisible_SafeLandingZones	SRC/UI/VisWidget.hpp	/^		bool LayerVisible_SafeLandingZones;$/;"	m	class:VisWidget
LayerVisible_ShadowMapOverlay	SRC/UI/VisWidget.hpp	/^		bool LayerVisible_ShadowMapOverlay;$/;"	m	class:VisWidget
LayerVisible_SurveyRegion	SRC/UI/VisWidget.hpp	/^		bool LayerVisible_SurveyRegion;$/;"	m	class:VisWidget
LayerVisible_TimeAvailableOverlay	SRC/UI/VisWidget.hpp	/^		bool LayerVisible_TimeAvailableOverlay;$/;"	m	class:VisWidget
LineSegment	SRC/Polygon.hpp	/^    LineSegment() : m_endpoint1(0.0, 0.0), m_endpoint2(0.0, 0.0) { }$/;"	f	class:LineSegment
LineSegment	SRC/Polygon.hpp	/^    LineSegment(Eigen::Vector2d const & Endpoint1, Eigen::Vector2d const & Endpoint2) : m_endpoint1(Endpoint1), m_endpoint2(Endpoint2) { }$/;"	f	class:LineSegment
LineSegment	SRC/Polygon.hpp	/^class LineSegment {$/;"	c
LiveFiducialsWidget	SRC/UI/LiveFiducialsWidget.hpp	/^class LiveFiducialsWidget {$/;"	c
Load	SRC/UI/Themes.hpp	/^inline void Themes::ThemeSitter::Load(void) {$/;"	f	class:Themes::ThemeSitter
LoadDefaults	SRC/ProgOptions.hpp	/^inline void ProgOptions::LoadDefaults(void) {$/;"	f	class:ProgOptions
LoadDefaults	SRC/UI/VisWidget.hpp	/^inline void VisWidget::LoadDefaults(void) {$/;"	f	class:VisWidget
LoadFiducialsFromFile	SRC/Utilities.cpp	/^std::Evector<std::tuple<Eigen::Vector2d, Eigen::Vector3d>> LoadFiducialsFromFile(std::filesystem::path const & DatasetPath) {$/;"	f
LoadFromDisk	SRC/ProgOptions.hpp	/^inline void ProgOptions::LoadFromDisk(void) {$/;"	f	class:ProgOptions
LoadFromDisk	SRC/SurveyRegionManager.hpp	/^inline void SurveyRegion::LoadFromDisk(void) {$/;"	f	class:SurveyRegion
LoadFromDisk	SRC/UI/BookmarkManager.hpp	/^inline void BookmarkManager::LoadFromDisk(void) {$/;"	f	class:BookmarkManager
LoadFromDisk	SRC/UI/VisWidget.hpp	/^inline void VisWidget::LoadFromDisk(void) {$/;"	f	class:VisWidget
LoadFromFRFFile	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^		bool LoadFromFRFFile(FRFImage const & File) {$/;"	f	class:ShadowMapInfoBlock
LoadGCPs	SRC/UI/SimFiducialsWidget.hpp	/^inline void SimFiducialsWidget::LoadGCPs(void) {$/;"	f	class:SimFiducialsWidget
LoadRefFrame	SRC/UI/SimFiducialsWidget.hpp	/^inline void SimFiducialsWidget::LoadRefFrame(void) {$/;"	f	class:SimFiducialsWidget
LoadStateFromDisk	SRC/SurveyRegionManager.hpp	/^inline void SurveyRegionManager::LoadStateFromDisk(void) {$/;"	f	class:SurveyRegionManager
LoadTestWaypointMission	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::LoadTestWaypointMission(WaypointMission & testMission){$/;"	f	class:DroneInterface::RealDrone
LocationBookmark	SRC/UI/BookmarkManager.hpp	/^	LocationBookmark(std::string const & NameArg, Eigen::Vector2d const & LatBounds, Eigen::Vector2d const & LonBounds) {$/;"	f	struct:LocationBookmark
LocationBookmark	SRC/UI/BookmarkManager.hpp	/^struct LocationBookmark {$/;"	s
Log	SRC/Maps/CacheFile.hpp	/^			Journal & Log;$/;"	m	class:Maps::CacheFile
Log	SRC/Maps/CacheMem.hpp	/^		Journal & Log;$/;"	m	struct:Maps::CacheMem
Log	SRC/Maps/DataTileProvider.hpp	/^			Journal & Log;$/;"	m	struct:Maps::DataTileProvider
Log	SRC/Maps/FRFTileStore.hpp	/^			Journal & Log;$/;"	m	class:Maps::FRFTileStore
Log	SRC/Maps/SatelliteCacheMaster.hpp	/^		Journal & Log;$/;"	m	class:Maps::SatelliteCacheMaster
Log	SRC/Maps/WebRetriever.hpp	/^			Journal & Log;$/;"	m	class:Maps::WebRetriever
Log	SRC/ProgOptions.hpp	/^		Journal & Log;$/;"	m	class:ProgOptions
Log	SRC/SimpleKVStore.hpp	/^		Journal & Log;$/;"	m	class:SimpleKVStore
Log	SRC/UI/BookmarkManager.hpp	/^		Journal & Log;$/;"	m	class:BookmarkManager
Log	SRC/UI/CommandWidget.hpp	/^		Journal & Log;$/;"	m	class:CommandWidget
Log	SRC/UI/ReconUI.hpp	/^		Journal * Log = nullptr;$/;"	m	class:ReconUI
Log	SRC/UI/VehicleControlWidget.hpp	/^		Journal & Log;$/;"	m	class:VehicleControlWidget
Log	SRC/UI/VisWidget.hpp	/^		Journal & Log;$/;"	m	class:VisWidget
LoiterTime	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float LoiterTime  = std::nanf("");  \/\/Time (s) to hover at this waypoint (0 is equivilent to NaN and should result in the action not being included).$/;"	m	struct:DroneInterface::Waypoint
Longitude	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			double  Longitude; \/\/WGS84 Longitude (Degrees)$/;"	m	class:DroneInterface::Packet_CoreTelemetry
Longitude	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		double Longitude = 0.0; \/\/WGS84 Longitude of waypoint (Radians)$/;"	m	struct:DroneInterface::Waypoint
LowResUpdatePeriodSeconds	SRC/Maps/DataTileProvider.hpp	/^			static constexpr std::chrono::seconds LowResUpdatePeriodSeconds = std::chrono::seconds(3);$/;"	m	struct:Maps::DataTileProvider
LowestFlyingDroneReachedTargetHAG	SRC/UI/VehicleControlWidget.hpp	/^inline bool VehicleControlWidget::LowestFlyingDroneReachedTargetHAG(std::vector<DroneInterface::Drone *> const & Drones,$/;"	f	class:VehicleControlWidget
MAX_POL_LENGTH	SRC/Modules/Shadow-Detection/ocam_utils.h	13;"	d
MEDIAN_BLUR_RADIUS	SRC/Modules/Shadow-Detection/calib.h	/^const int    MEDIAN_BLUR_RADIUS = 23;$/;"	v
MESSAGE_CLASS_ACK	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	21;"	d	file:
MESSAGE_CLASS_AID	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	24;"	d	file:
MESSAGE_CLASS_CFG	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	22;"	d	file:
MESSAGE_CLASS_ESF	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	26;"	d	file:
MESSAGE_CLASS_INF	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	20;"	d	file:
MESSAGE_CLASS_MON	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	23;"	d	file:
MESSAGE_CLASS_NAV	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	18;"	d	file:
MESSAGE_CLASS_RXM	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	19;"	d	file:
MESSAGE_CLASS_TIM	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	25;"	d	file:
MESSAGE_ID_ACK_ACK	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	45;"	d	file:
MESSAGE_ID_ACK_NAK	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	46;"	d	file:
MESSAGE_ID_CFG_ANT	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	28;"	d	file:
MESSAGE_ID_CFG_CFG	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	29;"	d	file:
MESSAGE_ID_CFG_ITFM	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	30;"	d	file:
MESSAGE_ID_CFG_MSG	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	31;"	d	file:
MESSAGE_ID_CFG_NAV5	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	32;"	d	file:
MESSAGE_ID_CFG_NAVX5	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	33;"	d	file:
MESSAGE_ID_CFG_NVS	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	34;"	d	file:
MESSAGE_ID_CFG_PM2	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	35;"	d	file:
MESSAGE_ID_CFG_PRT	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	36;"	d	file:
MESSAGE_ID_CFG_RATE	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	37;"	d	file:
MESSAGE_ID_CFG_RST	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	38;"	d	file:
MESSAGE_ID_CFG_RXM	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	39;"	d	file:
MESSAGE_ID_CFG_SBAS	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	40;"	d	file:
MESSAGE_ID_CFG_TMODE2	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	41;"	d	file:
MESSAGE_ID_CFG_TP	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	43;"	d	file:
MESSAGE_ID_CFG_TP5	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	42;"	d	file:
MESSAGE_ID_MON_HW	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	56;"	d	file:
MESSAGE_ID_NAV_POSECEF	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	50;"	d	file:
MESSAGE_ID_NAV_POSLLH	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	51;"	d	file:
MESSAGE_ID_NAV_SIG	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	54;"	d	file:
MESSAGE_ID_NAV_STATUS	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	52;"	d	file:
MESSAGE_ID_NAV_TIMEGPS	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	53;"	d	file:
MSATool	SRC/UI/MSATool.cpp	/^MSATool::MSATool() :$/;"	f	class:MSATool
MSATool	SRC/UI/MSATool.hpp	/^class MSATool {$/;"	c
MSA_CmapMaxVal	SRC/UI/VisWidget.hpp	/^		float MSA_CmapMaxVal;    \/\/MSA corresponding to high end of colormap (m)$/;"	m	class:VisWidget
MSA_CmapMinVal	SRC/UI/VisWidget.hpp	/^		float MSA_CmapMinVal;    \/\/MSA corresponding to low end of colormap (m)$/;"	m	class:VisWidget
MSA_ColormapMaxVal	SRC/Maps/DataTileTypes.hpp	/^		float MSA_ColormapMaxVal;$/;"	m	struct:Maps::VizualizationTileKey
MSA_ColormapMinVal	SRC/Maps/DataTileTypes.hpp	/^		float MSA_ColormapMinVal;$/;"	m	struct:Maps::VizualizationTileKey
MSA_NoFlyDrawMode	SRC/Maps/DataTileTypes.hpp	/^		int   MSA_NoFlyDrawMode;$/;"	m	struct:Maps::VizualizationTileKey
MSA_NoFlyDrawMode	SRC/UI/VisWidget.hpp	/^		int   MSA_NoFlyDrawMode; \/\/0 = Transparrent, 1 = Red Stripes$/;"	m	class:VisWidget
MSA_colormap	SRC/Maps/DataTileTypes.hpp	/^		Colormap MSA_colormap;$/;"	m	struct:Maps::VizualizationTileKey
M_highLevelFieldsValid	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			bool     M_highLevelFieldsValid = false;$/;"	m	class:DroneInterface::Packet
MainMenu	SRC/UI/MainMenu.hpp	/^class MainMenu {$/;"	c
ManagerMain	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			void ManagerMain(void) {$/;"	f	class:DroneInterface::DroneManager
Map	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			cv::Mat Map;           \/\/fixed-size (512 x 512) shadow map image. Use uint8_t type with 0-127 = unshadowed, and 128-254 = shadowed, 255 = Masked$/;"	m	class:ShadowDetection::InstantaneousShadowMap
MapDPIPercentage	SRC/ProgOptions.hpp	/^		float MapDPIPercentage;  \/\/Val = X: Map tiles selected so 1 screen pixel = X\/100 tile pixels. Generally set between 50 and 100.$/;"	m	class:ProgOptions
MapWidget	SRC/UI/MapWidget.cpp	/^MapWidget::MapWidget()$/;"	f	class:MapWidget
MapWidget	SRC/UI/MapWidget.hpp	/^class MapWidget {$/;"	c
MapWidgetDims	SRC/UI/MapWidget.hpp	/^		Eigen::Vector2d MapWidgetDims; \/\/Dimensions of the map widget - updated every time we go through our draw loop. Format: <Width, Height>$/;"	m	class:MapWidget
MapWidgetULCorner_ScreenSpace	SRC/UI/MapWidget.hpp	/^		Eigen::Vector2d MapWidgetULCorner_ScreenSpace; \/\/updated in draw loop - screen-space position of upper-left corner of widget$/;"	m	class:MapWidget
Maps	SRC/Maps/CacheFile.cpp	/^namespace Maps {$/;"	n	file:
Maps	SRC/Maps/CacheFile.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/CacheMem.cpp	/^namespace Maps {$/;"	n	file:
Maps	SRC/Maps/CacheMem.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/DataTileProvider.cpp	/^namespace Maps {$/;"	n	file:
Maps	SRC/Maps/DataTileProvider.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/DataTileTypes.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/DataTileVizEvaluator.cpp	/^namespace Maps {$/;"	n	file:
Maps	SRC/Maps/DataTileVizEvaluator.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/FRFTileStore.cpp	/^namespace Maps {$/;"	n	file:
Maps	SRC/Maps/FRFTileStore.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/Interfaces.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/SatelliteCacheMaster.cpp	/^namespace Maps {$/;"	n	file:
Maps	SRC/Maps/SatelliteCacheMaster.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/SatelliteSources.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/Tile.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Maps/WebRetriever.cpp	/^namespace Maps {$/;"	n	file:
Maps	SRC/Maps/WebRetriever.hpp	/^namespace Maps {$/;"	n
Maps	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::vector<cv::Mat> Maps;         \/\/Same definition as in InstantaneousShadowMap$/;"	m	class:ShadowDetection::ShadowMapHistory
MaxDist	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t  MaxDist;      \/\/=1 if FCS.hasReachedMaxFlightRadius if true. =0 if false$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
MaxHeight	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t  MaxHeight;    \/\/=1 if FCS.hasReachedMaxFlightHeight is true. =0 if false$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
MaxLat	SRC/UI/BookmarkManager.hpp	/^	double MaxLat; \/\/Radians$/;"	m	struct:LocationBookmark
MaxLon	SRC/UI/BookmarkManager.hpp	/^	double MaxLon; \/\/Radians$/;"	m	struct:LocationBookmark
MaxNumberOfJobsInThreadPool	SRC/Maps/DataTileProvider.hpp	/^			static constexpr size_t MaxNumberOfJobsInThreadPool = 8; \/\/New jobs will only be added to the queue if there is room$/;"	m	struct:Maps::DataTileProvider
MaxOutstandingRequests	SRC/Maps/CacheFile.hpp	/^			static constexpr int32_t MaxOutstandingRequests = 16;$/;"	m	class:Maps::CacheFile
MaxOutstandingRequests	SRC/Maps/FRFTileStore.hpp	/^			static constexpr int32_t MaxOutstandingRequests = 16;$/;"	m	class:Maps::FRFTileStore
MaxOutstandingRequests	SRC/Maps/WebRetriever.hpp	/^			static constexpr int32_t MaxOutstandingRequests = 10;$/;"	m	class:Maps::WebRetriever
MaxUploadsPerFrame	SRC/UI/TextureUploadFlowRestrictor.hpp	/^		static constexpr unsigned int MaxUploadsPerFrame = 25U;$/;"	m	class:TextureUploadFlowRestrictor
MaxZoom	SRC/Maps/SatelliteCacheMaster.hpp	/^		static constexpr int32_t MaxZoom = 20;$/;"	m	class:Maps::SatelliteCacheMaster
MenuItem	SRC/UI/MyGui.hpp	/^	inline bool MenuItem(const char* txticon, float XMargin, const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true) {$/;"	f	namespace:MyGui
Message	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			std::string Message;$/;"	m	class:DroneInterface::Packet_MessageString
MessageBoxOverlay	SRC/UI/MessageBoxOverlay.hpp	/^class MessageBoxOverlay {$/;"	c
MetersToNMUnits	SRC/Maps/MapUtils.hpp	/^inline double MetersToNMUnits(double Meters, double yPos_NM) {$/;"	f
MetersToPixels	SRC/Maps/MapUtils.hpp	/^inline double MetersToPixels(double Meters, double yPos_NM, double MapZoom) {$/;"	f
MinLat	SRC/UI/BookmarkManager.hpp	/^	double MinLat; \/\/Radians$/;"	m	struct:LocationBookmark
MinLon	SRC/UI/BookmarkManager.hpp	/^	double MinLon; \/\/Radians$/;"	m	struct:LocationBookmark
MinSafeAltitude	SRC/Maps/DataTileTypes.hpp	/^		MinSafeAltitude,$/;"	m	class:Maps::DataLayer
MissionID	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint16_t MissionID;    \/\/Mission ID for current waypoint mission$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
Mode	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t Mode;$/;"	m	class:DroneInterface::Packet_VirtualStickCommand
ModuleMain	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^void GNSSReceiver::GNSSManager::ModuleMain(void) {$/;"	f	class:GNSSReceiver::GNSSManager
ModuleMain	SRC/Modules/Guidance/Guidance.cpp	/^    inline void GuidanceEngine::ModuleMain(void) {$/;"	f	class:Guidance::GuidanceEngine
ModuleMain	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline void ShadowDetectionEngine::ModuleMain(void) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
ModuleMain	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	inline void ShadowPropagationEngine::ModuleMain(void) {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
MousePos_NormalizedMercator_OnLastClick	SRC/UI/MapWidget.hpp	/^		Eigen::Vector2d MousePos_NormalizedMercator_OnLastClick;$/;"	m	class:MapWidget
Mtx	SRC/SimpleKVStore.hpp	/^		std::mutex Mtx;$/;"	m	class:SimpleKVStore
MyGui	SRC/UI/MyGui.hpp	/^namespace MyGui {$/;"	n
NAVSig	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^class NAVSig {$/;"	c	file:
NAVSolution	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^class NAVSolution {$/;"	c	file:
NM2ECEF	SRC/Modules/Guidance/Guidance.cpp	/^    Eigen::Vector2d NM2ECEF(const Eigen::Vector2d & point_NM){$/;"	f	namespace:Guidance
NMToLatLon	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector2d NMToLatLon(Eigen::Vector2d const & NMCoords) {$/;"	f
NMToTilePixel	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector2d NMToTilePixel(int32_t TileX, int32_t TileY, int32_t PyramidLevel, Eigen::Vector2d const & Position_NM, int32_t tileWidth) {$/;"	f
NMToTilePixel_int	SRC/Maps/MapUtils.hpp	/^inline std::tuple<int, int> NMToTilePixel_int(int32_t TileX, int32_t TileY, int32_t PyramidLevel, Eigen::Vector2d const & Position_NM, int32_t tileWidth) {$/;"	f
NMUnitsToMeters	SRC/Maps/MapUtils.hpp	/^inline double NMUnitsToMeters(double Dist_NM, double yPos_NM) {$/;"	f
Name	SRC/UI/BookmarkManager.hpp	/^	std::string Name;$/;"	m	struct:LocationBookmark
NewBookmarkDialog	SRC/UI/ModalDialogs.hpp	/^class NewBookmarkDialog {$/;"	c
Node	SRC/Earcut.hpp	/^        Node(N index, double x_, double y_) : i(index), x(x_), y(y_) {}$/;"	f	struct:mapbox::detail::Earcut::Node
Node	SRC/Earcut.hpp	/^    struct Node {$/;"	s	class:mapbox::detail::Earcut
None	SRC/Colormaps.hpp	/^	None,$/;"	m	class:Colormap
None	SRC/Maps/DataTileTypes.hpp	/^		None,$/;"	m	class:Maps::DataLayer
NormalizedMercatorToScreenCoords	SRC/UI/MapWidget.cpp	/^Eigen::Vector2d MapWidget::NormalizedMercatorToScreenCoords(Eigen::Vector2d const & NMCoords) {$/;"	f	class:MapWidget
NormalizedMercatorToWidgetCoords	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector2d NormalizedMercatorToWidgetCoords(Eigen::Vector2d const & NMCoords, Eigen::Vector2d const & ULCorner_NM, double Zoom, int32_t tileWidth) {$/;"	f
NumOutstandingRequests	SRC/Maps/CacheFile.hpp	/^			size_t NumOutstandingRequests() {$/;"	f	class:Maps::CacheFile
NumOutstandingRequests	SRC/Maps/FRFTileStore.hpp	/^			size_t NumOutstandingRequests() {$/;"	f	class:Maps::FRFTileStore
NumOutstandingRequests	SRC/Maps/SatelliteCacheMaster.hpp	/^		size_t NumOutstandingRequests() const { return m_cacheFile->NumOutstandingRequests() + m_webRetriever->NumOutstandingRequests(); }$/;"	f	class:Maps::SatelliteCacheMaster
NumOutstandingRequests	SRC/Maps/WebRetriever.hpp	/^			size_t NumOutstandingRequests() const { return m_outstandingRequests.size(); }$/;"	f	class:Maps::WebRetriever
NumSimulatedDrones	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			inline unsigned int NumSimulatedDrones(void) {$/;"	f	class:DroneInterface::DroneManager
NumVertices	SRC/Polygon.hpp	/^    size_t NumVertices(void) const { return m_vertices.size(); }$/;"	f	class:SimplePolygon
NumberOfFlyingDrones	SRC/UI/VehicleControlWidget.hpp	/^inline int VehicleControlWidget::NumberOfFlyingDrones(std::vector<DroneInterface::Drone *> const & Drones) {$/;"	f	class:VehicleControlWidget
NumberOfVizEvaluationThreads	SRC/Maps/DataTileProvider.hpp	/^			static constexpr int32_t NumberOfVizEvaluationThreads = 4;$/;"	m	struct:Maps::DataTileProvider
OBJFILES	Makefile	/^OBJFILES          = $(RECON_OBJFILES) $(EXTERNAL_OBJFILES)$/;"	m
OPTFLAGS	Makefile	/^	OPTFLAGS   = -O0 -march=core2 -fopenmp$/;"	m
OPTFLAGS	Makefile	/^	OPTFLAGS   = -O3 -march=broadwell -fopenmp$/;"	m
OSMPublicServer	SRC/Maps/SatelliteSources.hpp	/^		OSMPublicServer,$/;"	m	class:Maps::SatelliteSource
OUTPUT_FPS	SRC/Modules/Shadow-Detection/calib.h	/^const double OUTPUT_FPS = 10.0;$/;"	v
OUTPUT_RESOLUTION_PX	SRC/Modules/Shadow-Detection/calib.h	/^const double OUTPUT_RESOLUTION_PX = 512.0;$/;"	v
ObjectPool	SRC/Earcut.hpp	/^        ObjectPool() { }$/;"	f	class:mapbox::detail::Earcut::ObjectPool
ObjectPool	SRC/Earcut.hpp	/^        ObjectPool(std::size_t blockSize_) {$/;"	f	class:mapbox::detail::Earcut::ObjectPool
ObjectPool	SRC/Earcut.hpp	/^    class ObjectPool {$/;"	c	class:mapbox::detail::Earcut
OnReceivedFRFTile	SRC/Maps/DataTileProvider.cpp	/^	void DataTileProvider::OnReceivedFRFTile(Tile TileKey, FRFImage * Data) {$/;"	f	class:Maps::DataTileProvider
OnReceivedFile	SRC/Maps/SatelliteCacheMaster.cpp	/^void SatelliteCacheMaster::OnReceivedFile(Tile tile, SatelliteSource source, std::shared_ptr<std::vector<uint8_t>> data) {$/;"	f	class:Maps::SatelliteCacheMaster
OnReceivedWeb	SRC/Maps/SatelliteCacheMaster.cpp	/^void SatelliteCacheMaster::OnReceivedWeb(Tile tile, SatelliteSource source, std::shared_ptr<std::vector<uint8_t>> data) {$/;"	f	class:Maps::SatelliteCacheMaster
Opacity_AvoidanceZones	SRC/Maps/DataTileTypes.hpp	/^		uint8_t Opacity_AvoidanceZones;$/;"	m	struct:Maps::VizualizationTileKey
Opacity_AvoidanceZones	SRC/UI/VisWidget.hpp	/^		float Opacity_AvoidanceZones;$/;"	m	class:VisWidget
Opacity_GuidanceOverlay	SRC/UI/VisWidget.hpp	/^		float Opacity_GuidanceOverlay;$/;"	m	class:VisWidget
Opacity_MSA	SRC/Maps/DataTileTypes.hpp	/^		uint8_t Opacity_MSA;$/;"	m	struct:Maps::VizualizationTileKey
Opacity_MSA	SRC/UI/VisWidget.hpp	/^		float Opacity_MSA;$/;"	m	class:VisWidget
Opacity_SafeLandingZones	SRC/Maps/DataTileTypes.hpp	/^		uint8_t Opacity_SafeLandingZones;$/;"	m	struct:Maps::VizualizationTileKey
Opacity_SafeLandingZones	SRC/UI/VisWidget.hpp	/^		float Opacity_SafeLandingZones;$/;"	m	class:VisWidget
Opacity_ShadowMapOverlay	SRC/UI/VisWidget.hpp	/^		float Opacity_ShadowMapOverlay;$/;"	m	class:VisWidget
Opacity_SurveyRegion	SRC/UI/VisWidget.hpp	/^		float Opacity_SurveyRegion;$/;"	m	class:VisWidget
Opacity_TimeAvailableOverlay	SRC/UI/VisWidget.hpp	/^		float Opacity_TimeAvailableOverlay;$/;"	m	class:VisWidget
Open	SRC/SimpleKVStore.hpp	/^inline bool SimpleKVStore::Open() {$/;"	f	class:SimpleKVStore
OpenInFileManager	SRC/OpenInFileManager.hpp	/^inline bool OpenInFileManager(std::filesystem::path DirPath) {$/;"	f
OptionsMutex	SRC/ProgOptions.hpp	/^		std::mutex OptionsMutex;$/;"	m	class:ProgOptions
Orthogonalize_3By3	SRC/Modules/Shadow-Detection/lambda_twist.h	/^	void Orthogonalize_3By3(Eigen::Matrix3d& R) {$/;"	f	namespace:__anon1
Orthogonalize_3By3_QuickAndDirty	SRC/Modules/Shadow-Detection/lambda_twist.h	/^	void Orthogonalize_3By3_QuickAndDirty(Eigen::Matrix3d& R) {$/;"	f	namespace:__anon1
Other	SRC/Journal.h	/^		Journal & operator= (const Journal & Other) = delete;$/;"	m	class:Journal
Other	SRC/Journal.h	/^		Journal(const Journal & Other) = delete;$/;"	m	class:Journal
PI	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	11;"	d	file:
PI	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	21;"	d	file:
PI	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	18;"	d	file:
PI	SRC/Modules/Guidance/Guidance.cpp	27;"	d	file:
PI	SRC/Polygon.cpp	19;"	d	file:
PI	SRC/TestBenches.cpp	32;"	d	file:
PI	SRC/UI/AvoidanceZonesTool.cpp	12;"	d	file:
PI	SRC/UI/LandingZonesTool.cpp	12;"	d	file:
PI	SRC/UI/MSATool.cpp	12;"	d	file:
PI	SRC/UI/MapWidget.cpp	21;"	d	file:
PI	SRC/UI/ReconUI.cpp	27;"	d	file:
PI	SRC/UI/SurveyRegionTool.cpp	14;"	d	file:
PROFILEFLAGS	Makefile	/^PROFILEFLAGS =$/;"	m
Packet	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet {$/;"	c	namespace:DroneInterface
Packet_Acknowledgment	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_Acknowledgment {$/;"	c	namespace:DroneInterface
Packet_CameraControl	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_CameraControl {$/;"	c	namespace:DroneInterface
Packet_CompressedImage	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_CompressedImage {$/;"	c	namespace:DroneInterface
Packet_CoreTelemetry	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_CoreTelemetry {$/;"	c	namespace:DroneInterface
Packet_EmergencyCommand	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_EmergencyCommand {$/;"	c	namespace:DroneInterface
Packet_ExecuteWaypointMission	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_ExecuteWaypointMission {$/;"	c	namespace:DroneInterface
Packet_ExtendedTelemetry	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_ExtendedTelemetry {$/;"	c	namespace:DroneInterface
Packet_Image	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_Image {$/;"	c	namespace:DroneInterface
Packet_MessageString	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_MessageString {$/;"	c	namespace:DroneInterface
Packet_VirtualStickCommand	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^	class Packet_VirtualStickCommand {$/;"	c	namespace:DroneInterface
PaintActionItem	SRC/Maps/DataTileProvider.hpp	/^	struct PaintActionItem {$/;"	s	namespace:Maps
Paint_Circle	SRC/Maps/DataTileProvider.hpp	/^	inline void DataTileProvider::Paint_Circle(Eigen::Vector2d const & Center_NM, double Radius_meters, DataLayer layer, double Value) {$/;"	f	class:Maps::DataTileProvider
Paint_Rect	SRC/Maps/DataTileProvider.hpp	/^	inline void DataTileProvider::Paint_Rect(Eigen::Vector2d const & Center_NM, double LengthX, double LengthY, double AngleDeg, DataLayer layer, double Value) {$/;"	f	class:Maps::DataTileProvider
PartitionSurveyRegion	SRC/Modules/Guidance/Guidance.cpp	/^    void PartitionSurveyRegion(PolygonCollection const & Region, std::Evector<PolygonCollection> & Partition, double TargetFlightTime, ImagingRequirements const & ImagingReqs) {$/;"	f	namespace:Guidance
PartitionSurveyRegionRec	SRC/Modules/Guidance/Guidance.cpp	/^    void PartitionSurveyRegionRec(Triangle & mainTriangle, std::Evector<Triangle> & allTriangles, double TargetFlightTime, ImagingRequirements const & ImagingReqs){$/;"	f	namespace:Guidance
PartitionTrianglesList	SRC/Modules/Guidance/Guidance.cpp	/^    void PartitionTrianglesList(Triangle & mainTriangle, std::Evector<Triangle> & allTriangles, std::vector<Eigen::Vector2d> pointsList){$/;"	f	namespace:Guidance
Pitch	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			double  Pitch;     \/\/Vehicle Pitch (Degrees) - DJI definition$/;"	m	class:DroneInterface::Packet_CoreTelemetry
PixCoordsToRefCoords	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline Eigen::Vector2d PixCoordsToRefCoords(Eigen::Vector2d const& PixCoords, double GSD, double N, const Eigen::Vector2d& NorthBounds, const Eigen::Vector2d& EastBounds) {$/;"	f
PixelsToNMUnits	SRC/Maps/MapUtils.hpp	/^inline double PixelsToNMUnits(double Pixels, double yPos_NM, double MapZoom) {$/;"	f
PlanMission	SRC/Modules/Guidance/Guidance.cpp	/^    void PlanMission(PolygonCollection const & Region, DroneInterface::WaypointMission & Mission, ImagingRequirements const & ImagingReqs) {$/;"	f	namespace:Guidance
PointIsInsidePolygonHelper_isLeft	SRC/Polygon.cpp	/^static double PointIsInsidePolygonHelper_isLeft(Eigen::Vector2d const & P0, Eigen::Vector2d const & P1, Eigen::Vector2d const & P2) {$/;"	f	file:
PointIsInsidePolygonHelper_wn_PnPoly	SRC/Polygon.cpp	/^static int PointIsInsidePolygonHelper_wn_PnPoly(Eigen::Vector2d const & P, std::Evector<Eigen::Vector2d> const & V) {$/;"	f	file:
PointsAreColinear	SRC/Polygon.cpp	/^static bool PointsAreColinear(Eigen::Vector2d const & p1, Eigen::Vector2d const & p2, Eigen::Vector2d const & p3) {$/;"	f	file:
Polygon	SRC/Polygon.hpp	/^    Polygon(SimplePolygon const & Boundary) : m_boundary(Boundary) { }$/;"	f	class:Polygon
Polygon	SRC/Polygon.hpp	/^class Polygon {$/;"	c
PolygonCollection	SRC/Polygon.hpp	/^    PolygonCollection(Polygon const & Poly) : m_components(1, Poly) { }$/;"	f	class:PolygonCollection
PolygonCollection	SRC/Polygon.hpp	/^class PolygonCollection {$/;"	c
Positive	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t Positive;$/;"	m	class:DroneInterface::Packet_Acknowledgment
Possess	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::Possess(RealDrone * Target) {$/;"	f	class:DroneInterface::RealDrone
Postframe	SRC/UI/ReconUI.cpp	/^void ReconUI::Postframe() {$/;"	f	class:ReconUI
Preframe	SRC/UI/ReconUI.cpp	/^void ReconUI::Preframe() { }$/;"	f	class:ReconUI
PrintAgeWarning	SRC/UI/VehicleControlWidget.hpp	/^		static void PrintAgeWarning(DroneInterface::Drone::TimePoint const & Timestamp, float XStart) {$/;"	f	class:VehicleControlWidget
PrintProgramLaunchInfo	SRC/ReconMain.cpp	/^void PrintProgramLaunchInfo(std::string const & VersionString, Journal & Log) {$/;"	f
ProcessFrame	SRC/Modules/Shadow-Detection/ShadowDetection.cpp	/^	void ShadowDetectionEngine::ProcessFrame(cv::Mat const & Frame, TimePoint const & Timestamp) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
ProcessFullReceivedPacket	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::ProcessFullReceivedPacket(void) {$/;"	f	class:DroneInterface::RealDrone
ProgOptions	SRC/ProgOptions.hpp	/^		ProgOptions(std::filesystem::path OptionFilePath, Journal & LogRef) : Log(LogRef), m_optionFilePath(OptionFilePath) {$/;"	f	class:ProgOptions
ProgOptions	SRC/ProgOptions.hpp	/^class ProgOptions {$/;"	c
ProjectPoint	SRC/Polygon.cpp	/^Eigen::Vector2d LineSegment::ProjectPoint(Eigen::Vector2d const & Point) const {$/;"	f	class:LineSegment
ProjectPoint	SRC/Polygon.cpp	/^Eigen::Vector2d SimplePolygon::ProjectPoint(Eigen::Vector2d const & Point) const {$/;"	f	class:SimplePolygon
PurgeAll	SRC/Maps/CacheFile.cpp	/^void CacheFile::PurgeAll() {$/;"	f	class:Maps::CacheFile
PurgeAll	SRC/Maps/CacheMem.cpp	/^	void CacheMem::PurgeAll() {$/;"	f	class:Maps::CacheMem
PurgeAll	SRC/Maps/FRFTileStore.cpp	/^void FRFTileStore::PurgeAll() {$/;"	f	class:Maps::FRFTileStore
PurgeAll	SRC/Maps/SatelliteCacheMaster.cpp	/^void SatelliteCacheMaster::PurgeAll() {$/;"	f	class:Maps::SatelliteCacheMaster
PurgeAllTiles	SRC/Maps/DataTileProvider.cpp	/^	void DataTileProvider::PurgeAllTiles() {$/;"	f	class:Maps::DataTileProvider
PurgeExpired	SRC/Maps/CacheMem.cpp	/^	void CacheMem::PurgeExpired(double MaxFractionToPurge) {$/;"	f	class:Maps::CacheMem
Put	SRC/SimpleKVStore.hpp	/^inline bool SimpleKVStore::Put(std::string const & Key, std::vector<uint8_t> const & Value) {$/;"	f	class:SimpleKVStore
PutIfNew	SRC/SimpleKVStore.hpp	/^inline bool SimpleKVStore::PutIfNew(std::string const & Key, std::vector<uint8_t> const & Value) {$/;"	f	class:SimpleKVStore
PutInState_A	SRC/UI/Animation.hpp	/^		inline void   PutInState_A() { state = 0; } \/\/Put variable in state A now$/;"	f	class:AnimatedVariable1D
PutInState_B	SRC/UI/Animation.hpp	/^		inline void   PutInState_B() { state = 2; } \/\/Put variable in state B now$/;"	f	class:AnimatedVariable1D
RECON_INCLUDE_FLAGS	Makefile	/^RECON_INCLUDE_FLAGS  = $(RECON_INCLUDE_FLAGS1) $(RECON_INCLUDE_FLAGS2) $(RECON_INCLUDE_FLAGS3) $(RECON_INCLUDE_FLAGS4) $(RECON_INCLUDE_FLAGS5)$/;"	m
RECON_INCLUDE_FLAGS1	Makefile	/^RECON_INCLUDE_FLAGS1 = -I.. -I..\/eigen -I..\/Flexible-Raster-Format -I..\/imgui -I..\/restclient-cpp\/include -I..\/cereal\/include$/;"	m
RECON_INCLUDE_FLAGS2	Makefile	/^RECON_INCLUDE_FLAGS2 = `pkg-config --cflags freetype2 libcurl gtk+-3.0` -I..\/glfw\/include -I..\/imgui\/examples\/libs\/gl3w -I..\/nativefiledialog\/src\/include$/;"	m
RECON_INCLUDE_FLAGS3	Makefile	/^RECON_INCLUDE_FLAGS3 = -I..\/libtorch-cxx11-abi-shared-with-deps-1.8.1+cpu\/libtorch\/include\/$/;"	m
RECON_INCLUDE_FLAGS4	Makefile	/^RECON_INCLUDE_FLAGS4 = -I..\/libtorch-cxx11-abi-shared-with-deps-1.8.1+cpu\/libtorch\/include\/torch\/csrc\/api\/include\/ -I..\/serial\/include -I..\/tacopie\/includes$/;"	m
RECON_INCLUDE_FLAGS5	Makefile	/^RECON_INCLUDE_FLAGS5 = -I..\/soloud\/include$/;"	m
RECON_OBJFILES	Makefile	/^RECON_OBJFILES    = $(patsubst SRC\/%.cpp,OBJ\/%.o,$(RECON_SRCFILES))$/;"	m
RECON_SRCFILES	Makefile	/^RECON_SRCFILES = $(wildcard SRC\/*.cpp) $(wildcard SRC\/UI\/*.cpp) $(wildcard SRC\/Maps\/*.cpp) $(wildcard SRC\/Modules\/DJI-Drone-Interface\/*.cpp) \\$/;"	m
REG_INIT_SECOND	SRC/Modules/Shadow-Detection/calib.h	/^const int    REG_INIT_SECOND = 0;$/;"	v
R_cam_ENU	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Matrix3d R_cam_ENU; \/\/Computed in SetFiducials()$/;"	m	class:ShadowDetection::ShadowDetectionEngine
ReadPacket	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static bool ReadPacket(serial::Serial * serialDev, std::vector<uint8_t> & UBXPacket) {$/;"	f	file:
ReadPacket	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static bool ReadPacket(serial::Serial * serialDev, std::vector<uint8_t> & UBXPacket, uint8_t MessageClass, uint8_t MessageID) {$/;"	f	file:
ReadValue	SRC/SimpleKVStore.hpp	/^inline bool SimpleKVStore::ReadValue(uint64_t Offset, uint64_t Size, std::vector<uint8_t> & Value) {$/;"	f	class:SimpleKVStore
Ready	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::Ready(void) {$/;"	f	class:DroneInterface::RealDrone
Ready	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::Ready(void) {$/;"	f	class:DroneInterface::SimulatedDrone
RealDrone	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^	class RealDrone : public Drone {$/;"	c	namespace:DroneInterface
RealDrone	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	RealDrone::RealDrone(const std::shared_ptr<tacopie::tcp_client> & client) {$/;"	f	class:DroneInterface::RealDrone
RecommendedHeight	SRC/UI/CommandWidget.hpp	/^		float RecommendedHeight; \/\/Recommended height for widget$/;"	m	class:CommandWidget
RecommendedHeight	SRC/UI/VehicleControlWidget.hpp	/^		float RecommendedHeight; \/\/Recommended height for widget$/;"	m	class:VehicleControlWidget
ReconUI	SRC/UI/ReconUI.cpp	/^ReconUI::ReconUI() {$/;"	f	class:ReconUI
ReconUI	SRC/UI/ReconUI.hpp	/^class ReconUI : public AppUI, public DrawableHost {$/;"	c
RedButtonStyle	SRC/UI/MyGui.hpp	/^			RedButtonStyle() {$/;"	f	class:MyGui::RedButtonStyle
RedButtonStyle	SRC/UI/MyGui.hpp	/^	class RedButtonStyle {$/;"	c	namespace:MyGui
RedToBlue	SRC/Colormaps.hpp	/^	RedToBlue,$/;"	m	class:Colormap
RedToGreen	SRC/Colormaps.hpp	/^	RedToGreen,$/;"	m	class:Colormap
RefreshSizesIfNeeded	SRC/SimpleKVStore.hpp	/^inline void SimpleKVStore::RefreshSizesIfNeeded() {$/;"	f	class:SimpleKVStore
RegisterCallback	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	int RealDrone::RegisterCallback(std::function<void(cv::Mat const & Frame, TimePoint const & Timestamp)> Callback) {$/;"	f	class:DroneInterface::RealDrone
RegisterCallback	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	int SimulatedDrone::RegisterCallback(std::function<void(cv::Mat const & Frame, TimePoint const & Timestamp)> Callback) {$/;"	f	class:DroneInterface::SimulatedDrone
RegisterCallback	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline int ShadowDetectionEngine::RegisterCallback(std::function<void(InstantaneousShadowMap const & ShadowMap)> Callback) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
RegisterCallback	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	inline int ShadowPropagationEngine::RegisterCallback(std::function<void(TimeAvailableFunction const & TA)> Callback) {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
RelAltitude	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		double RelAltitude = 0.0; \/\/Height above home point for waypoint (meters)$/;"	m	struct:DroneInterface::Waypoint
RemoveEdgeFromAdjacencyMap	SRC/Polygon.cpp	/^static void RemoveEdgeFromAdjacencyMap(std::vector<std::vector<int>> & AdjacentNodes, int IndexA, int IndexB) {$/;"	f	file:
RemoveEmptyComponents	SRC/Polygon.cpp	/^void PolygonCollection::RemoveEmptyComponents(void) {$/;"	f	class:PolygonCollection
RemoveEmptyHoles	SRC/Polygon.cpp	/^void Polygon::RemoveEmptyHoles(void) {$/;"	f	class:Polygon
RemoveEmptyHoles	SRC/Polygon.cpp	/^void PolygonCollection::RemoveEmptyHoles(void) {$/;"	f	class:PolygonCollection
RemoveLowFlier	SRC/Modules/Guidance/Guidance.cpp	/^    bool GuidanceEngine::RemoveLowFlier(std::string const & Serial) {$/;"	f	class:Guidance::GuidanceEngine
RemoveMessage	SRC/UI/MessageBoxOverlay.cpp	/^bool MessageBoxOverlay::RemoveMessage(int Token) {$/;"	f	class:MessageBoxOverlay
RemoveTrivialComponents	SRC/Polygon.cpp	/^void PolygonCollection::RemoveTrivialComponents(void) {$/;"	f	class:PolygonCollection
RemoveTrivialHoles	SRC/Polygon.cpp	/^void Polygon::RemoveTrivialHoles(void) {$/;"	f	class:Polygon
RemoveTrivialHoles	SRC/Polygon.cpp	/^void PolygonCollection::RemoveTrivialHoles(void) {$/;"	f	class:PolygonCollection
RenderingAPIFromString	SRC/ReconMain.cpp	/^static RenderingAPI RenderingAPIFromString(std::string const & s) {$/;"	f	file:
RenderingAPIToString	SRC/ReconMain.cpp	/^static std::string RenderingAPIToString(RenderingAPI API, bool Descriptive = false) {$/;"	f	file:
Reset	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			inline void Reset(void) { m_reset = true; }$/;"	f	class:GNSSReceiver::GNSSManager
Reset	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::Reset() {$/;"	f	class:GuidanceOverlay
Reset	SRC/UI/MessageBoxOverlay.cpp	/^void MessageBoxOverlay::Reset() {$/;"	f	class:MessageBoxOverlay
Reset	SRC/UI/SurveyRegionTool.hpp	/^		void Reset(void) { componentIndex = -1; holeIndex = -1; vertexIndex = -1; }$/;"	f	struct:SurveyRegionsTool::VertexAddress
Reset	SRC/UI/TextureUploadFlowRestrictor.hpp	/^		void Reset() {$/;"	f	class:TextureUploadFlowRestrictor
ResizeTo720p	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::ResizeTo720p(cv::Mat & Frame) {$/;"	f	class:DroneInterface::SimulatedDrone
Resize_4K_to_720p	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	bool SimulatedDrone::Resize_4K_to_720p(cv::Mat & Frame) {$/;"	f	class:DroneInterface::SimulatedDrone
RetrieveAsync	SRC/Maps/CacheFile.cpp	/^void CacheFile::RetrieveAsync(Tile tile, SatelliteSource source) {$/;"	f	class:Maps::CacheFile
RetrieveAsync	SRC/Maps/FRFTileStore.cpp	/^void FRFTileStore::RetrieveAsync(Tile tile) {$/;"	f	class:Maps::FRFTileStore
RetrieveAsync	SRC/Maps/WebRetriever.cpp	/^	void WebRetriever::RetrieveAsync(Tile tile, SatelliteSource source) {$/;"	f	class:Maps::WebRetriever
ReturnHomeSequenceInProgress	SRC/UI/VehicleControlWidget.hpp	/^		inline bool ReturnHomeSequenceInProgress(void) { return (m_RTL_State >= 0); }$/;"	f	class:VehicleControlWidget
Roll	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			double  Roll;      \/\/Vehicle Roll (Degrees) - DJI definition$/;"	m	class:DroneInterface::Packet_CoreTelemetry
RunTestBench	SRC/TestBenches.cpp	/^	void RunTestBench(int TestNum, std::string const & TestBenchArg) {$/;"	f	namespace:TestBenches
STANDARDFLAGS	Makefile	/^STANDARDFLAGS = -std=c++17$/;"	m
Sanitize	SRC/Polygon.cpp	/^void SimplePolygon::Sanitize(void) {$/;"	f	class:SimplePolygon
SanitizeArguments	SRC/ReconMain.cpp	/^static void SanitizeArguments(Journal & Log) {$/;"	f	file:
SanitizeOptions	SRC/ProgOptions.hpp	/^inline void ProgOptions::SanitizeOptions(void) {$/;"	f	class:ProgOptions
SanitizeState	SRC/UI/VisWidget.hpp	/^inline void VisWidget::SanitizeState(void) {$/;"	f	class:VisWidget
SanitizeUVBounds	SRC/UI/LiveFiducialsWidget.hpp	/^inline void LiveFiducialsWidget::SanitizeUVBounds(void) {$/;"	f	class:LiveFiducialsWidget
SanitizeUVBounds	SRC/UI/SimFiducialsWidget.hpp	/^inline void SimFiducialsWidget::SanitizeUVBounds(void) {$/;"	f	class:SimFiducialsWidget
SatelliteCacheMaster	SRC/Maps/SatelliteCacheMaster.cpp	/^SatelliteCacheMaster::SatelliteCacheMaster(Journal & LogRef) : Log(LogRef), m_garbageCollectionThreadAbort(false) {$/;"	f	class:Maps::SatelliteCacheMaster
SatelliteCacheMaster	SRC/Maps/SatelliteCacheMaster.hpp	/^	class SatelliteCacheMaster : ITileWebReceiver, ITileFileReceiver {$/;"	c	namespace:Maps
SatelliteSource	SRC/Maps/SatelliteSources.hpp	/^	enum class SatelliteSource : int32_t {$/;"	c	namespace:Maps
SaveAndFlushShadowMapHistory	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline void ShadowDetectionEngine::SaveAndFlushShadowMapHistory(void) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
SaveFRFFile	SRC/Modules/Shadow-Detection/ShadowDetection.cpp	/^	bool ShadowMapHistory::SaveFRFFile(std::filesystem::path const & Filepath) {$/;"	f	class:ShadowDetection::ShadowMapHistory
SaveGCPs	SRC/UI/SimFiducialsWidget.hpp	/^inline void SimFiducialsWidget::SaveGCPs(void) {$/;"	f	class:SimFiducialsWidget
SaveStateToDisk	SRC/SurveyRegionManager.hpp	/^inline void SurveyRegionManager::SaveStateToDisk(void) {$/;"	f	class:SurveyRegionManager
SaveToDisk	SRC/ProgOptions.hpp	/^inline void ProgOptions::SaveToDisk(void) {$/;"	f	class:ProgOptions
SaveToDisk	SRC/SurveyRegionManager.hpp	/^inline void SurveyRegion::SaveToDisk(void) {$/;"	f	class:SurveyRegion
SaveToDisk	SRC/UI/BookmarkManager.hpp	/^inline void BookmarkManager::SaveToDisk(void) {$/;"	f	class:BookmarkManager
SaveToDisk	SRC/UI/VisWidget.hpp	/^inline void VisWidget::SaveToDisk(void) {$/;"	f	class:VisWidget
ScreenCoordsToNormalizedMercator	SRC/UI/MapWidget.cpp	/^Eigen::Vector2d MapWidget::ScreenCoordsToNormalizedMercator(Eigen::Vector2d const & ScreenCords) {$/;"	f	class:MapWidget
ScreenSpaceToImageCoords	SRC/UI/LiveFiducialsWidget.hpp	/^inline Eigen::Vector2d LiveFiducialsWidget::ScreenSpaceToImageCoords(ImVec2 Pos_ScreenSpace, ImVec2 ULCorner_ScreenSpace, ImVec2 LRCorner_ScreenSpace) {$/;"	f	class:LiveFiducialsWidget
ScreenSpaceToImageCoords	SRC/UI/SimFiducialsWidget.hpp	/^inline Eigen::Vector2d SimFiducialsWidget::ScreenSpaceToImageCoords(ImVec2 Pos_ScreenSpace, ImVec2 ULCorner_ScreenSpace, ImVec2 LRCorner_ScreenSpace) {$/;"	f	class:SimFiducialsWidget
ScrollToBottom	SRC/UI/ConsoleWidget.hpp	/^	void ScrollToBottom() { ScrollToBottomRequest = true; }$/;"	f	class:ConsoleWidget
ScrollToBottomRequest	SRC/UI/ConsoleWidget.hpp	/^	bool ScrollToBottomRequest;$/;"	m	class:ConsoleWidget
SecondsElapsed	SRC/Utilities.hpp	/^inline double SecondsElapsed(std::chrono::time_point<std::chrono::steady_clock> const & Start) {$/;"	f
SecondsElapsed	SRC/Utilities.hpp	/^inline double SecondsElapsed(std::chrono::time_point<std::chrono::steady_clock> const & Start, std::chrono::time_point<std::chrono::steady_clock> const & End) {$/;"	f
SecondsSinceT0Epoch	SRC/Utilities.hpp	/^inline double SecondsSinceT0Epoch(std::chrono::time_point<std::chrono::steady_clock> const & Timepoint) {$/;"	f
SecondsSinceT0Epoch	SRC/Utilities.hpp	/^inline double SecondsSinceT0Epoch(void) {$/;"	f
SelectActiveRegionDialog	SRC/UI/ModalDialogs.hpp	/^class SelectActiveRegionDialog {$/;"	c
SelectSubRegion	SRC/Modules/Guidance/Guidance.cpp	/^    int SelectSubRegion(ShadowPropagation::TimeAvailableFunction const & TA, std::vector<DroneInterface::WaypointMission> const & SubregionMissions,$/;"	f	namespace:Guidance
SelectSubregionSequences	SRC/Modules/Guidance/Guidance.cpp	/^    void SelectSubregionSequences(ShadowPropagation::TimeAvailableFunction const & TA, std::vector<DroneInterface::WaypointMission> const & SubregionMissions,$/;"	f	namespace:Guidance
SelectionNumToTheme	SRC/UI/Themes.hpp	/^inline Themes::Theme Themes::SelectionNumToTheme(int Sel) {$/;"	f	class:Themes
SendPacket	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::SendPacket(DroneInterface::Packet & packet, tacopie::tcp_client * TCPClient) {$/;"	f	class:DroneInterface::RealDrone
SendPacket_CameraControl	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::SendPacket_CameraControl(uint8_t Action, double TargetFPS) {$/;"	f	class:DroneInterface::RealDrone
SendPacket_EmergencyCommand	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::SendPacket_EmergencyCommand(uint8_t Action) {$/;"	f	class:DroneInterface::RealDrone
SendPacket_ExecuteWaypointMission	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::SendPacket_ExecuteWaypointMission(uint8_t LandAtEnd, uint8_t CurvedFlight, std::vector<Waypoint> Waypoints) {$/;"	f	class:DroneInterface::RealDrone
SendPacket_VirtualStickCommand	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::SendPacket_VirtualStickCommand(uint8_t Mode, float Yaw, float V_x, float V_y, float HAG, float timeout) {$/;"	f	class:DroneInterface::RealDrone
SendTestVirtualStickPacketA	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::SendTestVirtualStickPacketA(){$/;"	f	class:DroneInterface::RealDrone
SendTestVirtualStickPacketB	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::SendTestVirtualStickPacketB(){$/;"	f	class:DroneInterface::RealDrone
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_Acknowledgment::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_Acknowledgment
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_CameraControl::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_CameraControl
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_CompressedImage::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_CompressedImage
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_CoreTelemetry::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_CoreTelemetry
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_EmergencyCommand::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_EmergencyCommand
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_ExecuteWaypointMission::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_ExecuteWaypointMission
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_ExtendedTelemetry::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_ExtendedTelemetry
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_Image::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_Image
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_MessageString::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_MessageString
Serialize	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	void Packet_VirtualStickCommand::Serialize(Packet & TargetPacket) const {$/;"	f	class:DroneInterface::Packet_VirtualStickCommand
SetA	SRC/UI/Animation.hpp	/^		inline void   SetA(double A) { ValA = A; }$/;"	f	class:AnimatedVariable1D
SetActiveSurveyRegion	SRC/SurveyRegionManager.hpp	/^		void SetActiveSurveyRegion(std::string RegionName) {$/;"	f	class:SurveyRegionManager
SetB	SRC/UI/Animation.hpp	/^		inline void   SetB(double B) { ValB = B; }$/;"	f	class:AnimatedVariable1D
SetBoundary	SRC/Polygon.hpp	/^    void SetBoundary(std::Evector<Eigen::Vector2d> const & Vertices) {$/;"	f	class:SimplePolygon
SetDroneMissionSequences	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::SetDroneMissionSequences(std::vector<std::vector<int>> const & Sequences) {$/;"	f	class:GuidanceOverlay
SetFiducials	SRC/Modules/Shadow-Detection/ShadowDetection.cpp	/^	void ShadowDetectionEngine::SetFiducials(std::Evector<std::tuple<Eigen::Vector2d, Eigen::Vector3d>> const & Fiducials) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
SetHazardCondition	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::SetHazardCondition(std::string Serial, bool StopOnHazard, bool DodgeUpOnHazard) {$/;"	f	class:VehicleControlWidget
SetMapPan	SRC/UI/MapWidget.cpp	/^void MapWidget::SetMapPan(Eigen::Vector2d const & ScreenCoords, Eigen::Vector2d const & NMCoords) {$/;"	f	class:MapWidget
SetMissions	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::SetMissions(std::vector<DroneInterface::WaypointMission> const & Missions) {$/;"	f	class:GuidanceOverlay
SetPartitionLabels	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::SetPartitionLabels(std::vector<std::string> const & Labels) {$/;"	f	class:GuidanceOverlay
SetRealTime	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::SetRealTime(bool Realtime) {$/;"	f	class:DroneInterface::SimulatedDrone
SetReferenceFrame	SRC/Modules/Shadow-Detection/ShadowDetection.cpp	/^	void ShadowDetectionEngine::SetReferenceFrame(cv::Mat const & RefFrame) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
SetSourceVideoFile	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::SetSourceVideoFile(std::filesystem::path const & VideoPath) {$/;"	f	class:DroneInterface::SimulatedDrone
SetSurveyRegionPartition	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::SetSurveyRegionPartition(std::Evector<PolygonCollection> const & Partition) {$/;"	f	class:GuidanceOverlay
SetTimestamp	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		void SetTimestamp(void) {$/;"	f	class:NAVSolution	file:
SetTriangleLabels	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::SetTriangleLabels(std::vector<std::string> const & Labels) {$/;"	f	class:GuidanceOverlay
SetTriangles	SRC/UI/GuidanceOverlay.cpp	/^void GuidanceOverlay::SetTriangles(std::Evector<Triangle> const & Triangles) {$/;"	f	class:GuidanceOverlay
SettingsWindow	SRC/UI/SettingsWindow.hpp	/^		SettingsWindow() { m_themeOptions = Themes::GetThemeStrings_OneLine(); }$/;"	f	class:SettingsWindow
SettingsWindow	SRC/UI/SettingsWindow.hpp	/^class SettingsWindow {$/;"	c
SetupTerminalIOHighlights	SRC/ReconMain.cpp	/^void SetupTerminalIOHighlights(void) {$/;"	f
ShadowDetection	SRC/Modules/Shadow-Detection/ShadowDetection.cpp	/^namespace ShadowDetection {$/;"	n	file:
ShadowDetection	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^namespace ShadowDetection {$/;"	n
ShadowDetectionEngine	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			ShadowDetectionEngine() : m_running(false), m_abort(false) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
ShadowDetectionEngine	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	class ShadowDetectionEngine {$/;"	c	namespace:ShadowDetection
ShadowMapColor	SRC/UI/VisWidget.hpp	/^		std::array<float, 3> ShadowMapColor; \/\/RGB in range 0 to 1$/;"	m	class:VisWidget
ShadowMapHistory	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	class ShadowMapHistory {$/;"	c	namespace:ShadowDetection
ShadowMapIO	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^namespace ShadowMapIO {$/;"	n
ShadowMapInfoBlock	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^class ShadowMapInfoBlock {$/;"	c
ShadowMapOverlay	SRC/UI/ShadowMapOverlay.cpp	/^ShadowMapOverlay::ShadowMapOverlay() {$/;"	f	class:ShadowMapOverlay
ShadowMapOverlay	SRC/UI/ShadowMapOverlay.hpp	/^class ShadowMapOverlay {$/;"	c
ShadowPropagation	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^namespace ShadowPropagation {$/;"	n
ShadowPropagationEngine	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			ShadowPropagationEngine() : m_running(false), m_abort(false) {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
ShadowPropagationEngine	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	class ShadowPropagationEngine {$/;"	c	namespace:ShadowPropagation
Show	SRC/UI/LiveFiducialsWidget.hpp	/^inline void LiveFiducialsWidget::Show(std::string const & DroneSerial) {$/;"	f	class:LiveFiducialsWidget
Show	SRC/UI/ModalDialogs.hpp	/^		void Show(Eigen::Vector2d const & LatBounds, Eigen::Vector2d const & LonBounds) {$/;"	f	class:NewBookmarkDialog
Show	SRC/UI/ModalDialogs.hpp	/^		void Show(size_t BookmarkIndex) {$/;"	f	class:DeleteBookmarkDialog
Show	SRC/UI/ModalDialogs.hpp	/^		void Show(std::string const & Text) {$/;"	f	class:InformationDialog
Show	SRC/UI/ModalDialogs.hpp	/^		void Show(void) {$/;"	f	class:SelectActiveRegionDialog
Show	SRC/UI/ModalDialogs.hpp	/^		void Show(void) {$/;"	f	class:ZoomToCoordsDialog
Shutdown	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			inline void Shutdown(void) {$/;"	f	class:GNSSReceiver::GNSSManager
SidelapFraction	SRC/Modules/Guidance/Guidance.hpp	/^			double SidelapFraction; \/\/0-1: The fraction of the horizontal footprint of an image from one pass that should be visible in an adjacent pass$/;"	m	struct:Guidance::ImagingRequirements
SimDatasetStringArgToDatasetPath	SRC/TestBenches.cpp	/^static std::filesystem::path SimDatasetStringArgToDatasetPath(std::string const & Arg) {$/;"	f	file:
SimFiducialsWidget	SRC/UI/SimFiducialsWidget.hpp	/^class SimFiducialsWidget {$/;"	c
SimpleKVStore	SRC/SimpleKVStore.hpp	/^		SimpleKVStore(std::filesystem::path const & StorePathArg, Journal & LogRef) : Log(LogRef), StorePath(StorePathArg) { Open(); }$/;"	f	class:SimpleKVStore
SimpleKVStore	SRC/SimpleKVStore.hpp	/^class SimpleKVStore {$/;"	c
SimplePolyAddress	SRC/UI/SurveyRegionTool.hpp	/^		SimplePolyAddress(int Comp, int Hole) : componentIndex(Comp), holeIndex(Hole) { }$/;"	f	struct:SurveyRegionsTool::SimplePolyAddress
SimplePolyAddress	SRC/UI/SurveyRegionTool.hpp	/^	struct SimplePolyAddress {$/;"	s	class:SurveyRegionsTool
SimplePolygon	SRC/Polygon.hpp	/^    SimplePolygon(std::Evector<Eigen::Vector2d> const & Vertices) { SetBoundary(Vertices); }$/;"	f	class:SimplePolygon
SimplePolygon	SRC/Polygon.hpp	/^class SimplePolygon {$/;"	c
SimulatedDrone	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^	class SimulatedDrone : public Drone {$/;"	c	namespace:DroneInterface
SimulatedDrone	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	SimulatedDrone::SimulatedDrone() : m_abort(false) {$/;"	f	class:DroneInterface::SimulatedDrone
SimulatedDrone	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	SimulatedDrone::SimulatedDrone(std::string Serial, Eigen::Vector3d const & Position_LLA) : SimulatedDrone() {$/;"	f	class:DroneInterface::SimulatedDrone
Smoothstep	SRC/UI/MapWidget.cpp	/^static double Smoothstep(double x, int order) {$/;"	f	file:
SourcePID	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t SourcePID;$/;"	m	class:DroneInterface::Packet_Acknowledgment
Speed	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float Speed = 1.0f;        \/\/Vehicle speed (m\/s) between this waypoint and the next waypoint (0 < Speed <= 15)$/;"	m	struct:DroneInterface::Waypoint
Start	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline void ShadowDetectionEngine::Start(std::string const & DroneSerial) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
Start	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	inline void ShadowPropagationEngine::Start() {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
StartAnimation	SRC/UI/MapWidget.cpp	/^void MapWidget::StartAnimation(Eigen::Vector2d const & LatBounds, Eigen::Vector2d const & LonBounds) {$/;"	f	class:MapWidget
StartAnimation	SRC/UI/MapWidget.cpp	/^void MapWidget::StartAnimation(double MinLat, double MaxLat, double MinLon, double MaxLon) {$/;"	f	class:MapWidget
StartDJICamImageFeed	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::StartDJICamImageFeed(double TargetFPS) { $/;"	f	class:DroneInterface::RealDrone
StartDJICamImageFeed	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::StartDJICamImageFeed(double TargetFPS) {$/;"	f	class:DroneInterface::SimulatedDrone
StartManualControl	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::StartManualControl(DroneInterface::Drone & Drone, vehicleState & State, bool FlyAtDeck) {$/;"	f	class:VehicleControlWidget
StartSampleWaypointMission	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::StartSampleWaypointMission(int NumWaypoints, bool CurvedTrajectories, bool LandAtEnd,$/;"	f	class:DroneInterface::RealDrone
StartSampleWaypointMission	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::StartSampleWaypointMission(int NumWaypoints, bool CurvedTrajectories, bool LandAtEnd,$/;"	f	class:DroneInterface::SimulatedDrone
StartSurvey	SRC/Modules/Guidance/Guidance.cpp	/^    bool GuidanceEngine::StartSurvey(std::vector<std::string> const & LowFlierSerials, ImagingRequirements const & Reqs) {$/;"	f	class:Guidance::GuidanceEngine
StatusBar	SRC/UI/StatusBar.hpp	/^namespace StatusBar {$/;"	n
Stop	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline void ShadowDetectionEngine::Stop(void) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
Stop	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	inline void ShadowPropagationEngine::Stop(void) {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
Stop	SRC/UI/CommandWidget.hpp	/^		inline void Stop(void) {$/;"	f	class:CommandWidget
Stop	SRC/UI/VehicleControlWidget.hpp	/^		inline void Stop(void) {$/;"	f	class:VehicleControlWidget
StopCommandingDrone	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::StopCommandingDrone(std::string const & Serial) {$/;"	f	class:VehicleControlWidget
StopDJICamImageFeed	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::StopDJICamImageFeed(void) { $/;"	f	class:DroneInterface::RealDrone
StopDJICamImageFeed	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::StopDJICamImageFeed(void) {$/;"	f	class:DroneInterface::SimulatedDrone
StorePath	SRC/SimpleKVStore.hpp	/^		std::filesystem::path StorePath; \/\/Path to store (without file extension)$/;"	m	class:SimpleKVStore
StringNumberAwareCompare_LessThan	SRC/Utilities.hpp	/^inline bool StringNumberAwareCompare_LessThan(std::string const & a, std::string const & b) {$/;"	f
StringSplit	SRC/Utilities.hpp	/^inline std::vector<std::string> StringSplit(std::string const & s, std::string DelimiCharacterSet) {$/;"	f
StringStrip	SRC/Utilities.hpp	/^inline void StringStrip (std::string & s, std::string CharacterSet) {$/;"	f
StringStrip	SRC/Utilities.hpp	/^inline void StringStrip(std::string & s)  { StringStrip (s, std::string(" \\t")); }$/;"	f
StringToDataLayer	SRC/Maps/DataTileTypes.hpp	/^	inline DataLayer StringToDataLayer(std::string const & layer) {$/;"	f	namespace:Maps
StringToTheme	SRC/UI/Themes.hpp	/^inline Themes::Theme Themes::StringToTheme(std::string const & S) {$/;"	f	class:Themes
StripNumFromFromOfString	SRC/Utilities.hpp	/^inline unsigned long StripNumFromFromOfString(std::string const & a, size_t & aInd) {$/;"	f
SurveyRegion	SRC/SurveyRegionManager.hpp	/^		SurveyRegion(std::string Name) : m_Name(Name) {$/;"	f	class:SurveyRegion
SurveyRegion	SRC/SurveyRegionManager.hpp	/^class SurveyRegion {$/;"	c
SurveyRegionColor	SRC/UI/VisWidget.hpp	/^		std::array<float, 3> SurveyRegionColor; \/\/RGB in range 0 to 1$/;"	m	class:VisWidget
SurveyRegionEdgeThickness	SRC/UI/VisWidget.hpp	/^		float SurveyRegionEdgeThickness;        \/\/Edge thickness (in pixels) when editing.$/;"	m	class:VisWidget
SurveyRegionManager	SRC/SurveyRegionManager.hpp	/^		SurveyRegionManager()  { std::scoped_lock lock(m_mutex); LoadStateFromDisk(); }$/;"	f	class:SurveyRegionManager
SurveyRegionManager	SRC/SurveyRegionManager.hpp	/^class SurveyRegionManager {$/;"	c
SurveyRegionVertexRadius	SRC/UI/VisWidget.hpp	/^		float SurveyRegionVertexRadius;         \/\/Vertex radius (in pixels) when editing.$/;"	m	class:VisWidget
SurveyRegionsTool	SRC/UI/SurveyRegionTool.cpp	/^SurveyRegionsTool::SurveyRegionsTool() :$/;"	f	class:SurveyRegionsTool
SurveyRegionsTool	SRC/UI/SurveyRegionTool.hpp	/^class SurveyRegionsTool {$/;"	c
TOLERANCE	SRC/Modules/Guidance/Guidance.cpp	30;"	d	file:
TOLERANCE	SRC/Polygon.cpp	20;"	d	file:
TargetFPS	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   TargetFPS;$/;"	m	class:DroneInterface::Packet_CameraControl
TargetFPS	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   TargetFPS;$/;"	m	class:DroneInterface::Packet_CompressedImage
TargetFPS	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   TargetFPS;$/;"	m	class:DroneInterface::Packet_Image
TargetSpeed	SRC/Modules/Guidance/Guidance.hpp	/^			double TargetSpeed;     \/\/Target speed to fly while imaging (m\/s). This is a speed limit- drones will often fly slower than this, e.g. approaching waypoint$/;"	m	struct:Guidance::ImagingRequirements
TestBench0	SRC/TestBenches.cpp	/^static bool TestBench0(std::string const & Arg) {$/;"	f	file:
TestBench1	SRC/TestBenches.cpp	/^static bool TestBench1(std::string const & Arg) {$/;"	f	file:
TestBench10	SRC/TestBenches.cpp	/^static bool TestBench10(std::string const & Arg) { return false; }$/;"	f	file:
TestBench11	SRC/TestBenches.cpp	/^static bool TestBench11(std::string const & Arg) {$/;"	f	file:
TestBench12	SRC/TestBenches.cpp	/^static bool TestBench12(std::string const & Arg) {$/;"	f	file:
TestBench13	SRC/TestBenches.cpp	/^static bool TestBench13(std::string const & Arg) { return false; }$/;"	f	file:
TestBench14	SRC/TestBenches.cpp	/^static bool TestBench14(std::string const & Arg) { return false; }$/;"	f	file:
TestBench15	SRC/TestBenches.cpp	/^static bool TestBench15(std::string const & Arg) { return false; }$/;"	f	file:
TestBench16	SRC/TestBenches.cpp	/^static bool TestBench16(std::string const & Arg) {$/;"	f	file:
TestBench17	SRC/TestBenches.cpp	/^static bool TestBench17(std::string const & Arg) {$/;"	f	file:
TestBench18	SRC/TestBenches.cpp	/^static bool TestBench18(std::string const & Arg) { return false; }$/;"	f	file:
TestBench19	SRC/TestBenches.cpp	/^static bool TestBench19(std::string const & Arg) { return false; }$/;"	f	file:
TestBench2	SRC/TestBenches.cpp	/^static bool TestBench2(std::string const & Arg) {$/;"	f	file:
TestBench20	SRC/TestBenches.cpp	/^static bool TestBench20(std::string const & Arg) { return false; }$/;"	f	file:
TestBench21	SRC/TestBenches.cpp	/^static bool TestBench21(std::string const & Arg) {$/;"	f	file:
TestBench22	SRC/TestBenches.cpp	/^static bool TestBench22(std::string const & Arg) {$/;"	f	file:
TestBench23	SRC/TestBenches.cpp	/^static bool TestBench23(std::string const & Arg) {$/;"	f	file:
TestBench24	SRC/TestBenches.cpp	/^static bool TestBench24(std::string const & Arg) {$/;"	f	file:
TestBench25	SRC/TestBenches.cpp	/^static bool TestBench25(std::string const & Arg) { return false; }$/;"	f	file:
TestBench26	SRC/TestBenches.cpp	/^static bool TestBench26(std::string const & Arg) {$/;"	f	file:
TestBench27	SRC/TestBenches.cpp	/^static bool TestBench27(std::string const & Arg) {$/;"	f	file:
TestBench3	SRC/TestBenches.cpp	/^static bool TestBench3(std::string const & Arg) {$/;"	f	file:
TestBench4	SRC/TestBenches.cpp	/^static bool TestBench4(std::string const & Arg) {$/;"	f	file:
TestBench5	SRC/TestBenches.cpp	/^static bool TestBench5(std::string const & Arg) {$/;"	f	file:
TestBench6	SRC/TestBenches.cpp	/^static bool TestBench6(std::string const & Arg) {$/;"	f	file:
TestBench7	SRC/TestBenches.cpp	/^static bool TestBench7(std::string const & Arg)  { return false; }$/;"	f	file:
TestBench8	SRC/TestBenches.cpp	/^static bool TestBench8(std::string const & Arg)  { return false; }$/;"	f	file:
TestBench9	SRC/TestBenches.cpp	/^static bool TestBench9(std::string const & Arg)  { return false; }$/;"	f	file:
TestBenchArg	SRC/ReconMain.cpp	/^	std::string   TestBenchArg = ""s;                     \/\/Argument to testbench$/;"	m	namespace:Arguments	file:
TestBenchNum	SRC/ReconMain.cpp	/^	int           TestBenchNum = -1;                      \/\/-1: Run Recon, -2: List Tests, >=0: Run TestBench and exit$/;"	m	namespace:Arguments	file:
TestBenches	SRC/TestBenches.cpp	/^namespace TestBenches {$/;"	n	file:
TestBenches	SRC/TestBenches.hpp	/^namespace TestBenches {$/;"	n
TextureUploadFlowRestrictor	SRC/UI/TextureUploadFlowRestrictor.hpp	/^class TextureUploadFlowRestrictor {$/;"	c
Theme	SRC/UI/Themes.hpp	/^	enum class Theme {$/;"	c	namespace:Themes
ThemeSitter	SRC/UI/Themes.hpp	/^			ThemeSitter(Theme theme = Theme::Dummy) : m_theme(theme) { Load(); }$/;"	f	class:Themes::ThemeSitter
ThemeSitter	SRC/UI/Themes.hpp	/^	class ThemeSitter {$/;"	c	namespace:Themes
ThemeToSelectionNum	SRC/UI/Themes.hpp	/^inline int Themes::ThemeToSelectionNum(Themes::Theme theme) {$/;"	f	class:Themes
ThemeToString	SRC/UI/Themes.hpp	/^inline std::string Themes::ThemeToString(Theme theme) {$/;"	f	class:Themes
Themes	SRC/UI/Themes.hpp	/^namespace Themes {$/;"	n
Tile	SRC/Maps/Tile.hpp	/^		Tile(int xi, int yi, int zoom)$/;"	f	struct:Maps::Tile
Tile	SRC/Maps/Tile.hpp	/^	struct Tile {$/;"	s	namespace:Maps
TileEditZoomLevel	SRC/Maps/DataTileProvider.hpp	/^			static constexpr int32_t TileEditZoomLevel = 20; \/\/The pyramid level on which edits are done (lower-res tiles are derived from these)$/;"	m	struct:Maps::DataTileProvider
TilePixelToNM	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector2d TilePixelToNM(int32_t TileX, int32_t TileY, int32_t PyramidLevel, int Row, int Col, int32_t tileWidth) {$/;"	f
TimeAvailableFunction	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	class TimeAvailableFunction {$/;"	c	namespace:ShadowPropagation
TimeAvailableOverlay	SRC/UI/TimeAvailableOverlay.cpp	/^TimeAvailableOverlay::TimeAvailableOverlay() {$/;"	f	class:TimeAvailableOverlay
TimeAvailableOverlay	SRC/UI/TimeAvailableOverlay.hpp	/^class TimeAvailableOverlay {$/;"	c
Timestamp	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			TimePoint Timestamp;$/;"	m	class:ShadowDetection::InstantaneousShadowMap
Timestamp	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			TimePoint Timestamp;$/;"	m	class:ShadowPropagation::TimeAvailableFunction
TimestampToGPSTime	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^	inline bool GNSSManager::TimestampToGPSTime(TimePoint const & Timestamp, uint32_t & GPS_Week, double & GPS_TOW) {$/;"	f	class:GNSSReceiver::GNSSManager
Timestamps	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::vector<TimePoint> Timestamps; \/\/Item n is the timestamp for Maps[n]$/;"	m	class:ShadowDetection::ShadowMapHistory
ToPolygon	SRC/Polygon.cpp	/^Polygon Triangle::ToPolygon(){$/;"	f	class:Triangle
ToSimplePolygon	SRC/Polygon.cpp	/^SimplePolygon Triangle::ToSimplePolygon(){$/;"	f	class:Triangle
ToString	SRC/Maps/Tile.hpp	/^		std::string ToString() const {$/;"	f	struct:Maps::Tile
TouchLoadFRFTile	SRC/Maps/DataTileProvider.cpp	/^	void DataTileProvider::TouchLoadFRFTile(Tile Key) {$/;"	f	class:Maps::DataTileProvider
TouchLoadFRFTilesAndWait	SRC/Maps/DataTileProvider.cpp	/^	void DataTileProvider::TouchLoadFRFTilesAndWait(std::vector<Tile> const & Tiles) {$/;"	f	class:Maps::DataTileProvider
TransferStateToTargetObject	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	bool RealDrone::TransferStateToTargetObject(void) {$/;"	f	class:DroneInterface::RealDrone
Transition	SRC/UI/Animation.hpp	/^inline void AnimatedVariable1D::Transition() {$/;"	f	class:AnimatedVariable1D
Triangle	SRC/Polygon.hpp	/^    struct Triangle {$/;"	s	class:TriangleAdjacencyMap
Triangle	SRC/Polygon.hpp	/^class Triangle {$/;"	c
TriangleAdjacencyMap	SRC/Polygon.hpp	/^class TriangleAdjacencyMap {$/;"	c
Triangulate	SRC/Polygon.cpp	/^void Polygon::Triangulate(std::Evector<Triangle> & Triangles) const {$/;"	f	class:Polygon
Triangulate	SRC/Polygon.cpp	/^void PolygonCollection::Triangulate(std::Evector<Triangle> & Triangles) const {$/;"	f	class:PolygonCollection
TrimItemsVector	SRC/UI/ConsoleWidget.cpp	/^void ConsoleWidget::TrimItemsVector(void) {$/;"	f	class:ConsoleWidget
TryGetData	SRC/Maps/DataTileProvider.cpp	/^	bool DataTileProvider::TryGetData(Eigen::Vector2d const & Position_NM, DataLayer layer, double & Value) {$/;"	f	class:Maps::DataTileProvider
TryGetDroneTelemetry	SRC/UI/VehicleControlWidget.hpp	/^inline bool VehicleControlWidget::TryGetDroneTelemetry(DroneInterface::Drone * Drone, bool & IsFlying, Eigen::Vector3d & DronePos_LLA,$/;"	f	class:VehicleControlWidget
TryGetLoadUpdate_VizTile	SRC/Maps/DataTileProvider.cpp	/^	ImTextureID DataTileProvider::TryGetLoadUpdate_VizTile(VizualizationTileKey Key) {$/;"	f	class:Maps::DataTileProvider
TryGetTouchReq	SRC/Maps/SatelliteCacheMaster.cpp	/^ImTextureID SatelliteCacheMaster::TryGetTouchReq(Tile tile) {$/;"	f	class:Maps::SatelliteCacheMaster
TryInitShadowMapAndHistory	SRC/Modules/Shadow-Detection/ShadowDetection.cpp	/^	void ShadowDetectionEngine::TryInitShadowMapAndHistory(void) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
Type	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t     Type;$/;"	m	class:DroneInterface::Packet_MessageString
UBXPacket_CFG_MSG	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^namespace UBXPacket_CFG_MSG {$/;"	n	file:
UBXPacket_CFG_PRT	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^namespace UBXPacket_CFG_PRT {$/;"	n	file:
UBXPacket_CFG_RATE	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^namespace UBXPacket_CFG_RATE {$/;"	n	file:
UBXPacket_MON_HW	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^namespace UBXPacket_MON_HW {$/;"	n	file:
UBX_HEADER_LENGTH	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	16;"	d	file:
UIScaleFactor	SRC/ProgOptions.hpp	/^		float UIScaleFactor;     \/\/Scale factor for all UI elements$/;"	m	class:ProgOptions
UITheme	SRC/ProgOptions.hpp	/^		Themes::Theme UITheme;   \/\/Light, Dark, etc.$/;"	m	class:ProgOptions
UL_LL	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Vector2d UL_LL; \/\/(Latitude, Longitude) of center of upper-left pixel, in radians$/;"	m	class:ShadowDetection::InstantaneousShadowMap
UL_LL	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Vector2d UL_LL; \/\/(Latitude, Longitude) of center of upper-left pixel, in radians$/;"	m	class:ShadowDetection::ShadowMapHistory
UL_LL	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			Eigen::Vector2d UL_LL; \/\/(Latitude, Longitude) of center of upper-left pixel, in radians$/;"	m	class:ShadowPropagation::TimeAvailableFunction
UL_LL	SRC/UI/ShadowMapOverlay.hpp	/^		Eigen::Vector2d UL_LL; \/\/(Latitude, Longitude) of center of upper-left pixel, in radians$/;"	m	class:ShadowMapOverlay
UL_LL	SRC/UI/TimeAvailableOverlay.hpp	/^		Eigen::Vector2d UL_LL; \/\/(Latitude, Longitude) of center of upper-left pixel, in radians$/;"	m	class:TimeAvailableOverlay
UR_LL	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Vector2d UR_LL; \/\/(Latitude, Longitude) of center of upper-right pixel, in radians$/;"	m	class:ShadowDetection::InstantaneousShadowMap
UR_LL	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Vector2d UR_LL; \/\/(Latitude, Longitude) of center of upper-right pixel, in radians$/;"	m	class:ShadowDetection::ShadowMapHistory
UR_LL	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			Eigen::Vector2d UR_LL; \/\/(Latitude, Longitude) of center of upper-right pixel, in radians$/;"	m	class:ShadowPropagation::TimeAvailableFunction
UR_LL	SRC/UI/ShadowMapOverlay.hpp	/^		Eigen::Vector2d UR_LL; \/\/(Latitude, Longitude) of center of upper-right pixel, in radians$/;"	m	class:ShadowMapOverlay
UR_LL	SRC/UI/TimeAvailableOverlay.hpp	/^		Eigen::Vector2d UR_LL; \/\/(Latitude, Longitude) of center of upper-right pixel, in radians$/;"	m	class:TimeAvailableOverlay
UnRegisterCallback	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	void RealDrone::UnRegisterCallback(int Handle) {$/;"	f	class:DroneInterface::RealDrone
UnRegisterCallback	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::UnRegisterCallback(int Handle) {$/;"	f	class:DroneInterface::SimulatedDrone
UnRegisterCallback	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^	inline void ShadowDetectionEngine::UnRegisterCallback(int Handle) {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
UnRegisterCallback	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^	inline void ShadowPropagationEngine::UnRegisterCallback(int Handle) {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
UnloadRefFrame	SRC/UI/SimFiducialsWidget.hpp	/^inline void SimFiducialsWidget::UnloadRefFrame(void) {$/;"	f	class:SimFiducialsWidget
Update	SRC/UI/MapWidget.cpp	/^void MapWidget::Update() {$/;"	f	class:MapWidget
Update2DVelocityBasedOnTarget	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::Update2DVelocityBasedOnTarget(double deltaT, Eigen::Vector2d const & V_Target_EN, double max2DAcc, double max2DDec, double max2DSpeed) {$/;"	f	class:DroneInterface::SimulatedDrone
UpdateDrone2DPositionBasedOnVelocity	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::UpdateDrone2DPositionBasedOnVelocity(double deltaT, Eigen::Matrix3d const & C_ENU_ECEF) {$/;"	f	class:DroneInterface::SimulatedDrone
UpdateDroneOrientationBasedOnYawTarget	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	double SimulatedDrone::UpdateDroneOrientationBasedOnYawTarget(double deltaT, double TargetYaw, double turnRate) {$/;"	f	class:DroneInterface::SimulatedDrone
UpdateDronePose	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::UpdateDronePose(void) {$/;"	f	class:DroneInterface::SimulatedDrone
UpdateDroneVertChannelBasedOnTargetHAG	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	void SimulatedDrone::UpdateDroneVertChannelBasedOnTargetHAG(double deltaT, double TargetHAG, double climbRate, double descentRate) {$/;"	f	class:DroneInterface::SimulatedDrone
UpdateFRFTileTimeTag	SRC/Maps/DataTileProvider.cpp	/^	void DataTileCacheItem::UpdateFRFTileTimeTag(FRFImage * FRFTile) {$/;"	f	class:Maps::DataTileCacheItem
UpdateLowerResTiles	SRC/Maps/DataTileProvider.cpp	/^	void DataTileProvider::UpdateLowerResTiles(std::unordered_set<Tile> const & EditedTiles) {$/;"	f	class:Maps::DataTileProvider
UpdateState	SRC/UI/Animation.hpp	/^inline void AnimatedVariable1D::UpdateState(double SecondsIntoAnimation) {$/;"	f	class:AnimatedVariable1D
Update_AtTarget_Fields	SRC/UI/VehicleControlWidget.hpp	/^inline void VehicleControlWidget::Update_AtTarget_Fields(Eigen::Vector3d const & DronePos_LLA, Eigen::Vector3d const & DronePos_ECEF,$/;"	f	class:VehicleControlWidget
V_D	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   V_D;       \/\/Down velocity (m\/s)$/;"	m	class:DroneInterface::Packet_CoreTelemetry
V_E	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   V_E;       \/\/East velocity (m\/s)$/;"	m	class:DroneInterface::Packet_CoreTelemetry
V_East	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float V_East  = 0.0f;   \/\/m\/s: East component of vehicle velocity (Acceptable range -15 to 15)$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeA
V_Forward	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float V_Forward = 0.0f;  \/\/m\/s: Forward component of vehicle velocity (Acceptable range -15 to 15)$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeB
V_N	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   V_N;       \/\/North velocity (m\/s)$/;"	m	class:DroneInterface::Packet_CoreTelemetry
V_North	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float V_North = 0.0f;   \/\/m\/s: North component of vehicle velocity (Acceptable range -15 to 15)$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeA
V_Right	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float V_Right   = 0.0f;  \/\/m\/s: Vehicle-Right component of vehicle velocity (Acceptable range -15 to 15)$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeB
V_x	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   V_x;$/;"	m	class:DroneInterface::Packet_VirtualStickCommand
V_y	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   V_y;$/;"	m	class:DroneInterface::Packet_VirtualStickCommand
ValA	SRC/UI/Animation.hpp	/^		double ValA;$/;"	m	class:AnimatedVariable1D
ValB	SRC/UI/Animation.hpp	/^		double ValB;$/;"	m	class:AnimatedVariable1D
ValuesFile	SRC/SimpleKVStore.hpp	/^		Handy::File ValuesFile;$/;"	m	class:SimpleKVStore
VehicleControlWidget	SRC/UI/VehicleControlWidget.hpp	/^		VehicleControlWidget() : Log(*(ReconUI::Instance().Log)) {$/;"	f	class:VehicleControlWidget
VehicleControlWidget	SRC/UI/VehicleControlWidget.hpp	/^class VehicleControlWidget {$/;"	c
Verbose	SRC/ReconMain.cpp	/^	bool          Verbose      = false;                   \/\/Enable extra log\/terminal output for debugging$/;"	m	namespace:Arguments	file:
VertexAddress	SRC/UI/SurveyRegionTool.hpp	/^		VertexAddress(SimplePolyAddress SimplePoly, int Vertex) : componentIndex(SimplePoly.componentIndex), holeIndex(SimplePoly.holeIndex), vertexIndex(Vertex) { }$/;"	f	struct:SurveyRegionsTool::VertexAddress
VertexAddress	SRC/UI/SurveyRegionTool.hpp	/^		VertexAddress(int Comp, int Hole, int Vertex) : componentIndex(Comp), holeIndex(Hole), vertexIndex(Vertex) { }$/;"	f	struct:SurveyRegionsTool::VertexAddress
VertexAddress	SRC/UI/SurveyRegionTool.hpp	/^	struct VertexAddress {$/;"	s	class:SurveyRegionsTool
VirtualStickCommand_ModeA	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^	struct VirtualStickCommand_ModeA {$/;"	s	namespace:DroneInterface
VirtualStickCommand_ModeB	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^	struct VirtualStickCommand_ModeB {$/;"	s	namespace:DroneInterface
VisWidget	SRC/UI/VisWidget.hpp	/^		VisWidget() : Log(*(ReconUI::Instance().Log)) { LoadDefaults(); LoadFromDisk(); }$/;"	f	class:VisWidget
VisWidget	SRC/UI/VisWidget.hpp	/^class VisWidget {$/;"	c
Visible	SRC/UI/AboutWindow.hpp	/^		bool Visible = false;$/;"	m	class:AboutWindow
Visible	SRC/UI/GNSSReceiverWindow.hpp	/^		bool Visible = false;$/;"	m	class:GNSSReceiverWindow
Visible	SRC/UI/SettingsWindow.hpp	/^		bool Visible = false;$/;"	m	class:SettingsWindow
VizualizationTileKey	SRC/Maps/DataTileTypes.hpp	/^	struct VizualizationTileKey {$/;"	s	namespace:Maps
WaitFinish	SRC/Maps/CacheFile.cpp	/^void CacheFile::WaitFinish() {$/;"	f	class:Maps::CacheFile
WaitFinish	SRC/Maps/FRFTileStore.cpp	/^void FRFTileStore::WaitFinish() {$/;"	f	class:Maps::FRFTileStore
WaitFinish	SRC/Maps/WebRetriever.cpp	/^	void WebRetriever::WaitFinish() { m_threads.Wait(); }$/;"	f	class:Maps::WebRetriever
WaitUntilUploadIsAllowed	SRC/UI/TextureUploadFlowRestrictor.hpp	/^		void WaitUntilUploadIsAllowed() {$/;"	f	class:TextureUploadFlowRestrictor
WatchdogThreadMain	SRC/UI/CommandWidget.hpp	/^inline void CommandWidget::WatchdogThreadMain(void) {$/;"	f	class:CommandWidget
Waypoint	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^	struct Waypoint {$/;"	s	namespace:DroneInterface
WaypointMission	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^	struct WaypointMission {$/;"	s	namespace:DroneInterface
Waypoints	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			std::vector<Waypoint> Waypoints;$/;"	m	class:DroneInterface::Packet_ExecuteWaypointMission
Waypoints	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		std::vector<Waypoint> Waypoints; \/\/Waypoints to fly to, in order from the vehicle starting position (which is not included as a waypoint)$/;"	m	struct:DroneInterface::WaypointMission
WebRetriever	SRC/Maps/WebRetriever.cpp	/^	WebRetriever::WebRetriever(ITileWebReceiver * receiver, Journal & LogRef)$/;"	f	class:Maps::WebRetriever
WebRetriever	SRC/Maps/WebRetriever.hpp	/^	class WebRetriever {$/;"	c	namespace:Maps
WidgetCoordsToNormalizedMercator	SRC/Maps/MapUtils.hpp	/^inline Eigen::Vector2d WidgetCoordsToNormalizedMercator(Eigen::Vector2d const & WidgetCords, Eigen::Vector2d const & ULCorner_NM, double Zoom, int32_t tileWidth) {$/;"	f
WidgetHeight	SRC/UI/ConsoleWidget.hpp	/^	AnimatedVariable1D WidgetHeight;$/;"	m	class:ConsoleWidget
WindLevel	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t  WindLevel;    \/\/Wind level. (−1: FCS.windWarning = Unknown, >= 0:equals warning level)$/;"	m	class:DroneInterface::Packet_ExtendedTelemetry
WindowULCorner_NormalizedMercator	SRC/UI/MapWidget.hpp	/^		Eigen::Vector2d WindowULCorner_NormalizedMercator;$/;"	m	class:MapWidget
Xi	SRC/Maps/Tile.hpp	/^		int32_t Xi = 0;$/;"	m	struct:Maps::Tile
Yaw	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			double  Yaw;       \/\/Vehicle Yaw (Degrees) - DJI definition$/;"	m	class:DroneInterface::Packet_CoreTelemetry
Yaw	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   Yaw;$/;"	m	class:DroneInterface::Packet_VirtualStickCommand
Yaw	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float Yaw       = 0.0f;  \/\/Radians: 0 corresponds to North, positive is clockwise rotation$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeB
Yaw	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float Yaw     = 0.0f;   \/\/Radians: 0 corresponds to North, positive is clockwise rotation$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeA
Yi	SRC/Maps/Tile.hpp	/^		int32_t Yi = 0;$/;"	m	struct:Maps::Tile
Zoom	SRC/Maps/Tile.hpp	/^		int32_t Zoom = 0;$/;"	m	struct:Maps::Tile
ZoomToCoordsDialog	SRC/UI/ModalDialogs.hpp	/^class ZoomToCoordsDialog {$/;"	c
ZoomToLocation	SRC/UI/MapWidget.cpp	/^void MapWidget::ZoomToLocation(Eigen::Vector2d const & LatBounds, Eigen::Vector2d const & LonBounds) {$/;"	f	class:MapWidget
addChecksum	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void addChecksum(std::vector<uint8_t> & buffer) {$/;"	f	file:
alloc	SRC/Earcut.hpp	/^        Alloc alloc;$/;"	m	class:mapbox::detail::Earcut::ObjectPool
alloc_traits	SRC/Earcut.hpp	/^        typedef typename std::allocator_traits<Alloc> alloc_traits;$/;"	t	class:mapbox::detail::Earcut::ObjectPool
allocations	SRC/Earcut.hpp	/^        std::vector<T*> allocations;$/;"	m	class:mapbox::detail::Earcut::ObjectPool
area	SRC/Earcut.hpp	/^double Earcut<N>::area(const Node* p, const Node* q, const Node* r) const {$/;"	f	class:mapbox::detail::Earcut
assembleHERE_Tile_URL	SRC/Maps/SatelliteSources.hpp	/^	inline std::string assembleHERE_Tile_URL(int Row, int Col, int ZoomLevel, int Size, bool Hybrid) {$/;"	f	namespace:Maps
back	SRC/TimeSeries.h	/^template <typename valueType> valueType timeSeries<valueType>::back(void) {$/;"	f	class:timeSeries
blockSize	SRC/Earcut.hpp	/^        std::size_t blockSize = 1;$/;"	m	class:mapbox::detail::Earcut::ObjectPool
brightest	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			cv::Mat brightest; \/\/Computed in SetReferenceFrame(), updated in ProcessFrame()$/;"	m	class:ShadowDetection::ShadowDetectionEngine
c	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	double c;          \/\/ affine parameter$/;"	m	struct:ocam_model
cam2world	SRC/Modules/Shadow-Detection/ocam_utils.h	/^inline void cam2world(double point3D[3], double point2D[2], struct ocam_model* myocam_model)$/;"	f
center	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			Eigen::Vector2d center;    \/\/Computed in SetFiducials()$/;"	m	class:ShadowDetection::ShadowDetectionEngine
centroid_ECEF	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			cv::Point3d centroid_ECEF; \/\/Computed in SetFiducials()$/;"	m	class:ShadowDetection::ShadowDetectionEngine
cereal	SRC/Polygon.hpp	/^namespace cereal {$/;"	n
cereal	SRC/ProgOptions.hpp	/^namespace cereal {$/;"	n
clear	SRC/Earcut.hpp	/^        void clear() { reset(blockSize); }$/;"	f	class:mapbox::detail::Earcut::ObjectPool
clear	SRC/TimeSeries.h	/^template <typename valueType> void timeSeries<valueType>::clear(void) {$/;"	f	class:timeSeries
cmap_None	SRC/Colormaps.hpp	/^	const std::vector<std::tuple<uint8_t,uint8_t,uint8_t>> cmap_None;$/;"	m	namespace:Colormaps
cno	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<uint8_t>  cno;$/;"	m	class:NAVSig	file:
componentIndex	SRC/UI/SurveyRegionTool.hpp	/^		int componentIndex = -1;$/;"	m	struct:SurveyRegionsTool::SimplePolyAddress
componentIndex	SRC/UI/SurveyRegionTool.hpp	/^		int componentIndex = -1;$/;"	m	struct:SurveyRegionsTool::VertexAddress
construct	SRC/Earcut.hpp	/^        T* construct(Args&&... args) {$/;"	f	class:mapbox::detail::Earcut::ObjectPool
continued	SRC/Journal.h	/^		bool continued; \/\/True if the last print call was print_continued of printf_continued.$/;"	m	class:Journal
coordinateWiseMax	SRC/TimeSeries.h	/^		static valueType coordinateWiseMax(valueType const & V1, valueType const & V2) { throw; } \/\/Implemented through template specialization$/;"	f	class:timeSeries
coordinateWiseMax	SRC/TimeSeries.h	/^template <> inline Eigen::Vector2d timeSeries<Eigen::Vector2d>::coordinateWiseMax(Eigen::Vector2d const & V1, Eigen::Vector2d const & V2) {$/;"	f	class:timeSeries
coordinateWiseMax	SRC/TimeSeries.h	/^template <> inline Eigen::Vector3d timeSeries<Eigen::Vector3d>::coordinateWiseMax(Eigen::Vector3d const & V1, Eigen::Vector3d const & V2) {$/;"	f	class:timeSeries
coordinateWiseMax	SRC/TimeSeries.h	/^template <> inline Eigen::Vector4d timeSeries<Eigen::Vector4d>::coordinateWiseMax(Eigen::Vector4d const & V1, Eigen::Vector4d const & V2) {$/;"	f	class:timeSeries
coordinateWiseMax	SRC/TimeSeries.h	/^template <> inline double          timeSeries<double>::coordinateWiseMax(double const & V1, double const & V2) { return std::max(V1, V2); }$/;"	f	class:timeSeries
coordinateWiseMin	SRC/TimeSeries.h	/^		static valueType coordinateWiseMin(valueType const & V1, valueType const & V2) { throw; } \/\/Implemented through template specialization$/;"	f	class:timeSeries
coordinateWiseMin	SRC/TimeSeries.h	/^template <> inline Eigen::Vector2d timeSeries<Eigen::Vector2d>::coordinateWiseMin(Eigen::Vector2d const & V1, Eigen::Vector2d const & V2) {$/;"	f	class:timeSeries
coordinateWiseMin	SRC/TimeSeries.h	/^template <> inline Eigen::Vector3d timeSeries<Eigen::Vector3d>::coordinateWiseMin(Eigen::Vector3d const & V1, Eigen::Vector3d const & V2) {$/;"	f	class:timeSeries
coordinateWiseMin	SRC/TimeSeries.h	/^template <> inline Eigen::Vector4d timeSeries<Eigen::Vector4d>::coordinateWiseMin(Eigen::Vector4d const & V1, Eigen::Vector4d const & V2) {$/;"	f	class:timeSeries
coordinateWiseMin	SRC/TimeSeries.h	/^template <> inline double          timeSeries<double>::coordinateWiseMin(double const & V1, double const & V2) { return std::min(V1, V2); }$/;"	f	class:timeSeries
corrSource	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<uint8_t>  corrSource;$/;"	m	class:NAVSig	file:
create_masked_binary	SRC/Modules/Shadow-Detection/shadow_utils.hpp	/^inline void create_masked_binary(const int mapRows, const int mapCols, const cv::Mat mask, cv::Mat binary_sampled){$/;"	f
create_perspective_undistortion_LUT	SRC/Modules/Shadow-Detection/ocam_utils.h	/^inline void create_perspective_undistortion_LUT(cv::Mat& mapx, cv::Mat& mapy, struct ocam_model* ocam_model, double sf)$/;"	f
cubick	SRC/Modules/Shadow-Detection/lambda_twist.h	/^	double cubick(double b, double c, double d) {$/;"	f	namespace:__anon1
cureLocalIntersections	SRC/Earcut.hpp	/^Earcut<N>::cureLocalIntersections(Node* start) {$/;"	f	class:mapbox::detail::Earcut
currentBlock	SRC/Earcut.hpp	/^        T* currentBlock = nullptr;$/;"	m	class:mapbox::detail::Earcut::ObjectPool
currentIndex	SRC/Earcut.hpp	/^        std::size_t currentIndex = 1;$/;"	m	class:mapbox::detail::Earcut::ObjectPool
d	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	double d;          \/\/ affine parameter$/;"	m	struct:ocam_model
decodeField_CH	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static char decodeField_CH(uint8_t * buffer) {$/;"	f	file:
decodeField_CompressedImage	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static cv::Mat decodeField_CompressedImage (std::vector<uint8_t>::const_iterator & Iter, unsigned int & NumBytes) {$/;"	f	file:
decodeField_GPST	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^static inline std::tuple<uint32_t,double> ShadowMapIO::decodeField_GPST (std::vector<uint8_t>::const_iterator & Iter) {$/;"	f	class:ShadowMapIO
decodeField_I1	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static int8_t decodeField_I1(uint8_t * buffer) {$/;"	f	file:
decodeField_I2	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static int16_t decodeField_I2(uint8_t * buffer) {$/;"	f	file:
decodeField_I4	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static int32_t decodeField_I4(uint8_t * buffer) {$/;"	f	file:
decodeField_Image	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static cv::Mat decodeField_Image (std::vector<uint8_t>::const_iterator & Iter, unsigned int & MaxBytes) {$/;"	f	file:
decodeField_R4	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static float decodeField_R4(uint8_t * buffer) {$/;"	f	file:
decodeField_R8	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static double decodeField_R8(uint8_t * buffer) {$/;"	f	file:
decodeField_String	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static std::string decodeField_String (std::vector<uint8_t>::const_iterator & Iter, unsigned int & MaxBytes) {$/;"	f	file:
decodeField_U1	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static uint8_t decodeField_U1(uint8_t * buffer) {$/;"	f	file:
decodeField_U2	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static uint16_t decodeField_U2(uint8_t * buffer) {$/;"	f	file:
decodeField_U4	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static uint32_t decodeField_U4(uint8_t * buffer) {$/;"	f	file:
decodeField_X1	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static uint8_t decodeField_X1(uint8_t * buffer) {$/;"	f	file:
decodeField_X2	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static uint16_t decodeField_X2(uint8_t * buffer) {$/;"	f	file:
decodeField_X4	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static uint32_t decodeField_X4(uint8_t * buffer) {$/;"	f	file:
decodeField_float32	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static float decodeField_float32 (std::vector<uint8_t>::const_iterator & Iter) {$/;"	f	file:
decodeField_float64	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static double decodeField_float64 (std::vector<uint8_t>::const_iterator & Iter) {$/;"	f	file:
decodeField_float64	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^static inline double ShadowMapIO::decodeField_float64 (std::vector<uint8_t>::const_iterator & Iter) {$/;"	f	class:ShadowMapIO
decodeField_int16	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static int16_t  decodeField_int16  (std::vector<uint8_t>::const_iterator & Iter) {return((int16_t) decodeField_uint16(Iter));}$/;"	f	file:
decodeField_int32	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static int32_t  decodeField_int32  (std::vector<uint8_t>::const_iterator & Iter) {return((int32_t) decodeField_uint32(Iter));}$/;"	f	file:
decodeField_int64	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static int64_t  decodeField_int64  (std::vector<uint8_t>::const_iterator & Iter) {return((int64_t) decodeField_uint64(Iter));}$/;"	f	file:
decodeField_int8	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static int8_t   decodeField_int8   (std::vector<uint8_t>::const_iterator & Iter) {return((int8_t) *Iter++);}$/;"	f	file:
decodeField_uint16	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static uint16_t decodeField_uint16 (std::vector<uint8_t>::const_iterator & Iter) {$/;"	f	file:
decodeField_uint32	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static uint32_t decodeField_uint32 (std::vector<uint8_t>::const_iterator & Iter) {$/;"	f	file:
decodeField_uint32	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^static inline uint32_t ShadowMapIO::decodeField_uint32 (std::vector<uint8_t>::const_iterator & Iter) {$/;"	f	class:ShadowMapIO
decodeField_uint64	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static uint64_t decodeField_uint64 (std::vector<uint8_t>::const_iterator & Iter) {$/;"	f	file:
decodeField_uint64	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^static inline uint64_t ShadowMapIO::decodeField_uint64 (std::vector<uint8_t>::const_iterator & Iter) {$/;"	f	class:ShadowMapIO
decodeField_uint8	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static uint8_t decodeField_uint8 (std::vector<uint8_t>::const_iterator & Iter) { return(*Iter++); }$/;"	f	file:
decodeGet	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_MSG::decodeGet(uint8_t * rawUBXPacket, uint8_t &msgClass, uint8_t &msgID, std::vector<uint8_t> &rate) {$/;"	f	class:UBXPacket_CFG_MSG
decodeGet	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_PRT::decodeGet(uint8_t * rawUBXPacket, uint8_t &PortID, uint16_t &txReady, uint32_t &mode,$/;"	f	class:UBXPacket_CFG_PRT
decodeGet	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_RATE::decodeGet(uint8_t * rawUBXPacket, uint16_t &measRate, uint16_t &navRate, uint16_t &timeRef) {$/;"	f	class:UBXPacket_CFG_RATE
decodeGet	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^void UBXPacket_MON_HW::decodeGet(uint8_t * rawUBXPacket, uint32_t &pinSel, uint32_t &pinBank, uint32_t &pinDir, uint32_t &pinVal, uint16_t &noisePerMS,$/;"	f	class:UBXPacket_MON_HW
decode_NAV_POSECEF	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		void decode_NAV_POSECEF(uint8_t * rawUBXPacket) {$/;"	f	class:NAVSolution
decode_NAV_POSLLH	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		void decode_NAV_POSLLH(uint8_t * rawUBXPacket) {$/;"	f	class:NAVSolution
decode_NAV_SIG	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		void decode_NAV_SIG(uint8_t * rawUBXPacket) {$/;"	f	class:NAVSig
decode_NAV_STATUS	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		void decode_NAV_STATUS(uint8_t * rawUBXPacket) {$/;"	f	class:NAVSolution
decode_NAV_TIMEGPS	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		void decode_NAV_TIMEGPS(uint8_t * rawUBXPacket) {$/;"	f	class:NAVSolution
defaultButtonWidth	SRC/UI/SettingsWindow.hpp	/^		float defaultButtonWidth = 10.0f; \/\/Updated in draw loop$/;"	m	class:SettingsWindow
detail	SRC/Earcut.hpp	/^namespace detail {$/;"	n	namespace:mapbox
dragging	SRC/UI/MapWidget.hpp	/^		bool            dragging = false;$/;"	m	class:MapWidget
duration	SRC/TimeSeries.h	/^template <typename valueType> double timeSeries<valueType>::duration(void) {$/;"	f	class:timeSeries
duration	SRC/UI/Animation.hpp	/^		double duration; \/\/Actual duration of transition (in seconds)$/;"	m	class:AnimatedVariable1D
e	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	double e;          \/\/ affine parameter$/;"	m	struct:ocam_model
earcut	SRC/Earcut.hpp	/^std::vector<N> earcut(const Polygon& poly) {$/;"	f	namespace:mapbox
earcutLinked	SRC/Earcut.hpp	/^void Earcut<N>::earcutLinked(Node* ear, int pass) {$/;"	f	class:mapbox::detail::Earcut
ecefX	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		int32_t  ecefX = 0;$/;"	m	class:NAVSolution	file:
ecefY	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		int32_t  ecefY = 0;$/;"	m	class:NAVSolution	file:
ecefZ	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		int32_t  ecefZ = 0;$/;"	m	class:NAVSolution	file:
edges	SRC/Polygon.hpp	/^    std::vector<std::vector<int>> edges;$/;"	m	class:TriangleAdjacencyMap
eigwithknown0	SRC/Modules/Shadow-Detection/lambda_twist.h	/^	void eigwithknown0(Eigen::Matrix3d const& x, Eigen::Matrix3d& E, Eigen::Vector3d& L) {$/;"	f	namespace:__anon1
eliminateHole	SRC/Earcut.hpp	/^void Earcut<N>::eliminateHole(Node* hole, Node* outerNode) {$/;"	f	class:mapbox::detail::Earcut
eliminateHoles	SRC/Earcut.hpp	/^Earcut<N>::eliminateHoles(const Polygon& points, Node* outerNode) {$/;"	f	class:mapbox::detail::Earcut
empty	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		bool empty() { return Waypoints.empty(); }$/;"	f	struct:DroneInterface::WaypointMission
empty	SRC/TimeSeries.h	/^template <typename valueType> bool timeSeries<valueType>::empty(void) {$/;"	f	class:timeSeries
encodeField_CH	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_CH(std::vector<uint8_t> & buffer, char x) {$/;"	f	file:
encodeField_CompressedImage	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_CompressedImage (std::vector<uint8_t> & Buffer, cv::Mat const & x) {$/;"	f	file:
encodeField_GPST	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^static inline void ShadowMapIO::encodeField_GPST (std::vector<uint8_t> & Buffer, uint32_t Week, double TOW) {$/;"	f	class:ShadowMapIO
encodeField_I1	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_I1(std::vector<uint8_t> & buffer, int8_t x) {$/;"	f	file:
encodeField_I2	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_I2(std::vector<uint8_t> & buffer, int16_t x) {$/;"	f	file:
encodeField_I4	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_I4(std::vector<uint8_t> & buffer, int32_t x) {$/;"	f	file:
encodeField_Image	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_Image (std::vector<uint8_t> & Buffer, cv::Mat const & x) {$/;"	f	file:
encodeField_R4	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_R4(std::vector<uint8_t> & buffer, float x) {$/;"	f	file:
encodeField_R8	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_R8(std::vector<uint8_t> & buffer, double x) {$/;"	f	file:
encodeField_String	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_String (std::vector<uint8_t> & Buffer, const std::string & x) {$/;"	f	file:
encodeField_U1	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_U1(std::vector<uint8_t> & buffer, uint8_t x) {$/;"	f	file:
encodeField_U2	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_U2(std::vector<uint8_t> & buffer, uint16_t x) {$/;"	f	file:
encodeField_U4	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_U4(std::vector<uint8_t> & buffer, uint32_t x) {$/;"	f	file:
encodeField_X1	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_X1(std::vector<uint8_t> & buffer, uint8_t x) {$/;"	f	file:
encodeField_X2	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_X2(std::vector<uint8_t> & buffer, uint16_t x) {$/;"	f	file:
encodeField_X4	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeField_X4(std::vector<uint8_t> & buffer, uint32_t x) {$/;"	f	file:
encodeField_float32	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_float32(std::vector<uint8_t> & Buffer, float  x)  {encodeField_uint32(Buffer, reinterpret_cast<uint32_t &>(x));}$/;"	f	file:
encodeField_float64	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_float64(std::vector<uint8_t> & Buffer, double x)  {encodeField_uint64(Buffer, reinterpret_cast<uint64_t &>(x));}$/;"	f	file:
encodeField_float64	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^static inline void ShadowMapIO::encodeField_float64(std::vector<uint8_t> & Buffer, double x)  {encodeField_uint64(Buffer, reinterpret_cast<uint64_t &>(x));}$/;"	f	class:ShadowMapIO
encodeField_int16	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_int16  (std::vector<uint8_t> & Buffer, int16_t x) {encodeField_uint16(Buffer, (uint16_t) x);}$/;"	f	file:
encodeField_int32	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_int32  (std::vector<uint8_t> & Buffer, int32_t x) {encodeField_uint32(Buffer, (uint32_t) x);}$/;"	f	file:
encodeField_int64	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_int64  (std::vector<uint8_t> & Buffer, int64_t x) {encodeField_uint64(Buffer, (uint64_t) x);}$/;"	f	file:
encodeField_int8	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_int8   (std::vector<uint8_t> & Buffer, int8_t  x) {encodeField_uint8 (Buffer, (uint8_t)  x);}$/;"	f	file:
encodeField_uint16	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_uint16 (std::vector<uint8_t> & Buffer, uint16_t x) {$/;"	f	file:
encodeField_uint32	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_uint32 (std::vector<uint8_t> & Buffer, uint32_t x) {$/;"	f	file:
encodeField_uint32	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^static inline void ShadowMapIO::encodeField_uint32 (std::vector<uint8_t> & Buffer, uint32_t x) {$/;"	f	class:ShadowMapIO
encodeField_uint64	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_uint64 (std::vector<uint8_t> & Buffer, uint64_t x) {$/;"	f	file:
encodeField_uint64	SRC/Modules/Shadow-Detection/ShadowMapIO.hpp	/^static inline void ShadowMapIO::encodeField_uint64 (std::vector<uint8_t> & Buffer, uint64_t x) {$/;"	f	class:ShadowMapIO
encodeField_uint8	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^static void encodeField_uint8 (std::vector<uint8_t> & Buffer, uint8_t  x) { Buffer.push_back(x); }$/;"	f	file:
encodeHeader	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void encodeHeader(std::vector<uint8_t> & buffer, uint8_t CLASS, uint8_t ID, uint16_t PayloadLength) {$/;"	f	file:
encodePollRequest	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_MSG::encodePollRequest(std::vector<uint8_t> & UBXPacket, uint8_t msgClass, uint8_t msgID) {$/;"	f	class:UBXPacket_CFG_MSG
encodePollRequest	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_PRT::encodePollRequest(std::vector<uint8_t> & UBXPacket) {$/;"	f	class:UBXPacket_CFG_PRT
encodePollRequest	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_PRT::encodePollRequest(std::vector<uint8_t> & UBXPacket, uint8_t PortID) {$/;"	f	class:UBXPacket_CFG_PRT
encodePollRequest	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_RATE::encodePollRequest(std::vector<uint8_t> & UBXPacket) {$/;"	f	class:UBXPacket_CFG_RATE
encodePollRequest	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^void UBXPacket_MON_HW::encodePollRequest(std::vector<uint8_t> & UBXPacket) {$/;"	f	class:UBXPacket_MON_HW
encodeSet	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_MSG::encodeSet(std::vector<uint8_t> & UBXPacket, uint8_t msgClass, uint8_t msgID, uint8_t *rate) {$/;"	f	class:UBXPacket_CFG_MSG
encodeSet	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_MSG::encodeSet(std::vector<uint8_t> & UBXPacket, uint8_t msgClass, uint8_t msgID, uint8_t rate) {$/;"	f	class:UBXPacket_CFG_MSG
encodeSet	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_PRT::encodeSet(std::vector<uint8_t> & UBXPacket, uint8_t PortID, uint16_t txReady, uint32_t mode,$/;"	f	class:UBXPacket_CFG_PRT
encodeSet	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static void UBXPacket_CFG_RATE::encodeSet(std::vector<uint8_t> & UBXPacket, uint16_t measRate, uint16_t navRate, uint16_t timeRef) {$/;"	f	class:UBXPacket_CFG_RATE
endTime	SRC/TimeSeries.h	/^template <typename valueType> double timeSeries<valueType>::endTime(void) {$/;"	f	class:timeSeries
equals	SRC/Earcut.hpp	/^bool Earcut<N>::equals(const Node* p1, const Node* p2) {$/;"	f	class:mapbox::detail::Earcut
evaluateRGBAFromColormap	SRC/Maps/DataTileVizEvaluator.cpp	/^	static void evaluateRGBAFromColormap(double Value, double MinValue, double MaxValue, std::vector<std::tuple<uint8_t,uint8_t,uint8_t>> const & map,$/;"	f	namespace:Maps
evaluateRGBFromColormap	SRC/UI/TimeAvailableOverlay.cpp	/^static void evaluateRGBFromColormap(uint16_t Value, uint16_t MinValue, uint16_t MaxValue, std::vector<std::tuple<uint8_t,uint8_t,uint8_t>> const & cmap,$/;"	f	file:
fTOW	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		int32_t  fTOW  = 0;$/;"	m	class:NAVSolution	file:
factorial	SRC/UI/MapWidget.cpp	/^static uint64_t factorial(uint64_t n) { return (n == 1U || n == 0U) ? 1U : factorial(n - 1U) * n; }$/;"	f	file:
filterPoints	SRC/Earcut.hpp	/^Earcut<N>::filterPoints(Node* start, Node* end) {$/;"	f	class:mapbox::detail::Earcut
finalize	SRC/TimeSeries.h	/^template <typename valueType> void timeSeries<valueType>::finalize(void) {$/;"	f	class:timeSeries
findHoleBridge	SRC/Earcut.hpp	/^Earcut<N>::findHoleBridge(Node* hole, Node* outerNode) {$/;"	f	class:mapbox::detail::Earcut
findPose	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void findPose(std::Evector<Eigen::Vector2d>& fiducials_PX, std::Evector<Eigen::Vector3d>&fiducials_LEA, ocam_model &o, Eigen::Matrix3d &R_cam_LEA, Eigen::Vector3d &t_cam_LEA) {$/;"	f
fixStat	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint8_t  fixStat = 0U;$/;"	m	class:NAVSolution	file:
flags	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint8_t  flags   = 0U;$/;"	m	class:NAVSolution	file:
flags2	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint8_t  flags2  = 0U;$/;"	m	class:NAVSolution	file:
freqId	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<uint8_t>  freqId;$/;"	m	class:NAVSig	file:
front	SRC/TimeSeries.h	/^template <typename valueType> valueType timeSeries<valueType>::front(void) {$/;"	f	class:timeSeries
gSoloud	SRC/UI/ReconUI.hpp	/^		SoLoud::Soloud gSoloud; \/\/SoLoud engine$/;"	m	class:ReconUI
gauss_newton_refineL	SRC/Modules/Shadow-Detection/lambda_twist.h	/^	void gauss_newton_refineL(Eigen::Vector3d& L, double a12, double a13, double a23, double b12, double b13, double b23) {$/;"	f	namespace:__anon1
get	SRC/Earcut.hpp	/^    get(const T& t) { return std::get<I>(t); };$/;"	f	struct:mapbox::util::nth
getApertureMask	SRC/Modules/Shadow-Detection/shadow_utils.hpp	/^inline void getApertureMask(const cv::Mat& img, cv::Mat& mask) {$/;"	f
getBinaryCloudMask	SRC/Modules/Shadow-Detection/shadow_utils.hpp	/^inline void getBinaryCloudMask(const cv::Mat& img, cv::Mat& bright, cv::Mat& binary) {$/;"	f
getColorSubpixHelper	SRC/Modules/Shadow-Detection/calib.h	/^inline cv::Vec3b getColorSubpixHelper(const cv::Mat& img, cv::Point2d pt) {$/;"	f
getCoordsOfTileContainingPoint	SRC/Maps/MapUtils.hpp	/^inline std::tuple<int32_t, int32_t> getCoordsOfTileContainingPoint(Eigen::Vector2d const & PointNM, int32_t PyramidLevel) {$/;"	f
getInternalAngle	SRC/Polygon.cpp	/^static double getInternalAngle(Eigen::Vector2d const & A, Eigen::Vector2d const & B, Eigen::Vector2d const & C) {$/;"	f	file:
getLeadingIndexFromTimestamp	SRC/TimeSeries.h	/^template <typename valueType> unsigned int timeSeries<valueType>::getLeadingIndexFromTimestamp(double time) {$/;"	f	class:timeSeries
getLeftmost	SRC/Earcut.hpp	/^Earcut<N>::getLeftmost(Node* start) {$/;"	f	class:mapbox::detail::Earcut
getMessageClass	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static uint8_t getMessageClass(uint8_t * rawUBXPacket) {$/;"	f	file:
getMessageID	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static uint8_t getMessageID(uint8_t * rawUBXPacket) {$/;"	f	file:
getOrbRotation	SRC/Modules/Shadow-Detection/shadow_utils.hpp	/^inline void getOrbRotation(const cv::Mat& descriptors_ref, const std::vector<cv::KeyPoint>& keypoints_ref, const cv::Mat& rot_color, cv::Mat& H) {$/;"	f
getPoseInputMatrices	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void getPoseInputMatrices(std::Evector<Eigen::Vector3d>& world, std::vector<cv::Point3d>& backproj, Eigen::Matrix3d& world_vec, Eigen::Matrix3d& bearing_vec, const unsigned seed) {$/;"	f
getRefDescriptors	SRC/Modules/Shadow-Detection/shadow_utils.hpp	/^inline void getRefDescriptors(const cv::Mat& ref_color, cv::Mat& descriptors_ref, std::vector<cv::KeyPoint>& keypoints_ref){$/;"	f
getTimeByIndex	SRC/TimeSeries.h	/^template <typename valueType> double timeSeries<valueType>::getTimeByIndex(unsigned int index) {$/;"	f	class:timeSeries
getValueByIndex	SRC/TimeSeries.h	/^template <typename valueType> valueType timeSeries<valueType>::getValueByIndex(unsigned int index) {$/;"	f	class:timeSeries
getZero	SRC/TimeSeries.h	/^		static valueType getZero(void) { throw; }$/;"	f	class:timeSeries
getZero	SRC/TimeSeries.h	/^template <> inline Eigen::Vector2d timeSeries<Eigen::Vector2d>::getZero(void) { return(Eigen::Vector2d(0.0, 0.0)); }$/;"	f	class:timeSeries
getZero	SRC/TimeSeries.h	/^template <> inline Eigen::Vector3d timeSeries<Eigen::Vector3d>::getZero(void) { return(Eigen::Vector3d(0.0, 0.0, 0.0)); }$/;"	f	class:timeSeries
getZero	SRC/TimeSeries.h	/^template <> inline Eigen::Vector4d timeSeries<Eigen::Vector4d>::getZero(void) { return(Eigen::Vector4d(0.0, 0.0, 0.0, 0.0)); }$/;"	f	class:timeSeries
getZero	SRC/TimeSeries.h	/^template <> inline double          timeSeries<double>::getZero(void)          { return(0.0); }$/;"	f	class:timeSeries
get_centered_extent	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void get_centered_extent(const cv::Point3d &centroid_ECEF, const double &aperture_distance_px, const cv::Size &FINAL_SIZE, const Eigen::Matrix3d &R_cam_ENU, const Eigen::Vector3d &t_cam_ENU, const Eigen::Vector3d& t_cam_LEA, ocam_model &o, Eigen::Vector2d& center, double &max_extent) {$/;"	f
get_ocam_model	SRC/Modules/Shadow-Detection/ocam_utils.h	/^inline int get_ocam_model(struct ocam_model* myocam_model, const char* filename)$/;"	f
gnssId	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<uint8_t>  gnssId;$/;"	m	class:NAVSig	file:
gpsFix	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint8_t  gpsFix  = 0U;$/;"	m	class:NAVSolution	file:
groups	SRC/Polygon.hpp	/^    std::vector<std::vector<int>> groups;$/;"	m	class:TriangleAdjacencyMap
hAcc	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint32_t hAcc = 0U;$/;"	m	class:NAVSolution	file:
hashing	SRC/Earcut.hpp	/^    bool hashing;$/;"	m	class:mapbox::detail::Earcut
height	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	int height;        \/\/ image height$/;"	m	struct:ocam_model
heightECEF	SRC/Modules/Guidance/Guidance.cpp	29;"	d	file:
holeIndex	SRC/UI/SurveyRegionTool.hpp	/^		int holeIndex = -1; \/\/-1 for boundary, otherwise index of hole$/;"	m	struct:SurveyRegionsTool::SimplePolyAddress
holeIndex	SRC/UI/SurveyRegionTool.hpp	/^		int holeIndex = -1; \/\/-1 for boundary, otherwise index of hole$/;"	m	struct:SurveyRegionsTool::VertexAddress
i	SRC/Earcut.hpp	/^        const N i;$/;"	m	struct:mapbox::detail::Earcut::Node
iTOW	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint32_t iTOW  = 0U;$/;"	m	class:NAVSolution	file:
iTOW	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint32_t iTOW;$/;"	m	class:NAVSig	file:
id	SRC/Polygon.hpp	/^        int id;$/;"	m	struct:TriangleAdjacencyMap::Triangle
indexCurve	SRC/Earcut.hpp	/^void Earcut<N>::indexCurve(Node* start) {$/;"	f	class:mapbox::detail::Earcut
indices	SRC/Earcut.hpp	/^    std::vector<N> indices;$/;"	m	class:mapbox::detail::Earcut
initialized	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		bool initialized = false; \/\/Set to true when at least one of the above is true (and thus, iTOW is populated)$/;"	m	class:NAVSolution	file:
insertNode	SRC/Earcut.hpp	/^Earcut<N>::insertNode(std::size_t i, const Point& pt, Node* last) {$/;"	f	class:mapbox::detail::Earcut
insideColinear	SRC/Polygon.cpp	/^bool insideColinear(LineSegment const lineA, Eigen::Vector2d pointB){$/;"	f
intersects	SRC/Earcut.hpp	/^bool Earcut<N>::intersects(const Node* p1, const Node* q1, const Node* p2, const Node* q2) {$/;"	f	class:mapbox::detail::Earcut
intersectsPolygon	SRC/Earcut.hpp	/^bool Earcut<N>::intersectsPolygon(const Node* a, const Node* b) {$/;"	f	class:mapbox::detail::Earcut
inv_size	SRC/Earcut.hpp	/^    double inv_size = 0;$/;"	m	class:mapbox::detail::Earcut
invpol	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	double invpol[MAX_POL_LENGTH]; \/\/ the coefficients of the inverse polynomial$/;"	m	struct:ocam_model
ionoModel	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<uint8_t>  ionoModel;$/;"	m	class:NAVSig	file:
isAcknowledged	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static bool isAcknowledged(serial::Serial * serialDev, uint8_t MessageClass, uint8_t MessageID) {$/;"	f	file:
isChecksumGood	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^static bool isChecksumGood(uint8_t * rawUBXPacket) {$/;"	f	file:
isComplete	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		bool isComplete(void) { return (isDecoded_POSECEF && isDecoded_POSLLH && isDecoded_STATUS && isDecoded_TIMEGPS); }$/;"	f	class:NAVSolution
isDecoded_POSECEF	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		bool isDecoded_POSECEF = false;$/;"	m	class:NAVSolution	file:
isDecoded_POSLLH	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		bool isDecoded_POSLLH  = false;$/;"	m	class:NAVSolution	file:
isDecoded_STATUS	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		bool isDecoded_STATUS  = false;$/;"	m	class:NAVSolution	file:
isDecoded_TIMEGPS	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		bool isDecoded_TIMEGPS = false;$/;"	m	class:NAVSolution	file:
isEar	SRC/Earcut.hpp	/^bool Earcut<N>::isEar(Node* ear) {$/;"	f	class:mapbox::detail::Earcut
isEarHashed	SRC/Earcut.hpp	/^bool Earcut<N>::isEarHashed(Node* ear) {$/;"	f	class:mapbox::detail::Earcut
isFilenameReasonable	SRC/Utilities.hpp	/^inline bool isFilenameReasonable(std::string Filename) {$/;"	f
isSameTriangle	SRC/Polygon.cpp	/^bool Triangle::isSameTriangle(Triangle const & otherTriangle){$/;"	f	class:Triangle
isValid	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		bool isValid = false;$/;"	m	class:NAVSig	file:
isValidDiagonal	SRC/Earcut.hpp	/^bool Earcut<N>::isValidDiagonal(Node* a, Node* b) {$/;"	f	class:mapbox::detail::Earcut
keypoints_ref	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::vector<cv::KeyPoint> keypoints_ref; \/\/Computed in SetReferenceFrame()$/;"	m	class:ShadowDetection::ShadowDetectionEngine
latLon_2_C_ECEF_ENU	SRC/Maps/MapUtils.hpp	/^inline Eigen::Matrix3d latLon_2_C_ECEF_ENU(double lat, double lon) {$/;"	f
length_invpol	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	int length_invpol;             \/\/ length of inverse polynomial$/;"	m	struct:ocam_model
length_pol	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	int length_pol;                \/\/ length of polynomial$/;"	m	struct:ocam_model
linearInterpolation	SRC/TimeSeries.h	/^template <typename valueType> valueType timeSeries<valueType>::linearInterpolation(double t1, valueType const & Y1, double t2, valueType const & Y2, double t) {$/;"	f	class:timeSeries
linkedList	SRC/Earcut.hpp	/^Earcut<N>::linkedList(const Ring& points, const bool clockwise) {$/;"	f	class:mapbox::detail::Earcut
load	SRC/Polygon.hpp	/^                    load(Archive & ar, Eigen::PlainObjectBase<Derived> & m){$/;"	f	namespace:cereal
load_minimal	SRC/ProgOptions.hpp	/^	template <class Archive> void load_minimal(Archive const &, Themes::Theme & obj, std::string const & value) {$/;"	f	namespace:cereal
locallyInside	SRC/Earcut.hpp	/^bool Earcut<N>::locallyInside(const Node* a, const Node* b) {$/;"	f	class:mapbox::detail::Earcut
m_ActiveRegion	SRC/SurveyRegionManager.hpp	/^		std::unique_ptr<SurveyRegion> m_ActiveRegion;$/;"	m	class:SurveyRegionManager
m_ActiveRegionName	SRC/SurveyRegionManager.hpp	/^		std::string m_ActiveRegionName;$/;"	m	class:SurveyRegionManager
m_Alt	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_Lat, m_Lon, m_Alt; \/\/Lat (rad), Lon (rad), alt (m)$/;"	m	class:DroneInterface::SimulatedDrone
m_AtTarget2DPosition	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_AtTarget2DPosition = false;$/;"	m	struct:VehicleControlWidget::vehicleState
m_AtTargetHAG	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_AtTargetHAG = false;$/;"	m	struct:VehicleControlWidget::vehicleState
m_AtTargetState	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_AtTargetState = false;$/;"	m	struct:VehicleControlWidget::vehicleState
m_AtTargetYaw	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_AtTargetYaw = false;$/;"	m	struct:VehicleControlWidget::vehicleState
m_AutoStopOnProximityViolation	SRC/UI/CommandWidget.hpp	/^		bool  m_AutoStopOnProximityViolation = false;$/;"	m	class:CommandWidget
m_AveragedAlt	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			double m_AveragedAlt;         \/\/Running average of altitude (used for GetGroundAlt()). Updated on each valid NAV solution$/;"	m	class:GNSSReceiver::GNSSManager
m_AveragedAltAccuracy	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			double m_AveragedAltAccuracy; \/\/Updated on each valid NAV solution$/;"	m	class:GNSSReceiver::GNSSManager
m_AvoidanceZonesTool	SRC/UI/MapWidget.hpp	/^		AvoidanceZonesTool m_AvoidanceZonesTool;$/;"	m	class:MapWidget
m_CN0s	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			std::unordered_map<std::tuple<uint8_t,uint8_t>,uint8_t> m_CN0s; \/\/<GNSSID,SVID> -> C\/N0 map$/;"	m	class:GNSSReceiver::GNSSManager
m_CachePath	SRC/UI/AboutWindow.hpp	/^		std::filesystem::path m_CachePath;$/;"	m	class:AboutWindow
m_Center_NM	SRC/Maps/DataTileProvider.hpp	/^		Eigen::Vector2d m_Center_NM;$/;"	m	struct:Maps::PaintActionItem
m_CheckAvoidanceZones	SRC/UI/CommandWidget.hpp	/^		bool  m_CheckAvoidanceZones = true;$/;"	m	class:CommandWidget
m_CheckMSA	SRC/UI/CommandWidget.hpp	/^		bool  m_CheckMSA = true;$/;"	m	class:CommandWidget
m_CheckVehicleProximity	SRC/UI/CommandWidget.hpp	/^		bool  m_CheckVehicleProximity = true;$/;"	m	class:CommandWidget
m_Color	SRC/UI/ShadowMapOverlay.hpp	/^		std::array<float, 3> m_Color; \/\/Each item between 0 and 1$/;"	m	class:ShadowMapOverlay
m_DataEditThread	SRC/Maps/DataTileProvider.hpp	/^			std::thread m_DataEditThread;$/;"	m	struct:Maps::DataTileProvider
m_DroneImageCallbackHandle	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			int m_DroneImageCallbackHandle = -1;    \/\/Handle for image callback (if registered). -1 if none registered.$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_EditMode	SRC/UI/AvoidanceZonesTool.hpp	/^		int m_EditMode; \/\/0 = Draw, 1 = Erase$/;"	m	class:AvoidanceZonesTool
m_EditMode	SRC/UI/LandingZonesTool.hpp	/^		int m_EditMode; \/\/0 = Draw, 1 = Erase$/;"	m	class:LandingZonesTool
m_EditMode	SRC/UI/MSATool.hpp	/^		int m_EditMode; \/\/0 = Draw, 1 = Erase$/;"	m	class:MSATool
m_FRFEdited	SRC/Maps/DataTileProvider.hpp	/^			bool m_FRFEdited = false;$/;"	m	struct:Maps::DataTileCacheItem
m_FRFFileStore	SRC/Maps/DataTileProvider.hpp	/^			FRFTileStore * m_FRFFileStore; \/\/Pointer to the file store associated with the cache - used for write-back in destructor$/;"	m	struct:Maps::DataTileCacheItem
m_FRFFileStore	SRC/Maps/DataTileProvider.hpp	/^			FRFTileStore * m_FRFFileStore;$/;"	m	struct:Maps::DataTileProvider
m_FRFTile	SRC/Maps/DataTileProvider.hpp	/^			std::unique_ptr<FRFImage> m_FRFTile;$/;"	m	struct:Maps::DataTileCacheItem
m_FeedZoom	SRC/UI/LiveFiducialsWidget.hpp	/^		float  m_FeedZoom = 1.0f; \/\/1 = No crop, 2 = Crop to centeral 50% width and height$/;"	m	class:LiveFiducialsWidget
m_FeedZoom	SRC/UI/VehicleControlWidget.hpp	/^		float                            m_FeedZoom = 1.0f; \/\/1 = No crop, 2 = Crop to centeral 50% width and height$/;"	m	struct:VehicleControlWidget::vehicleState
m_Fiducials	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::Evector<std::tuple<Eigen::Vector2d, Eigen::Vector3d>> m_Fiducials; \/\/Set in SetFiducials() - see method for structure$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_Frame	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			cv::Mat m_Frame;                     \/\/Most recent frame$/;"	m	class:DroneInterface::SimulatedDrone
m_FrameNumber	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			unsigned int m_FrameNumber = 0U;     \/\/Frame number of most recent frame (increments on each *used* frame)$/;"	m	class:DroneInterface::SimulatedDrone
m_FrameTimestamp	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			TimePoint m_FrameTimestamp;          \/\/Timestamp of most recent frame$/;"	m	class:DroneInterface::SimulatedDrone
m_History	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::Evector<ShadowMapHistory> m_History; \/\/Record of all computed shadow maps - add new element when ref frame changes (since registration changes)$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_HomeLat	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_HomeLat, m_HomeLon;$/;"	m	class:DroneInterface::SimulatedDrone
m_HomeLon	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_HomeLat, m_HomeLon;$/;"	m	class:DroneInterface::SimulatedDrone
m_IMViewUV0OnPanStart	SRC/UI/LiveFiducialsWidget.hpp	/^		ImVec2 m_IMViewUV0OnPanStart;$/;"	m	class:LiveFiducialsWidget
m_IMViewUV0OnPanStart	SRC/UI/SimFiducialsWidget.hpp	/^		ImVec2 m_IMViewUV0OnPanStart;$/;"	m	class:SimFiducialsWidget
m_IMViewUV1OnPanStart	SRC/UI/LiveFiducialsWidget.hpp	/^		ImVec2 m_IMViewUV1OnPanStart;$/;"	m	class:LiveFiducialsWidget
m_IMViewUV1OnPanStart	SRC/UI/SimFiducialsWidget.hpp	/^		ImVec2 m_IMViewUV1OnPanStart;$/;"	m	class:SimFiducialsWidget
m_IconTexture_Drone	SRC/UI/VehicleControlWidget.hpp	/^		ImTextureID m_IconTexture_Drone;$/;"	m	class:VehicleControlWidget
m_IconTexture_DroneWithArrow	SRC/UI/VehicleControlWidget.hpp	/^		ImTextureID m_IconTexture_DroneWithArrow;$/;"	m	class:VehicleControlWidget
m_IconTexture_Emergency	SRC/UI/CommandWidget.hpp	/^		ImTextureID m_IconTexture_Emergency;$/;"	m	class:CommandWidget
m_IconTexture_HighlightedDrone	SRC/UI/VehicleControlWidget.hpp	/^		ImTextureID m_IconTexture_HighlightedDrone;$/;"	m	class:VehicleControlWidget
m_IconTexture_HighlightedDroneWithArrow	SRC/UI/VehicleControlWidget.hpp	/^		ImTextureID m_IconTexture_HighlightedDroneWithArrow;$/;"	m	class:VehicleControlWidget
m_IconTexture_Laptop	SRC/UI/MapWidget.hpp	/^		ImTextureID m_IconTexture_Laptop;$/;"	m	class:MapWidget
m_IconTexture_Mission	SRC/UI/CommandWidget.hpp	/^		ImTextureID m_IconTexture_Mission;$/;"	m	class:CommandWidget
m_IconTexture_Watchdog	SRC/UI/CommandWidget.hpp	/^		ImTextureID m_IconTexture_Watchdog;$/;"	m	class:CommandWidget
m_Image	SRC/UI/LiveFiducialsWidget.hpp	/^		cv::Mat                          m_Image;$/;"	m	class:LiveFiducialsWidget
m_ImageProviderDrone	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			DroneInterface::Drone * m_ImageProviderDrone = nullptr; \/\/Pointer to image provider drone$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_ImageProviderDroneSerial	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::string m_ImageProviderDroneSerial; \/\/Empty if none$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_Image_Tex	SRC/UI/LiveFiducialsWidget.hpp	/^		ImTextureID                      m_Image_Tex;$/;"	m	class:LiveFiducialsWidget
m_Image_TexValid	SRC/UI/LiveFiducialsWidget.hpp	/^		bool                             m_Image_TexValid = false;$/;"	m	class:LiveFiducialsWidget
m_Image_Timestamp	SRC/UI/LiveFiducialsWidget.hpp	/^		DroneInterface::Drone::TimePoint m_Image_Timestamp;$/;"	m	class:LiveFiducialsWidget
m_Image_mutex	SRC/UI/LiveFiducialsWidget.hpp	/^		std::mutex                       m_Image_mutex;$/;"	m	class:LiveFiducialsWidget
m_ImageryCallbackHandle	SRC/UI/LiveFiducialsWidget.hpp	/^		int m_ImageryCallbackHandle = -1;$/;"	m	class:LiveFiducialsWidget
m_ImageryCallbacks	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::unordered_map<int, std::function<void(cv::Mat const & Frame, TimePoint const & Timestamp)>> m_ImageryCallbacks;$/;"	m	class:DroneInterface::SimulatedDrone
m_ImageryCallbacks	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		std::unordered_map<int, std::function<void(cv::Mat const & Frame, TimePoint const & Timestamp)>> m_ImageryCallbacks;$/;"	m	class:DroneInterface::RealDrone
m_ImagingReqs	SRC/Modules/Guidance/Guidance.hpp	/^			ImagingRequirements m_ImagingReqs;$/;"	m	class:Guidance::GuidanceEngine
m_LandingZonesTool	SRC/UI/MapWidget.hpp	/^		LandingZonesTool m_LandingZonesTool;$/;"	m	class:MapWidget
m_LastCommandWasHover	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_LastCommandWasHover = false;$/;"	m	struct:VehicleControlWidget::vehicleState
m_LastEditTime	SRC/Maps/DataTileProvider.hpp	/^			TimePoint m_LastEditTime;$/;"	m	struct:Maps::DataTileCacheItem
m_LastMission	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			WaypointMission m_LastMission;       \/\/A copy of the last waypoint mission uploaded to the drone$/;"	m	class:DroneInterface::SimulatedDrone
m_LastPoseUpdate	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			TimePoint m_LastPoseUpdate;$/;"	m	class:DroneInterface::SimulatedDrone
m_LastVSCommand_ModeA	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			VirtualStickCommand_ModeA m_LastVSCommand_ModeA;$/;"	m	class:DroneInterface::SimulatedDrone
m_LastVSCommand_ModeA_Timestamp	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			TimePoint m_LastVSCommand_ModeA_Timestamp;$/;"	m	class:DroneInterface::SimulatedDrone
m_LastVSCommand_ModeB	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			VirtualStickCommand_ModeB m_LastVSCommand_ModeB;$/;"	m	class:DroneInterface::SimulatedDrone
m_LastVSCommand_ModeB_Timestamp	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			TimePoint m_LastVSCommand_ModeB_Timestamp;$/;"	m	class:DroneInterface::SimulatedDrone
m_Lat	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_Lat, m_Lon, m_Alt; \/\/Lat (rad), Lon (rad), alt (m)$/;"	m	class:DroneInterface::SimulatedDrone
m_LatBounds	SRC/UI/ModalDialogs.hpp	/^		Eigen::Vector2d m_LatBounds;$/;"	m	class:NewBookmarkDialog
m_LengthX	SRC/Maps/DataTileProvider.hpp	/^		double m_LengthX; \/\/Meters$/;"	m	struct:Maps::PaintActionItem
m_LengthY	SRC/Maps/DataTileProvider.hpp	/^		double m_LengthY; \/\/Meters$/;"	m	struct:Maps::PaintActionItem
m_Lon	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_Lat, m_Lon, m_Alt; \/\/Lat (rad), Lon (rad), alt (m)$/;"	m	class:DroneInterface::SimulatedDrone
m_LonBounds	SRC/UI/ModalDialogs.hpp	/^		Eigen::Vector2d m_LonBounds;$/;"	m	class:NewBookmarkDialog
m_MSATool	SRC/UI/MapWidget.hpp	/^		MSATool m_MSATool;$/;"	m	class:MapWidget
m_MainThread	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::thread       m_MainThread;$/;"	m	class:DroneInterface::SimulatedDrone
m_MessageToken	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			int m_MessageToken;$/;"	m	class:DroneInterface::DroneManager
m_MessageToken	SRC/UI/SurveyRegionTool.hpp	/^		int m_MessageToken;$/;"	m	class:SurveyRegionsTool
m_MessageToken1	SRC/Modules/Guidance/Guidance.hpp	/^			int               m_MessageToken1;$/;"	m	class:Guidance::GuidanceEngine
m_MessageToken2	SRC/Modules/Guidance/Guidance.hpp	/^			int               m_MessageToken2;$/;"	m	class:Guidance::GuidanceEngine
m_MessageToken3	SRC/Modules/Guidance/Guidance.hpp	/^			int               m_MessageToken3;$/;"	m	class:Guidance::GuidanceEngine
m_Missions	SRC/UI/GuidanceOverlay.hpp	/^		std::vector<DroneInterface::WaypointMission> m_Missions;$/;"	m	class:GuidanceOverlay
m_MostRecentFrame	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		cv::Mat                  m_MostRecentFrame;$/;"	m	class:DroneInterface::RealDrone
m_Name	SRC/SurveyRegionManager.hpp	/^		std::string m_Name;                     \/\/This defines the name of the file the object is saved to and read from$/;"	m	class:SurveyRegion
m_NextFrame	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			cv::Mat           m_NextFrame;                     \/\/Protected by m_NextFrameMutex$/;"	m	class:DroneInterface::SimulatedDrone
m_NextFrameMutex	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::mutex        m_NextFrameMutex;$/;"	m	class:DroneInterface::SimulatedDrone
m_NextFrameReady	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool              m_NextFrameReady = false;        \/\/Protected by m_NextFrameMutex$/;"	m	class:DroneInterface::SimulatedDrone
m_Opacity	SRC/UI/ShadowMapOverlay.hpp	/^		float m_Opacity; \/\/0-100$/;"	m	class:ShadowMapOverlay
m_Opacity	SRC/UI/TimeAvailableOverlay.hpp	/^		float m_Opacity; \/\/0-100$/;"	m	class:TimeAvailableOverlay
m_PID	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint8_t  m_PID;  \/\/Only valid when M_highLevelFieldsValid = true$/;"	m	class:DroneInterface::Packet
m_PacketTimestamp_ct	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		TimePoint                m_PacketTimestamp_ct;$/;"	m	class:DroneInterface::RealDrone
m_PacketTimestamp_et	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		TimePoint                m_PacketTimestamp_et;$/;"	m	class:DroneInterface::RealDrone
m_PacketTimestamp_imagery	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		TimePoint                m_PacketTimestamp_imagery;$/;"	m	class:DroneInterface::RealDrone
m_PartitionLabels	SRC/UI/GuidanceOverlay.hpp	/^		std::vector<std::string>             m_PartitionLabels;$/;"	m	class:GuidanceOverlay
m_RTL_HAG	SRC/UI/VehicleControlWidget.hpp	/^		float                            m_RTL_HAG = 0.0f; \/\/Should be set before starting RTL sequence$/;"	m	struct:VehicleControlWidget::vehicleState
m_RTL_NumFlyingDrones	SRC/UI/VehicleControlWidget.hpp	/^		int m_RTL_NumFlyingDrones = -1; \/\/Used to track RTL progress (only accessed in control thread)$/;"	m	class:VehicleControlWidget
m_RTL_State	SRC/UI/VehicleControlWidget.hpp	/^		std::atomic<int> m_RTL_State = -1; \/\/-1 = off, 0 = start RTL (goto RTL_HAG), 1 = 2D Go home, 2 = Drop target drone HAG, 3 = land target drone$/;"	m	class:VehicleControlWidget
m_Radius_meters	SRC/Maps/DataTileProvider.hpp	/^		double m_Radius_meters;$/;"	m	struct:Maps::PaintActionItem
m_RefFrame	SRC/UI/SimFiducialsWidget.hpp	/^		cv::Mat m_RefFrame;$/;"	m	class:SimFiducialsWidget
m_RefFrameTex	SRC/UI/SimFiducialsWidget.hpp	/^		ImTextureID m_RefFrameTex;$/;"	m	class:SimFiducialsWidget
m_ReferenceFrame	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			cv::Mat m_ReferenceFrame;  \/\/Computed in SetReferenceFrame()$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_Region	SRC/SurveyRegionManager.hpp	/^		PolygonCollection m_Region;             \/\/NM coordinates$/;"	m	class:SurveyRegion
m_Sequences	SRC/UI/GuidanceOverlay.hpp	/^		std::vector<std::vector<int>> m_Sequences;$/;"	m	class:GuidanceOverlay
m_ShadowMap	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			InstantaneousShadowMap m_ShadowMap; \/\/Shadow map based on most recently processed frame$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_SurveyRegionPartition	SRC/UI/GuidanceOverlay.hpp	/^		std::Evector<PolygonCollection>      m_SurveyRegionPartition;$/;"	m	class:GuidanceOverlay
m_SurveyRegionPartitionTriangulation	SRC/UI/GuidanceOverlay.hpp	/^		std::Evector<std::Evector<Triangle>> m_SurveyRegionPartitionTriangulation;$/;"	m	class:GuidanceOverlay
m_SurveyRegionsTool	SRC/UI/MapWidget.hpp	/^		SurveyRegionsTool m_SurveyRegionsTool;$/;"	m	class:MapWidget
m_TAOverlay	SRC/UI/MapWidget.hpp	/^		TimeAvailableOverlay m_TAOverlay;$/;"	m	class:MapWidget
m_Tex	SRC/UI/VehicleControlWidget.hpp	/^		ImTextureID                      m_Tex;$/;"	m	struct:VehicleControlWidget::vehicleState
m_TexHeight	SRC/UI/VehicleControlWidget.hpp	/^		float                            m_TexHeight;$/;"	m	struct:VehicleControlWidget::vehicleState
m_TexTimestamp	SRC/UI/VehicleControlWidget.hpp	/^		DroneInterface::Drone::TimePoint m_TexTimestamp;$/;"	m	struct:VehicleControlWidget::vehicleState
m_TexValid	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_TexValid = false;$/;"	m	struct:VehicleControlWidget::vehicleState
m_TexWidth	SRC/UI/VehicleControlWidget.hpp	/^		float                            m_TexWidth;$/;"	m	struct:VehicleControlWidget::vehicleState
m_Texmutex	SRC/UI/VehicleControlWidget.hpp	/^		std::mutex                       m_Texmutex;$/;"	m	struct:VehicleControlWidget::vehicleState
m_TextureID	SRC/Maps/DataTileProvider.hpp	/^			ImTextureID m_TextureID;$/;"	m	struct:Maps::DataTileCacheItem
m_Theta	SRC/Maps/DataTileProvider.hpp	/^		double m_Theta;   \/\/Radians$/;"	m	struct:Maps::PaintActionItem
m_TilesWithcurrentVizEvalJobs	SRC/Maps/DataTileProvider.hpp	/^			std::unordered_set<Tile> m_TilesWithcurrentVizEvalJobs; \/\/Just a set of Tile keys - we only allow one job per tile in queue at once$/;"	m	struct:Maps::DataTileProvider
m_TimeAtWhichWeReachedTargetState	SRC/UI/VehicleControlWidget.hpp	/^		DroneInterface::Drone::TimePoint m_TimeAtWhichWeReachedTargetState;$/;"	m	struct:VehicleControlWidget::vehicleState
m_TimeAvail	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			TimeAvailableFunction m_TimeAvail; \/\/Most recent time available function$/;"	m	class:ShadowPropagation::ShadowPropagationEngine
m_TimeAvailableTexture	SRC/UI/TimeAvailableOverlay.hpp	/^		ImTextureID m_TimeAvailableTexture;$/;"	m	class:TimeAvailableOverlay
m_TimestampOfLastFPSReport	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		TimePoint                m_TimestampOfLastFPSReport;$/;"	m	class:DroneInterface::RealDrone
m_TriangleLabels	SRC/UI/GuidanceOverlay.hpp	/^		std::vector<std::string> m_TriangleLabels;$/;"	m	class:GuidanceOverlay
m_Triangles	SRC/UI/GuidanceOverlay.hpp	/^		std::Evector<Triangle>   m_Triangles;$/;"	m	class:GuidanceOverlay
m_UserDataPath	SRC/UI/AboutWindow.hpp	/^		std::filesystem::path m_UserDataPath;$/;"	m	class:AboutWindow
m_V_Down	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_V_North, m_V_East, m_V_Down; \/\/NED velocity$/;"	m	class:DroneInterface::SimulatedDrone
m_V_East	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_V_North, m_V_East, m_V_Down; \/\/NED velocity$/;"	m	class:DroneInterface::SimulatedDrone
m_V_North	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_V_North, m_V_East, m_V_Down; \/\/NED velocity$/;"	m	class:DroneInterface::SimulatedDrone
m_Value	SRC/Maps/DataTileProvider.hpp	/^		double m_Value; \/\/NaN for erase action$/;"	m	struct:Maps::PaintActionItem
m_VideoFeedStartTimestamp	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			TimePoint m_VideoFeedStartTimestamp; \/\/Timestamp of start of video feed$/;"	m	class:DroneInterface::SimulatedDrone
m_VideoFileReadFinished	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool              m_VideoFileReadFinished = false; \/\/Protected by m_NextFrameMutex$/;"	m	class:DroneInterface::SimulatedDrone
m_VideoProcessingThread	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::thread       m_VideoProcessingThread;$/;"	m	class:DroneInterface::SimulatedDrone
m_VideoProcessingThreadAbort	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::atomic<bool> m_VideoProcessingThreadAbort;$/;"	m	class:DroneInterface::SimulatedDrone
m_VizEvalTime	SRC/Maps/DataTileProvider.hpp	/^			TimePoint m_VizEvalTime;$/;"	m	struct:Maps::DataTileCacheItem
m_VizKey	SRC/Maps/DataTileProvider.hpp	/^			VizualizationTileKey m_VizKey;$/;"	m	struct:Maps::DataTileCacheItem
m_abort	SRC/Maps/DataTileProvider.hpp	/^			std::atomic_bool m_abort; \/\/Set to True to signal to secondary threads that it's time to wrap things up.$/;"	m	struct:Maps::DataTileProvider
m_abort	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::atomic<bool> m_abort;$/;"	m	class:DroneInterface::SimulatedDrone
m_abort	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			std::atomic<bool> m_abort;$/;"	m	class:DroneInterface::DroneManager
m_abort	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			std::atomic<bool> m_abort;$/;"	m	class:GNSSReceiver::GNSSManager
m_abort	SRC/Modules/Guidance/Guidance.hpp	/^			std::atomic<bool> m_abort;$/;"	m	class:Guidance::GuidanceEngine
m_abort	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::atomic<bool> m_abort;$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_abort	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			std::atomic<bool> m_abort;$/;"	m	class:ShadowPropagation::ShadowPropagationEngine
m_abort	SRC/UI/TextureUploadFlowRestrictor.hpp	/^		bool m_abort = false;$/;"	m	class:TextureUploadFlowRestrictor
m_actionQueue	SRC/Maps/DataTileProvider.hpp	/^			std::Edeque<PaintActionItem> m_actionQueue; \/\/Push to back and pop from front$/;"	m	struct:Maps::DataTileProvider
m_angleDeg	SRC/UI/AvoidanceZonesTool.hpp	/^		float m_angleDeg; \/\/in degrees (special exception so ImGui can expose in degrees without a conversion)$/;"	m	class:AvoidanceZonesTool
m_angleDeg	SRC/UI/LandingZonesTool.hpp	/^		float m_angleDeg; \/\/in degrees (special exception so ImGui can expose in degrees without a conversion)$/;"	m	class:LandingZonesTool
m_angleDeg	SRC/UI/MSATool.hpp	/^		float m_angleDeg; \/\/in degrees (special exception so ImGui can expose in degrees without a conversion)$/;"	m	class:MSATool
m_arrivalAtWaypoint_Timestamp	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			TimePoint m_arrivalAtWaypoint_Timestamp;$/;"	m	class:DroneInterface::SimulatedDrone
m_autoYawOnMove	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_autoYawOnMove = true;$/;"	m	struct:VehicleControlWidget::vehicleState
m_battLevel	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_battLevel;$/;"	m	class:DroneInterface::SimulatedDrone
m_bookmarkIndex	SRC/UI/ModalDialogs.hpp	/^		size_t m_bookmarkIndex = 0U;$/;"	m	class:DeleteBookmarkDialog
m_boundary	SRC/Polygon.hpp	/^    SimplePolygon m_boundary;$/;"	m	class:Polygon
m_buffer	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		std::vector<uint8_t>     m_buffer;$/;"	m	class:DroneInterface::RealDrone
m_cache	SRC/Maps/DataTileProvider.hpp	/^			std::unordered_map<Tile, DataTileCacheItem> m_cache;$/;"	m	struct:Maps::DataTileProvider
m_cacheFile	SRC/Maps/SatelliteCacheMaster.hpp	/^		CacheFile    * m_cacheFile;$/;"	m	class:Maps::SatelliteCacheMaster
m_cacheMem	SRC/Maps/SatelliteCacheMaster.hpp	/^		CacheMem     * m_cacheMem;$/;"	m	class:Maps::SatelliteCacheMaster
m_cache_mtx	SRC/Maps/DataTileProvider.hpp	/^			std::mutex m_cache_mtx;$/;"	m	struct:Maps::DataTileProvider
m_callbackHandle	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			int               m_callbackHandle; \/\/Handle for this objects shadow detection engine callback$/;"	m	class:ShadowPropagation::ShadowPropagationEngine
m_callbackHandle	SRC/UI/ShadowMapOverlay.hpp	/^		int m_callbackHandle;$/;"	m	class:ShadowMapOverlay
m_callbackHandle	SRC/UI/TimeAvailableOverlay.hpp	/^		int m_callbackHandle;$/;"	m	class:TimeAvailableOverlay
m_callbackHandle	SRC/UI/VehicleControlWidget.hpp	/^		int                              m_callbackHandle = -1; \/\/-1 if not registered$/;"	m	struct:VehicleControlWidget::vehicleState
m_callbacks	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::unordered_map<int, std::function<void(InstantaneousShadowMap const & ShadowMap)>> m_callbacks;$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_callbacks	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			std::unordered_map<int, std::function<void(TimeAvailableFunction const & TA)>> m_callbacks;$/;"	m	class:ShadowPropagation::ShadowPropagationEngine
m_client	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		tacopie::tcp_client *    m_client;$/;"	m	class:DroneInterface::RealDrone
m_completedDroneMissions	SRC/Modules/Guidance/Guidance.hpp	/^			std::vector<DroneInterface::WaypointMission> m_completedDroneMissions;$/;"	m	class:Guidance::GuidanceEngine
m_components	SRC/Polygon.hpp	/^    std::Evector<Polygon> m_components;$/;"	m	class:PolygonCollection
m_controlThread	SRC/UI/VehicleControlWidget.hpp	/^		std::thread       m_controlThread;$/;"	m	class:VehicleControlWidget
m_controlThreadAbort	SRC/UI/VehicleControlWidget.hpp	/^		std::atomic<bool> m_controlThreadAbort = false;$/;"	m	class:VehicleControlWidget
m_currentDroneMissions	SRC/Modules/Guidance/Guidance.hpp	/^			std::unordered_map<std::string, std::tuple<int, DroneInterface::WaypointMission>> m_currentDroneMissions; \/\/Serial -> (missionNum, Mission)$/;"	m	class:Guidance::GuidanceEngine
m_currentDroneSerials	SRC/UI/VehicleControlWidget.hpp	/^		std::vector<std::string> m_currentDroneSerials; \/\/Updated in Draw()$/;"	m	class:VehicleControlWidget
m_currentWaypointMission	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		WaypointMission          m_currentWaypointMission;$/;"	m	class:DroneInterface::RealDrone
m_cv	SRC/UI/TextureUploadFlowRestrictor.hpp	/^		std::condition_variable m_cv;$/;"	m	class:TextureUploadFlowRestrictor
m_data	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			std::vector<uint8_t> m_data; \/\/Buffer containing the full serialized packet$/;"	m	class:DroneInterface::Packet
m_datasetPath	SRC/UI/SimFiducialsWidget.hpp	/^		std::filesystem::path m_datasetPath;$/;"	m	class:SimFiducialsWidget
m_datasetSelected	SRC/UI/SimFiducialsWidget.hpp	/^		bool m_datasetSelected = false;$/;"	m	class:SimFiducialsWidget
m_drawableNames	SRC/UI/Drawable.hpp	/^		std::unordered_set<std::string> m_drawableNames;$/;"	m	class:DrawableHost
m_drawables	SRC/UI/Drawable.hpp	/^		std::vector<Drawable *> m_drawables;$/;"	m	class:DrawableHost
m_drone	SRC/UI/LiveFiducialsWidget.hpp	/^		DroneInterface::Drone * m_drone = nullptr;$/;"	m	class:LiveFiducialsWidget
m_droneMissions	SRC/Modules/Guidance/Guidance.hpp	/^			std::vector<DroneInterface::WaypointMission> m_droneMissions;$/;"	m	class:Guidance::GuidanceEngine
m_droneRealHoldingPool	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			std::vector<RealDrone *> m_droneRealHoldingPool; \/\/Stores real drones that aren't advertising themselves as ready yet$/;"	m	class:DroneInterface::DroneManager
m_droneRealVector	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			std::vector<RealDrone *> m_droneRealVector; \/\/ For storing the handles for the tcp_client, one unique client per drone$/;"	m	class:DroneInterface::DroneManager
m_droneStartPositions	SRC/Modules/Guidance/Guidance.hpp	/^			std::vector<DroneInterface::Waypoint> m_droneStartPositions;$/;"	m	class:Guidance::GuidanceEngine
m_dronesAndStatesMutex	SRC/UI/VehicleControlWidget.hpp	/^		std::mutex m_dronesAndStatesMutex; \/\/Protects fields in this block$/;"	m	class:VehicleControlWidget
m_dronesToTask	SRC/Modules/Guidance/Guidance.hpp	/^			bool m_dronesToTask;$/;"	m	class:Guidance::GuidanceEngine
m_dronesUnderCommand	SRC/Modules/Guidance/Guidance.hpp	/^			std::vector<DroneInterface::Drone *> m_dronesUnderCommand; \/\/pointers to the drones we are allowed to command for current mission$/;"	m	class:Guidance::GuidanceEngine
m_editNodeAddress	SRC/UI/SurveyRegionTool.hpp	/^		VertexAddress m_editNodeAddress;$/;"	m	class:SurveyRegionsTool
m_editPolyLine_NM	SRC/UI/SurveyRegionTool.hpp	/^		std::Evector<Eigen::Vector2d> m_editPolyLine_NM; \/\/When dragging or creating new object, this is the working copy of the simple polygon under edit$/;"	m	class:SurveyRegionsTool
m_editStream_mtx	SRC/Maps/DataTileProvider.hpp	/^			std::mutex m_editStream_mtx;$/;"	m	struct:Maps::DataTileProvider
m_endpoint1	SRC/Polygon.hpp	/^    Eigen::Vector2d m_endpoint1;$/;"	m	class:LineSegment
m_endpoint2	SRC/Polygon.hpp	/^    Eigen::Vector2d m_endpoint2;$/;"	m	class:LineSegment
m_engineThread	SRC/Modules/Guidance/Guidance.hpp	/^			std::thread       m_engineThread;$/;"	m	class:Guidance::GuidanceEngine
m_engineThread	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::thread       m_engineThread;$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_engineThread	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			std::thread       m_engineThread;$/;"	m	class:ShadowPropagation::ShadowPropagationEngine
m_failedRequests	SRC/Maps/WebRetriever.hpp	/^			std::unordered_map<std::tuple<Tile,SatelliteSource>, std::chrono::steady_clock::time_point> m_failedRequests;$/;"	m	class:Maps::WebRetriever
m_fiducialCoordStrings	SRC/UI/LiveFiducialsWidget.hpp	/^		std::vector<std::tuple<std::string, std::string, std::string>> m_fiducialCoordStrings; \/\/Lat (deg), Lon (deg), Alt (m)$/;"	m	class:LiveFiducialsWidget
m_fiducialCoordStrings	SRC/UI/SimFiducialsWidget.hpp	/^		std::vector<std::tuple<std::string, std::string, std::string>> m_fiducialCoordStrings; \/\/Lat (deg), Lon (deg), Alt (m)$/;"	m	class:SimFiducialsWidget
m_fiducials	SRC/UI/LiveFiducialsWidget.hpp	/^		std::Evector<std::tuple<std::string, Eigen::Vector2d>> m_fiducials; \/\/<Name, PixCoords>, where PixCoords = (col, row)$/;"	m	class:LiveFiducialsWidget
m_fiducials	SRC/UI/SimFiducialsWidget.hpp	/^		std::Evector<std::tuple<std::string, Eigen::Vector2d>> m_fiducials; \/\/<Name, PixCoords>, where PixCoords = (col, row)$/;"	m	class:SimFiducialsWidget
m_file	SRC/Maps/CacheFile.hpp	/^			SimpleKVStore     * m_file     = nullptr;$/;"	m	class:Maps::CacheFile
m_file	SRC/Maps/FRFTileStore.hpp	/^			SimpleKVStore    * m_file     = nullptr;$/;"	m	class:Maps::FRFTileStore
m_fileStream	SRC/Journal.h	/^		std::ofstream m_fileStream;$/;"	m	class:Journal
m_firstDrawPass	SRC/UI/LiveFiducialsWidget.hpp	/^		bool m_firstDrawPass = true; \/\/Used to set column widths in first draw pass$/;"	m	class:LiveFiducialsWidget
m_firstDrawPass	SRC/UI/SimFiducialsWidget.hpp	/^		bool m_firstDrawPass = true; \/\/Used to set column widths in first draw pass$/;"	m	class:SimFiducialsWidget
m_flightMode	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			int m_flightMode = 0;                \/\/-1=Other, 0=On Ground, 1=P, 2=Waypoint, 3=VirtualStick_A, 4=VirtualStick_B, 5=Takeoff, 6=Landing, 7=RTH$/;"	m	class:DroneInterface::SimulatedDrone
m_flightMode_LastPass	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			int m_flightMode_LastPass = 0;       \/\/State on last call to UpdateDronePose()$/;"	m	class:DroneInterface::SimulatedDrone
m_flyAtDeck	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_flyAtDeck = false; \/\/When true fly at min safe altitude (overrides m_targetHAGFeet)$/;"	m	struct:VehicleControlWidget::vehicleState
m_flyingMissionStatus	SRC/Modules/Guidance/Guidance.hpp	/^			std::vector<bool> m_flyingMissionStatus;$/;"	m	class:Guidance::GuidanceEngine
m_frame_num	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		int                      m_frame_num = -1;$/;"	m	class:DroneInterface::RealDrone
m_garbageCollectionThread	SRC/Maps/DataTileProvider.hpp	/^			std::thread m_garbageCollectionThread;$/;"	m	struct:Maps::DataTileProvider
m_garbageCollectionThread	SRC/Maps/SatelliteCacheMaster.hpp	/^		std::thread m_garbageCollectionThread;$/;"	m	class:Maps::SatelliteCacheMaster
m_garbageCollectionThreadAbort	SRC/Maps/SatelliteCacheMaster.hpp	/^		std::atomic_bool m_garbageCollectionThreadAbort; \/\/When true, the garbage collection thread will finish up and return$/;"	m	class:Maps::SatelliteCacheMaster
m_gcpIndexBeingDragged	SRC/UI/LiveFiducialsWidget.hpp	/^		int m_gcpIndexBeingDragged = -1;$/;"	m	class:LiveFiducialsWidget
m_gcpIndexBeingDragged	SRC/UI/SimFiducialsWidget.hpp	/^		int m_gcpIndexBeingDragged = -1;$/;"	m	class:SimFiducialsWidget
m_groundAlt	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_groundAlt; \/\/(m)$/;"	m	class:DroneInterface::SimulatedDrone
m_guidanceOverlay	SRC/UI/MapWidget.hpp	/^		GuidanceOverlay m_guidanceOverlay;$/;"	m	class:MapWidget
m_hazard	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_hazard = false; \/\/True if in hazardous state$/;"	m	struct:VehicleControlWidget::vehicleState
m_holes	SRC/Polygon.hpp	/^    std::Evector<SimplePolygon> m_holes; \/\/Holes may not overlap and they must be completely within the outer boundary$/;"	m	class:Polygon
m_imageFeedActive	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool m_imageFeedActive = false;$/;"	m	class:DroneInterface::SimulatedDrone
m_indexOfDroneUnderDrag	SRC/UI/VehicleControlWidget.hpp	/^		int m_indexOfDroneUnderDrag = -1;$/;"	m	class:VehicleControlWidget
m_indexOfDroneWithContextMenuOpen	SRC/UI/VehicleControlWidget.hpp	/^		int m_indexOfDroneWithContextMenuOpen = -1;$/;"	m	class:VehicleControlWidget
m_isConnected	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		std::atomic<bool> m_isConnected;$/;"	m	class:DroneInterface::RealDrone
m_isDead	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool                     m_isDead = false; \/\/Set to true after possessing another object. Can be destroyed safely.$/;"	m	class:DroneInterface::RealDrone
m_lastNAV_SIG_Timestamp	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			TimePoint m_lastNAV_SIG_Timestamp;$/;"	m	class:GNSSReceiver::GNSSManager
m_lastSolution_Timestamp	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			TimePoint       m_lastSolution_Timestamp; \/\/Updated only when the NAV solution is valid$/;"	m	class:GNSSReceiver::GNSSManager
m_lastTouch	SRC/Maps/DataTileProvider.hpp	/^			TimePoint m_lastTouch; \/\/Last time this item was accessed in any way$/;"	m	struct:Maps::DataTileCacheItem
m_layer	SRC/Maps/DataTileProvider.hpp	/^		DataLayer m_layer;$/;"	m	struct:Maps::PaintActionItem
m_lengthX	SRC/UI/AvoidanceZonesTool.hpp	/^		float m_lengthX;  \/\/in meters$/;"	m	class:AvoidanceZonesTool
m_lengthX	SRC/UI/LandingZonesTool.hpp	/^		float m_lengthX;  \/\/in meters$/;"	m	class:LandingZonesTool
m_lengthX	SRC/UI/MSATool.hpp	/^		float m_lengthX;  \/\/in meters$/;"	m	class:MSATool
m_lengthY	SRC/UI/AvoidanceZonesTool.hpp	/^		float m_lengthY;  \/\/in meters$/;"	m	class:AvoidanceZonesTool
m_lengthY	SRC/UI/LandingZonesTool.hpp	/^		float m_lengthY;  \/\/in meters$/;"	m	class:LandingZonesTool
m_lengthY	SRC/UI/MSATool.hpp	/^		float m_lengthY;  \/\/in meters$/;"	m	class:MSATool
m_lineBuffer	SRC/UI/ConsoleWidget.hpp	/^	std::string m_lineBuffer;$/;"	m	class:ConsoleWidget
m_managerThread	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			std::thread m_managerThread;$/;"	m	class:DroneInterface::DroneManager
m_managerThread	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			std::thread       m_managerThread;$/;"	m	class:GNSSReceiver::GNSSManager
m_messageBoxOverlay	SRC/UI/MapWidget.hpp	/^		MessageBoxOverlay m_messageBoxOverlay;$/;"	m	class:MapWidget
m_messageToken	SRC/UI/VehicleControlWidget.hpp	/^		int m_messageToken = -1;$/;"	m	class:VehicleControlWidget
m_messages	SRC/UI/MessageBoxOverlay.hpp	/^		std::unordered_map<int, std::string> m_messages;$/;"	m	class:MessageBoxOverlay
m_missionHAG_Feet	SRC/UI/CommandWidget.hpp	/^		float m_missionHAG_Feet = 150.0f;$/;"	m	class:CommandWidget
m_missionLowFlierHFOV_Deg	SRC/UI/CommandWidget.hpp	/^		float m_missionLowFlierHFOV_Deg = 35.0f;$/;"	m	class:CommandWidget
m_missionPrepDone	SRC/Modules/Guidance/Guidance.hpp	/^			bool m_missionPrepDone;$/;"	m	class:Guidance::GuidanceEngine
m_missionSidelapPercentage	SRC/UI/CommandWidget.hpp	/^		float m_missionSidelapPercentage = 75.0f;$/;"	m	class:CommandWidget
m_missionSpeed_mph	SRC/UI/CommandWidget.hpp	/^		float m_missionSpeed_mph = 33.6f;$/;"	m	class:CommandWidget
m_modalTextBuf	SRC/UI/ModalDialogs.hpp	/^		char m_modalTextBuf[m_modalTextBufSize];$/;"	m	class:NewBookmarkDialog
m_modalTextBufSize	SRC/UI/ModalDialogs.hpp	/^		static size_t constexpr m_modalTextBufSize = 1000U;$/;"	m	class:NewBookmarkDialog
m_modalTextBufSize	SRC/UI/ModalDialogs.hpp	/^		static size_t constexpr m_modalTextBufSize = 1000U;$/;"	m	class:ZoomToCoordsDialog
m_modalTextBuf_Lat	SRC/UI/ModalDialogs.hpp	/^		char m_modalTextBuf_Lat[m_modalTextBufSize];$/;"	m	class:ZoomToCoordsDialog
m_modalTextBuf_Lon	SRC/UI/ModalDialogs.hpp	/^		char m_modalTextBuf_Lon[m_modalTextBufSize];$/;"	m	class:ZoomToCoordsDialog
m_mousePosOnPanStart_ScreenSpace	SRC/UI/LiveFiducialsWidget.hpp	/^		ImVec2 m_mousePosOnPanStart_ScreenSpace;$/;"	m	class:LiveFiducialsWidget
m_mousePosOnPanStart_ScreenSpace	SRC/UI/SimFiducialsWidget.hpp	/^		ImVec2 m_mousePosOnPanStart_ScreenSpace;$/;"	m	class:SimFiducialsWidget
m_mtx	SRC/UI/TextureUploadFlowRestrictor.hpp	/^		std::mutex m_mtx;$/;"	m	class:TextureUploadFlowRestrictor
m_mtx_TilesWithcurrentVizEvalJobs	SRC/Maps/DataTileProvider.hpp	/^			std::mutex m_mtx_TilesWithcurrentVizEvalJobs;$/;"	m	struct:Maps::DataTileProvider
m_mutex	SRC/Journal.h	/^		std::mutex m_mutex;$/;"	m	class:Journal
m_mutex	SRC/Maps/CacheMem.hpp	/^		std::mutex m_mutex;$/;"	m	struct:Maps::CacheMem
m_mutex	SRC/Maps/WebRetriever.hpp	/^			std::mutex m_mutex;$/;"	m	class:Maps::WebRetriever
m_mutex	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::mutex        m_mutex; \/\/Lock in each public method for thread safety$/;"	m	class:DroneInterface::SimulatedDrone
m_mutex	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			std::mutex m_mutex;$/;"	m	class:DroneInterface::DroneManager
m_mutex	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			std::mutex        m_mutex; \/\/Protects non-atomic fields$/;"	m	class:GNSSReceiver::GNSSManager
m_mutex	SRC/Modules/Guidance/Guidance.hpp	/^			std::mutex        m_mutex;$/;"	m	class:Guidance::GuidanceEngine
m_mutex	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::mutex        m_mutex;$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_mutex	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			std::mutex        m_mutex;$/;"	m	class:ShadowPropagation::ShadowPropagationEngine
m_mutex	SRC/SurveyRegionManager.hpp	/^		std::mutex m_mutex;                     \/\/Lock the object when accessing for thread safety! If changed, update triangulation before unlocking.$/;"	m	class:SurveyRegion
m_mutex	SRC/SurveyRegionManager.hpp	/^		std::mutex m_mutex;$/;"	m	class:SurveyRegionManager
m_mutex	SRC/UI/GuidanceOverlay.hpp	/^		std::mutex m_mutex;$/;"	m	class:GuidanceOverlay
m_mutex	SRC/UI/MessageBoxOverlay.hpp	/^		std::mutex m_mutex;$/;"	m	class:MessageBoxOverlay
m_mutex	SRC/UI/ShadowMapOverlay.hpp	/^		std::mutex m_mutex;$/;"	m	class:ShadowMapOverlay
m_mutex	SRC/UI/TimeAvailableOverlay.hpp	/^		std::mutex m_mutex;$/;"	m	class:TimeAvailableOverlay
m_mutex_A	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		std::mutex               m_mutex_A;             \/\/All fields in this block are protected by this mutex$/;"	m	class:DroneInterface::RealDrone
m_mutex_B	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		std::mutex               m_mutex_B;                   \/\/All fields in this block are protected by this mutex$/;"	m	class:DroneInterface::RealDrone
m_nextAvailableToken	SRC/UI/MessageBoxOverlay.hpp	/^		int m_nextAvailableToken = 0;$/;"	m	class:MessageBoxOverlay
m_numBytes	SRC/SimpleKVStore.hpp	/^		uint64_t m_numBytes;$/;"	m	class:SimpleKVStore
m_numBytesOnDisk	SRC/SimpleKVStore.hpp	/^		uint64_t m_numBytesOnDisk;$/;"	m	class:SimpleKVStore
m_optionFilePath	SRC/ProgOptions.hpp	/^		std::filesystem::path m_optionFilePath;$/;"	m	class:ProgOptions
m_outstandingRequests	SRC/Maps/WebRetriever.hpp	/^			std::unordered_set< std::tuple<Tile,SatelliteSource> > m_outstandingRequests;$/;"	m	class:Maps::WebRetriever
m_packet_ack	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		Packet_Acknowledgment m_packet_ack;            \/\/Only used in ProcessFullReceivedPacket$/;"	m	class:DroneInterface::RealDrone
m_packet_compressedImg	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		Packet_CompressedImage m_packet_compressedImg; \/\/Only used in ProcessFullReceivedPacket$/;"	m	class:DroneInterface::RealDrone
m_packet_ct	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		Packet_CoreTelemetry     m_packet_ct;                 \/\/Data is retrieved from this packet in access methods$/;"	m	class:DroneInterface::RealDrone
m_packet_ct_received	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool                     m_packet_ct_received = false;$/;"	m	class:DroneInterface::RealDrone
m_packet_et	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		Packet_ExtendedTelemetry m_packet_et;                 \/\/Data is retrieved from this packet in access methods$/;"	m	class:DroneInterface::RealDrone
m_packet_et_received	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool                     m_packet_et_received = false;$/;"	m	class:DroneInterface::RealDrone
m_packet_fragment	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		Packet *                 m_packet_fragment = new Packet();$/;"	m	class:DroneInterface::RealDrone
m_packet_img	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		Packet_Image m_packet_img;                     \/\/Only used in ProcessFullReceivedPacket$/;"	m	class:DroneInterface::RealDrone
m_packet_ms	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		Packet_MessageString m_packet_ms;              \/\/Only used in ProcessFullReceivedPacket$/;"	m	class:DroneInterface::RealDrone
m_panning	SRC/UI/LiveFiducialsWidget.hpp	/^		bool m_panning = false;$/;"	m	class:LiveFiducialsWidget
m_panning	SRC/UI/SimFiducialsWidget.hpp	/^		bool m_panning = false;$/;"	m	class:SimFiducialsWidget
m_pauseDronesOnMSAViolation	SRC/UI/CommandWidget.hpp	/^		bool  m_pauseDronesOnMSAViolation = false;$/;"	m	class:CommandWidget
m_pitch	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_yaw, m_pitch, m_roll; \/\/Radians (DJI definitions)$/;"	m	class:DroneInterface::SimulatedDrone
m_playSoundOnViolation	SRC/UI/CommandWidget.hpp	/^		bool           m_playSoundOnViolation = true;$/;"	m	class:CommandWidget
m_pointA	SRC/Polygon.hpp	/^    Eigen::Vector2d m_pointA;$/;"	m	class:Triangle
m_pointB	SRC/Polygon.hpp	/^    Eigen::Vector2d m_pointB;$/;"	m	class:Triangle
m_pointC	SRC/Polygon.hpp	/^    Eigen::Vector2d m_pointC;$/;"	m	class:Triangle
m_popupDims	SRC/UI/AvoidanceZonesTool.hpp	/^		Eigen::Vector2d m_popupDims;$/;"	m	class:AvoidanceZonesTool
m_popupDims	SRC/UI/LandingZonesTool.hpp	/^		Eigen::Vector2d m_popupDims;$/;"	m	class:LandingZonesTool
m_popupDims	SRC/UI/MSATool.hpp	/^		Eigen::Vector2d m_popupDims;$/;"	m	class:MSATool
m_popupDims	SRC/UI/SurveyRegionTool.hpp	/^		Eigen::Vector2d m_popupDims;$/;"	m	class:SurveyRegionsTool
m_popupOpen	SRC/UI/AvoidanceZonesTool.hpp	/^		bool m_popupOpen;$/;"	m	class:AvoidanceZonesTool
m_popupOpen	SRC/UI/LandingZonesTool.hpp	/^		bool m_popupOpen;$/;"	m	class:LandingZonesTool
m_popupOpen	SRC/UI/MSATool.hpp	/^		bool m_popupOpen;$/;"	m	class:MSATool
m_port	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			int m_port;$/;"	m	class:DroneInterface::DroneManager
m_pos_2DAccuracy	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			double          m_pos_2DAccuracy; \/\/Receiver-provided 2D position accuracy estimate (m) - no precise definition found$/;"	m	class:GNSSReceiver::GNSSManager
m_pos_3DAccuracy	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			double          m_pos_3DAccuracy; \/\/Receiver-provided 3D position accuracy estimate (m) - no precise definition found$/;"	m	class:GNSSReceiver::GNSSManager
m_pos_ECEF	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			Eigen::Vector3d m_pos_ECEF;       \/\/ECEF position (m)$/;"	m	class:GNSSReceiver::GNSSManager
m_pos_LLA	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			Eigen::Vector3d m_pos_LLA;        \/\/LLA position (rad, rad, m)$/;"	m	class:GNSSReceiver::GNSSManager
m_pos_VAccuracy	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			double          m_pos_VAccuracy;  \/\/Receiver-provided vertical position accuracy estimate (m) - no precise definition found$/;"	m	class:GNSSReceiver::GNSSManager
m_possessionTarget	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		RealDrone *              m_possessionTarget = nullptr; \/\/Nullptr if no possession requested$/;"	m	class:DroneInterface::RealDrone
m_radius	SRC/UI/AvoidanceZonesTool.hpp	/^		float m_radius; \/\/in meters$/;"	m	class:AvoidanceZonesTool
m_radius	SRC/UI/LandingZonesTool.hpp	/^		float m_radius; \/\/in meters$/;"	m	class:LandingZonesTool
m_radius	SRC/UI/MSATool.hpp	/^		float m_radius; \/\/in meters$/;"	m	class:MSATool
m_realtime	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool m_realtime = false;$/;"	m	class:DroneInterface::SimulatedDrone
m_receivedImageTimestamps	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		std::vector<TimePoint>   m_receivedImageTimestamps; \/\/Log of timestamps for received imagery$/;"	m	class:DroneInterface::RealDrone
m_receiver	SRC/Maps/CacheFile.hpp	/^			ITileFileReceiver * m_receiver = nullptr;$/;"	m	class:Maps::CacheFile
m_receiver	SRC/Maps/FRFTileStore.hpp	/^			IFRFFileReceiver * m_receiver = nullptr;$/;"	m	class:Maps::FRFTileStore
m_receiver	SRC/Maps/WebRetriever.hpp	/^			ITileWebReceiver * m_receiver = nullptr;$/;"	m	class:Maps::WebRetriever
m_receiverConnected	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			std::atomic<bool> m_receiverConnected;$/;"	m	class:GNSSReceiver::GNSSManager
m_referenceFrameLoaded	SRC/UI/SimFiducialsWidget.hpp	/^		bool m_referenceFrameLoaded = false;$/;"	m	class:SimFiducialsWidget
m_regionList	SRC/UI/ModalDialogs.hpp	/^		std::vector<std::string> m_regionList;$/;"	m	class:SelectActiveRegionDialog
m_requests	SRC/Maps/CacheFile.hpp	/^			std::unordered_set<std::tuple<Tile,SatelliteSource>> m_requests;$/;"	m	class:Maps::CacheFile
m_requests	SRC/Maps/FRFTileStore.hpp	/^			std::unordered_set<Tile> m_requests;$/;"	m	class:Maps::FRFTileStore
m_requests_mtx	SRC/Maps/CacheFile.hpp	/^			std::mutex m_requests_mtx;$/;"	m	class:Maps::CacheFile
m_requests_mtx	SRC/Maps/FRFTileStore.hpp	/^			std::mutex m_requests_mtx;$/;"	m	class:Maps::FRFTileStore
m_reset	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			std::atomic<bool> m_reset;$/;"	m	class:GNSSReceiver::GNSSManager
m_roll	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_yaw, m_pitch, m_roll; \/\/Radians (DJI definitions)$/;"	m	class:DroneInterface::SimulatedDrone
m_running	SRC/Modules/Guidance/Guidance.hpp	/^			bool              m_running;$/;"	m	class:Guidance::GuidanceEngine
m_running	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			bool              m_running;$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_running	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			bool              m_running;$/;"	m	class:ShadowPropagation::ShadowPropagationEngine
m_satCount_BeiDou	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			int m_satCount_BeiDou   = -1; \/\/Number of usable BeiDou  sats being tracked$/;"	m	class:GNSSReceiver::GNSSManager
m_satCount_GLONASS	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			int m_satCount_GLONASS  = -1; \/\/Number of usable GLONASS sats being tracked$/;"	m	class:GNSSReceiver::GNSSManager
m_satCount_GPS	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			int m_satCount_GPS      = -1; \/\/Number of usable GPS     sats being tracked$/;"	m	class:GNSSReceiver::GNSSManager
m_satCount_Galileo	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			int m_satCount_Galileo  = -1; \/\/Number of usable Galileo sats being tracked$/;"	m	class:GNSSReceiver::GNSSManager
m_satCount_IMES	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			int m_satCount_IMES     = -1; \/\/Number of usable IMES    sats being tracked$/;"	m	class:GNSSReceiver::GNSSManager
m_satCount_QZSS	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			int m_satCount_QZSS     = -1; \/\/Number of usable QZSS    sats being tracked$/;"	m	class:GNSSReceiver::GNSSManager
m_satCount_SBAS	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			int m_satCount_SBAS     = -1; \/\/Number of usable SBAS    sats being tracked$/;"	m	class:GNSSReceiver::GNSSManager
m_satsWithCodeLock	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			int m_satsWithCodeLock  = -1; \/\/Number of sats with code lock$/;"	m	class:GNSSReceiver::GNSSManager
m_satsWithPhaseLock	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			int m_satsWithPhaseLock = -1; \/\/Number of sats with carrier phase lock$/;"	m	class:GNSSReceiver::GNSSManager
m_selection	SRC/UI/ModalDialogs.hpp	/^		int m_selection = -1;$/;"	m	class:SelectActiveRegionDialog
m_serial	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::string m_serial;$/;"	m	class:DroneInterface::SimulatedDrone
m_serial	SRC/UI/VehicleControlWidget.hpp	/^		std::string                      m_serial;$/;"	m	struct:VehicleControlWidget::vehicleState
m_server	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			tacopie::tcp_server m_server;$/;"	m	class:DroneInterface::DroneManager
m_shadowDetectionModuleVidFeedFPS	SRC/UI/MainMenu.hpp	/^		float m_shadowDetectionModuleVidFeedFPS = 1.0f;$/;"	m	class:MainMenu
m_shadowMapOverlay	SRC/UI/MapWidget.hpp	/^		ShadowMapOverlay m_shadowMapOverlay;$/;"	m	class:MapWidget
m_shadowMapTexture	SRC/UI/ShadowMapOverlay.hpp	/^		ImTextureID m_shadowMapTexture;$/;"	m	class:ShadowMapOverlay
m_shape	SRC/Maps/DataTileProvider.hpp	/^		int m_shape;  \/\/0=Circle, 1=Rectangle$/;"	m	struct:Maps::PaintActionItem
m_shape	SRC/UI/AvoidanceZonesTool.hpp	/^		int m_shape; \/\/0=circle, 1=rectangle$/;"	m	class:AvoidanceZonesTool
m_shape	SRC/UI/LandingZonesTool.hpp	/^		int m_shape; \/\/0=circle, 1=rectangle$/;"	m	class:LandingZonesTool
m_shape	SRC/UI/MSATool.hpp	/^		int m_shape; \/\/0=circle, 1=rectangle$/;"	m	class:MSATool
m_showFeed	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_showFeed = false;$/;"	m	struct:VehicleControlWidget::vehicleState
m_showRequest	SRC/UI/ModalDialogs.hpp	/^		bool m_showRequest = false;$/;"	m	class:DeleteBookmarkDialog
m_showRequest	SRC/UI/ModalDialogs.hpp	/^		bool m_showRequest = false;$/;"	m	class:NewBookmarkDialog
m_showRequest	SRC/UI/ModalDialogs.hpp	/^		bool m_showRequest = false;$/;"	m	class:SelectActiveRegionDialog
m_showRequest	SRC/UI/ModalDialogs.hpp	/^		bool m_showRequest = false;$/;"	m	class:ZoomToCoordsDialog
m_simulatedDrones	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			std::unordered_map<std::string, std::unique_ptr<SimulatedDrone>> m_simulatedDrones; \/\/Serial -> SimDronePtr$/;"	m	class:DroneInterface::DroneManager
m_size	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			uint32_t m_size; \/\/Only valid when M_highLevelFieldsValid = true$/;"	m	class:DroneInterface::Packet
m_sizeRefreshStopwatch	SRC/SimpleKVStore.hpp	/^		Handy::StopWatch m_sizeRefreshStopwatch;$/;"	m	class:SimpleKVStore
m_source	SRC/Maps/SatelliteCacheMaster.hpp	/^		SatelliteSource m_source = SatelliteSource::HEREHybridMaps;$/;"	m	class:Maps::SatelliteCacheMaster
m_state	SRC/UI/LiveFiducialsWidget.hpp	/^		int m_state = -1; \/\/State of the widget: -1: Inactive, 0: Select Ref frame, 1: Mark Fiducials$/;"	m	class:LiveFiducialsWidget
m_stream	SRC/Journal.h	/^		std::ostream * m_stream;$/;"	m	class:Journal
m_style	SRC/UI/MyGui.hpp	/^			ImExt::Style m_style;$/;"	m	class:MyGui::DummyButtonStyle
m_style	SRC/UI/MyGui.hpp	/^			ImExt::Style m_style;$/;"	m	class:MyGui::RedButtonStyle
m_subregionSequences	SRC/Modules/Guidance/Guidance.hpp	/^			std::vector<std::vector<int>> m_subregionSequences;$/;"	m	class:Guidance::GuidanceEngine
m_surveyRegion	SRC/Modules/Guidance/Guidance.hpp	/^			PolygonCollection m_surveyRegion;$/;"	m	class:Guidance::GuidanceEngine
m_surveyRegionPartition	SRC/Modules/Guidance/Guidance.hpp	/^			std::Evector<PolygonCollection> m_surveyRegionPartition;$/;"	m	class:Guidance::GuidanceEngine
m_takeoffAlt	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_takeoffLat, m_takeoffLon, m_takeoffAlt; \/\/Latched on each takeoff event$/;"	m	class:DroneInterface::SimulatedDrone
m_takeoffAlt	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		double                   m_takeoffAlt = std::nan(""); \/\/Latched on each takeoff event$/;"	m	class:DroneInterface::RealDrone
m_takeoffLat	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_takeoffLat, m_takeoffLon, m_takeoffAlt; \/\/Latched on each takeoff event$/;"	m	class:DroneInterface::SimulatedDrone
m_takeoffLat	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		double                   m_takeoffLat = std::nan(""); \/\/Latched on each takeoff event$/;"	m	class:DroneInterface::RealDrone
m_takeoffLon	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_takeoffLat, m_takeoffLon, m_takeoffAlt; \/\/Latched on each takeoff event$/;"	m	class:DroneInterface::SimulatedDrone
m_takeoffLon	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		double                   m_takeoffLon = std::nan(""); \/\/Latched on each takeoff event$/;"	m	class:DroneInterface::RealDrone
m_targetFPS	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_targetFPS = -1.0;$/;"	m	class:DroneInterface::SimulatedDrone
m_targetFPS	SRC/UI/VehicleControlWidget.hpp	/^		float                            m_targetFPS = 1.0f;$/;"	m	struct:VehicleControlWidget::vehicleState
m_targetHAGFeet	SRC/UI/VehicleControlWidget.hpp	/^		float                            m_targetHAGFeet = 0.0f; \/\/feet$/;"	m	struct:VehicleControlWidget::vehicleState
m_targetLatLon	SRC/UI/VehicleControlWidget.hpp	/^		Eigen::Vector2d                  m_targetLatLon = Eigen::Vector2d(std::nan(""), std::nan("")); \/\/Lat and Lon (radians) of target pos$/;"	m	struct:VehicleControlWidget::vehicleState
m_targetWaypoint	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			int m_targetWaypoint = -1; \/\/Next waypoint (when in waypoint mission mode)$/;"	m	class:DroneInterface::SimulatedDrone
m_targetYawDeg	SRC/UI/VehicleControlWidget.hpp	/^		float                            m_targetYawDeg = 0.0f;$/;"	m	struct:VehicleControlWidget::vehicleState
m_text	SRC/UI/ModalDialogs.hpp	/^		std::string m_text;$/;"	m	class:InformationDialog
m_theme	SRC/UI/Themes.hpp	/^			Theme m_theme;$/;"	m	class:Themes::ThemeSitter
m_themeOptions	SRC/UI/SettingsWindow.hpp	/^		std::string m_themeOptions;$/;"	m	class:SettingsWindow
m_threads	SRC/Maps/CacheFile.hpp	/^			Handy::ThreadPool m_threads;$/;"	m	class:Maps::CacheFile
m_threads	SRC/Maps/FRFTileStore.hpp	/^			Handy::ThreadPool m_threads;$/;"	m	class:Maps::FRFTileStore
m_threads	SRC/Maps/WebRetriever.hpp	/^			Handy::ThreadPool m_threads;$/;"	m	class:Maps::WebRetriever
m_threads_VisEval	SRC/Maps/DataTileProvider.hpp	/^			Handy::ThreadPool m_threads_VisEval; \/\/Thread pool for evaluating visualizations from FRF tiles and loading them into GPU memory$/;"	m	struct:Maps::DataTileProvider
m_tileKey	SRC/Maps/DataTileProvider.hpp	/^			Tile m_tileKey;$/;"	m	struct:Maps::DataTileCacheItem
m_tiles	SRC/Maps/CacheMem.hpp	/^		std::unordered_map<std::tuple<Tile, SatelliteSource>, std::tuple<ImTextureID, TimePoint>> m_tiles;$/;"	m	struct:Maps::CacheMem
m_timeCorrespondenceLog	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			std::vector<std::tuple<uint32_t, double, TimePoint>> m_timeCorrespondenceLog;$/;"	m	class:GNSSReceiver::GNSSManager
m_time_GPSTOW	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			double          m_time_GPSTOW;    \/\/GPS TOW$/;"	m	class:GNSSReceiver::GNSSManager
m_time_GPSWeek	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			uint32_t        m_time_GPSWeek;   \/\/GPS Week number$/;"	m	class:GNSSReceiver::GNSSManager
m_toolState	SRC/UI/SurveyRegionTool.hpp	/^		int m_toolState = 0;$/;"	m	class:SurveyRegionsTool
m_triangulation	SRC/SurveyRegionManager.hpp	/^		std::Evector<Triangle> m_triangulation; \/\/NM coordinates$/;"	m	class:SurveyRegion
m_turningSpeedThroughWaypoint	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_turningSpeedThroughWaypoint;$/;"	m	class:DroneInterface::SimulatedDrone
m_unprocessedFrames	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			std::vector<std::tuple<cv::Mat, TimePoint>> m_unprocessedFrames;$/;"	m	class:ShadowDetection::ShadowDetectionEngine
m_unprocessedShadowMaps	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			std::Evector<ShadowDetection::InstantaneousShadowMap> m_unprocessedShadowMaps;$/;"	m	class:ShadowPropagation::ShadowPropagationEngine
m_uploadCount	SRC/UI/TextureUploadFlowRestrictor.hpp	/^		unsigned int m_uploadCount = 0U;$/;"	m	class:TextureUploadFlowRestrictor
m_useDroneFlags	SRC/UI/CommandWidget.hpp	/^		std::vector<bool> m_useDroneFlags;$/;"	m	class:CommandWidget
m_validSolutionReceived	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			bool            m_validSolutionReceived;  \/\/Set to true on the first valid NAV solution$/;"	m	class:GNSSReceiver::GNSSManager
m_value	SRC/UI/MSATool.hpp	/^		float m_value; \/\/MSA, in meters$/;"	m	class:MSATool
m_vehicleProximityWarnThreshold	SRC/UI/CommandWidget.hpp	/^		float m_vehicleProximityWarnThreshold = 3.0; \/\/meters$/;"	m	class:CommandWidget
m_vehicleSpeedMPH	SRC/UI/VehicleControlWidget.hpp	/^		float                            m_vehicleSpeedMPH = 15.0f;$/;"	m	struct:VehicleControlWidget::vehicleState
m_vehicleStates	SRC/UI/VehicleControlWidget.hpp	/^		std::unordered_map<std::string, vehicleState> m_vehicleStates;$/;"	m	class:VehicleControlWidget
m_vertices	SRC/Polygon.hpp	/^    std::Evector<Eigen::Vector2d> m_vertices;$/;"	m	class:SimplePolygon
m_videoPath	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::filesystem::path m_videoPath;$/;"	m	class:DroneInterface::SimulatedDrone
m_visible	SRC/UI/SimFiducialsWidget.hpp	/^		bool m_visible = false;$/;"	m	class:SimFiducialsWidget
m_vizValid	SRC/Maps/DataTileProvider.hpp	/^			bool m_vizValid = false;$/;"	m	struct:Maps::DataTileCacheItem
m_warningSoundPlayHandle	SRC/UI/CommandWidget.hpp	/^		SoLoud::handle m_warningSoundPlayHandle = 0U;$/;"	m	class:CommandWidget
m_warningSoundWav	SRC/UI/CommandWidget.hpp	/^		SoLoud::Wav    m_warningSoundWav;$/;"	m	class:CommandWidget
m_watchdogThread	SRC/UI/CommandWidget.hpp	/^		std::thread       m_watchdogThread;$/;"	m	class:CommandWidget
m_watchdogThreadAbort	SRC/UI/CommandWidget.hpp	/^		std::atomic<bool> m_watchdogThreadAbort = false;$/;"	m	class:CommandWidget
m_watchdowMutex	SRC/UI/CommandWidget.hpp	/^		std::mutex  m_watchdowMutex;$/;"	m	class:CommandWidget
m_waypointMissionState	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			int m_waypointMissionState = -1;$/;"	m	class:DroneInterface::SimulatedDrone
m_webRetriever	SRC/Maps/SatelliteCacheMaster.hpp	/^		WebRetriever * m_webRetriever;$/;"	m	class:Maps::SatelliteCacheMaster
m_widgetControlEnabled	SRC/UI/VehicleControlWidget.hpp	/^		bool                             m_widgetControlEnabled = false;$/;"	m	struct:VehicleControlWidget::vehicleState
m_yaw	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			double m_yaw, m_pitch, m_roll; \/\/Radians (DJI definitions)$/;"	m	class:DroneInterface::SimulatedDrone
main	SRC/ReconMain.cpp	/^int main(int argc, const char * argv[]) {$/;"	f
mapbox	SRC/Earcut.hpp	/^namespace mapbox {$/;"	n
maxX	SRC/Earcut.hpp	/^    double minX, maxX;$/;"	m	class:mapbox::detail::Earcut
maxY	SRC/Earcut.hpp	/^    double minY, maxY;$/;"	m	class:mapbox::detail::Earcut
max_extent	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^    			double max_extent;         \/\/Computed in SetFiducials()$/;"	m	class:ShadowDetection::ShadowDetectionEngine
middleInside	SRC/Earcut.hpp	/^bool Earcut<N>::middleInside(const Node* a, const Node* b) {$/;"	f	class:mapbox::detail::Earcut
minHessian	SRC/Modules/Shadow-Detection/shadow_utils.hpp	/^inline int minHessian = 400;$/;"	v
minX	SRC/Earcut.hpp	/^    double minX, maxX;$/;"	m	class:mapbox::detail::Earcut
minY	SRC/Earcut.hpp	/^    double minY, maxY;$/;"	m	class:mapbox::detail::Earcut
mouseInBounds	SRC/UI/MapWidget.hpp	/^		bool mouseInBounds;                  \/\/Whether the cursor is over the widget - updated each time through the draw loop.$/;"	m	class:MapWidget
mousePosNM	SRC/UI/MapWidget.hpp	/^		Eigen::Vector2d mousePosNM;          \/\/Position of mouse cursor - updated everytime we go through our draw loop.$/;"	m	class:MapWidget
mousePosScreenSpace	SRC/UI/MapWidget.hpp	/^		Eigen::Vector2d mousePosScreenSpace; \/\/Position of mouse cursor - updated everytime we go through our draw loop.$/;"	m	class:MapWidget
multCam2World	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void multCam2World(std::Evector<Eigen::Vector2d>& pixel_coords, std::vector<cv::Point3d>& backprojected, ocam_model& o) {$/;"	f
multENU2CAM	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void multENU2CAM(std::Evector<Eigen::Vector3d>& enu, cv::Mat& cam, Eigen::Matrix3d R, Eigen::Vector3d t, ocam_model& o) {$/;"	f
nChoosek	SRC/UI/MapWidget.cpp	/^static uint64_t nChoosek(uint64_t n, uint64_t k) { return factorial(n)\/(factorial(k)*factorial(n-k)); }$/;"	f	file:
next	SRC/Earcut.hpp	/^        Node* next = nullptr;$/;"	m	struct:mapbox::detail::Earcut::Node
nextZ	SRC/Earcut.hpp	/^        Node* nextZ = nullptr;$/;"	m	struct:mapbox::detail::Earcut::Node
nodes	SRC/Earcut.hpp	/^    ObjectPool<Node> nodes;$/;"	m	class:mapbox::detail::Earcut
nodes	SRC/Polygon.hpp	/^    std::vector<Triangle> nodes;$/;"	m	class:TriangleAdjacencyMap
nth	SRC/Earcut.hpp	/^template <std::size_t I, typename T> struct nth {$/;"	s	namespace:mapbox::util
numDataTilesDrawn	SRC/UI/MapWidget.hpp	/^		int32_t numDataTilesDrawn = 0;$/;"	m	class:MapWidget
numSatTilesDrawn	SRC/UI/MapWidget.hpp	/^		int32_t numSatTilesDrawn = 0;$/;"	m	class:MapWidget
numSigs	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint8_t version, numSigs;$/;"	m	class:NAVSig	file:
o	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			struct ocam_model o;       \/\/Set in SetFiducials()$/;"	m	class:ShadowDetection::ShadowDetectionEngine	typeref:struct:ShadowDetection::ShadowDetectionEngine::ocam_model
ocam_model	SRC/Modules/Shadow-Detection/ocam_utils.h	/^struct ocam_model$/;"	s
onSegment	SRC/Earcut.hpp	/^bool Earcut<N>::onSegment(const Node* p, const Node* q, const Node* r) {$/;"	f	class:mapbox::detail::Earcut
operator !=	SRC/Maps/DataTileTypes.hpp	/^		bool operator!=(VizualizationTileKey const & other) const { return (! operator==(other)); }$/;"	f	struct:Maps::VizualizationTileKey
operator ()	SRC/Earcut.hpp	/^void Earcut<N>::operator()(const Polygon& points) {$/;"	f	class:mapbox::detail::Earcut
operator ()	SRC/TimeSeries.h	/^template <typename valueType> valueType timeSeries<valueType>::operator()(double time) {$/;"	f	class:timeSeries
operator <	SRC/Maps/Tile.hpp	/^	inline bool operator<(Tile const & lhs, Tile const & rhs) {$/;"	f	namespace:Maps
operator <<	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	std::ostream & operator<<(std::ostream & Str, Packet_Acknowledgment const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	std::ostream & operator<<(std::ostream & Str, Packet_CameraControl const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	std::ostream & operator<<(std::ostream & Str, Packet_CoreTelemetry const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	std::ostream & operator<<(std::ostream & Str, Packet_EmergencyCommand const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	std::ostream & operator<<(std::ostream & Str, Packet_ExecuteWaypointMission const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	std::ostream & operator<<(std::ostream & Str, Packet_ExtendedTelemetry const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	std::ostream & operator<<(std::ostream & Str, Packet_Image const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	std::ostream & operator<<(std::ostream & Str, Packet_MessageString const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	std::ostream & operator<<(std::ostream & Str, Packet_VirtualStickCommand const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^	inline std::ostream & operator<<(std::ostream & Str, Waypoint const & v) { $/;"	f	namespace:DroneInterface
operator <<	SRC/Polygon.hpp	/^inline std::ostream & operator<<(std::ostream & Str, LineSegment const & v) {$/;"	f
operator <<	SRC/Polygon.hpp	/^inline std::ostream & operator<<(std::ostream & Str, Polygon const & v) {$/;"	f
operator <<	SRC/Polygon.hpp	/^inline std::ostream & operator<<(std::ostream & Str, PolygonCollection const & v) {$/;"	f
operator <<	SRC/Polygon.hpp	/^inline std::ostream & operator<<(std::ostream & Str, SimplePolygon const & v) {$/;"	f
operator <<	SRC/Polygon.hpp	/^inline std::ostream & operator<<(std::ostream & Str, Triangle const & v) {$/;"	f
operator ==	SRC/Maps/DataTileTypes.hpp	/^		bool operator==(VizualizationTileKey const & other) const {$/;"	f	struct:Maps::VizualizationTileKey
operator ==	SRC/Maps/Tile.hpp	/^	inline bool operator==(Tile const & lhs, Tile const & rhs) {$/;"	f	namespace:Maps
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_Acknowledgment::operator==(Packet_Acknowledgment const & Other) const {$/;"	f	class:DroneInterface::Packet_Acknowledgment
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_CameraControl::operator==(Packet_CameraControl const & Other) const {$/;"	f	class:DroneInterface::Packet_CameraControl
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_CompressedImage::operator==(Packet_CompressedImage const & Other) const {$/;"	f	class:DroneInterface::Packet_CompressedImage
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_CoreTelemetry::operator==(Packet_CoreTelemetry const & Other) const {$/;"	f	class:DroneInterface::Packet_CoreTelemetry
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_EmergencyCommand::operator==(Packet_EmergencyCommand const & Other) const {$/;"	f	class:DroneInterface::Packet_EmergencyCommand
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_ExecuteWaypointMission::operator==(Packet_ExecuteWaypointMission const & Other) const {$/;"	f	class:DroneInterface::Packet_ExecuteWaypointMission
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_ExtendedTelemetry::operator==(Packet_ExtendedTelemetry const & Other) const {$/;"	f	class:DroneInterface::Packet_ExtendedTelemetry
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_Image::operator==(Packet_Image const & Other) const {$/;"	f	class:DroneInterface::Packet_Image
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_MessageString::operator==(Packet_MessageString const & Other) const {$/;"	f	class:DroneInterface::Packet_MessageString
operator ==	SRC/Modules/DJI-Drone-Interface/DroneComms.cpp	/^	bool Packet_VirtualStickCommand::operator==(Packet_VirtualStickCommand const & Other) const {$/;"	f	class:DroneInterface::Packet_VirtualStickCommand
operator ==	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		bool operator==(VirtualStickCommand_ModeA const & Other) const {$/;"	f	struct:DroneInterface::VirtualStickCommand_ModeA
operator ==	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		bool operator==(VirtualStickCommand_ModeB const & Other) const {$/;"	f	struct:DroneInterface::VirtualStickCommand_ModeB
operator ==	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		bool operator==(Waypoint const & Other) const {$/;"	f	struct:DroneInterface::Waypoint
operator ==	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		bool operator==(WaypointMission const & Other) const {$/;"	f	struct:DroneInterface::WaypointMission
operator ==	SRC/UI/SurveyRegionTool.hpp	/^		bool operator==(VertexAddress const & Other) const {$/;"	f	struct:SurveyRegionsTool::VertexAddress
other	SRC/Maps/Tile.hpp	/^		Tile& operator=(Tile const & other) = default;$/;"	m	struct:Maps::Tile
override	SRC/Maps/DataTileProvider.hpp	/^			void OnReceivedFRFTile(Tile TileKey, FRFImage * Data) override;$/;"	m	struct:Maps::DataTileProvider
override	SRC/Maps/SatelliteCacheMaster.hpp	/^		void OnReceivedFile(Tile tile, SatelliteSource source, std::shared_ptr<std::vector<uint8_t>> data) override;$/;"	m	class:Maps::SatelliteCacheMaster
override	SRC/Maps/SatelliteCacheMaster.hpp	/^		void OnReceivedWeb (Tile tile, SatelliteSource source, std::shared_ptr<std::vector<uint8_t>> data) override;$/;"	m	class:Maps::SatelliteCacheMaster
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetActiveLimitations(bool & MaxHAG, bool & MaxDistFromHome, TimePoint & Timestamp)  override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetActiveWarnings(std::vector<std::string> & ActiveWarnings, TimePoint & Timestamp) override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetCurrentWaypointMission(WaypointMission & Mission)                      override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetFlightMode(std::string & FlightModeStr, TimePoint & Timestamp)         override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetGNSSStatus(unsigned int & SatCount, int & SignalLevel, TimePoint & Timestamp)    override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetHAG(double & HAG, TimePoint & Timestamp)                                                  override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetMostRecentFrame(cv::Mat & Frame, unsigned int & FrameNumber, TimePoint & Timestamp)             override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetOrientation(double & Yaw, double & Pitch, double & Roll, TimePoint & Timestamp)           override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetPosition(double & Latitude, double & Longitude, double & Altitude, TimePoint & Timestamp) override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetTakeoffPosition(double & Latitude, double & Longitude, double & Altitude) override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetVehicleBatteryLevel(double & BattLevel, TimePoint & Timestamp)                   override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool GetVelocity(double & V_North, double & V_East, double & V_Down, TimePoint & Timestamp)       override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool IsCamImageFeedOn(void)                                                                             override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool IsCurrentlyExecutingWaypointMission(bool & Result, TimePoint & Timestamp) override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool IsCurrentlyFlying(bool & Result, TimePoint & Timestamp)                   override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool IsDJICamConnected(void)                                                                            override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			bool Ready(void) override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			int  RegisterCallback(std::function<void(cv::Mat const & Frame, TimePoint const & Timestamp)> Callback) override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			std::string GetDroneSerial(void) override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void ExecuteWaypointMission(WaypointMission & Mission)                         override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void GoHomeAndLand(void) override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void Hover(void)         override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void IssueVirtualStickCommand(VirtualStickCommand_ModeA const & Command)       override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void IssueVirtualStickCommand(VirtualStickCommand_ModeB const & Command)       override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void LandNow(void)       override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void StartDJICamImageFeed(double TargetFPS)                                                             override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void StartSampleWaypointMission(int NumWaypoints, bool CurvedTrajectories, bool LandAtEnd, Eigen::Vector2d const & StartOffset_EN, double HAG) override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void StopDJICamImageFeed(void)                                                                          override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^			void UnRegisterCallback(int Handle)                                                                     override;$/;"	m	class:DroneInterface::SimulatedDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetActiveLimitations(bool & MaxHAG, bool & MaxDistFromHome, TimePoint & Timestamp)  override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetActiveWarnings(std::vector<std::string> & ActiveWarnings, TimePoint & Timestamp) override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetCurrentWaypointMission(WaypointMission & Mission)                      override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetFlightMode(std::string & FlightModeStr, TimePoint & Timestamp)         override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetGNSSStatus(unsigned int & SatCount, int & SignalLevel, TimePoint & Timestamp)    override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetHAG(double & HAG, TimePoint & Timestamp)                                                  override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetMostRecentFrame(cv::Mat & Frame, unsigned int & FrameNumber, TimePoint & Timestamp)             override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetOrientation(double & Yaw, double & Pitch, double & Roll, TimePoint & Timestamp)           override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetPosition(double & Latitude, double & Longitude, double & Altitude, TimePoint & Timestamp) override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetTakeoffPosition(double & Latitude, double & Longitude, double & Altitude) override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetVehicleBatteryLevel(double & BattLevel, TimePoint & Timestamp)                   override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool GetVelocity(double & V_North, double & V_East, double & V_Down, TimePoint & Timestamp)       override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool IsCamImageFeedOn(void)                                                                             override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool IsCurrentlyExecutingWaypointMission(bool & Result, TimePoint & Timestamp) override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool IsCurrentlyFlying(bool & Result, TimePoint & Timestamp)                   override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool IsDJICamConnected(void)                                                                            override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		bool Ready(void) override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		int  RegisterCallback(std::function<void(cv::Mat const & Frame, TimePoint const & Timestamp)> Callback) override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		std::string GetDroneSerial(void) override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void ExecuteWaypointMission(WaypointMission & Mission)                         override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void GoHomeAndLand(void) override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void Hover(void)         override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void IssueVirtualStickCommand(VirtualStickCommand_ModeA const & Command)       override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void IssueVirtualStickCommand(VirtualStickCommand_ModeB const & Command)       override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void LandNow(void)       override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void StartDJICamImageFeed(double TargetFPS)                                                             override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void StartSampleWaypointMission(int NumWaypoints, bool CurvedTrajectories, bool LandAtEnd, Eigen::Vector2d const & StartOffset_EN, double HAG) override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void StopDJICamImageFeed(void)                                                                          override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/Modules/DJI-Drone-Interface/Drone.hpp	/^		void UnRegisterCallback(int Handle)                                                                     override;$/;"	m	class:DroneInterface::RealDrone
override	SRC/UI/ReconUI.hpp	/^		void Draw()      override;$/;"	m	class:ReconUI
override	SRC/UI/ReconUI.hpp	/^		void Postframe() override;$/;"	m	class:ReconUI
override	SRC/UI/ReconUI.hpp	/^		void Preframe()  override;$/;"	m	class:ReconUI
pAcc	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint32_t pAcc  = 0U;$/;"	m	class:NAVSolution	file:
panProfile	SRC/UI/MapWidget.hpp	/^		timeSeries2D                     panProfile;            \/\/UL corner position of map widget (in Normalized Mercator) as a function of normalized time$/;"	m	class:MapWidget
parseArgs	SRC/ReconMain.cpp	/^void parseArgs(int argc, const char * argv[], std::string const & VersionString, Journal & Log) {$/;"	f
pointInTriangle	SRC/Earcut.hpp	/^bool Earcut<N>::pointInTriangle(double ax, double ay, double bx, double by, double cx, double cy, double px, double py) const {$/;"	f	class:mapbox::detail::Earcut
pol	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	double pol[MAX_POL_LENGTH];    \/\/ the polynomial coefficients: pol[0] + x"pol[1] + x^2*pol[2] + ... + x^(N-1)*pol[N-1]$/;"	m	struct:ocam_model
poseLEA2ENU	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void poseLEA2ENU(cv::Point3d &centroid_ECEF, Eigen::Matrix3d& R_cam_LEA, Eigen::Vector3d &t_cam_LEA, Eigen::Matrix3d& R_cam_ENU, Eigen::Vector3d& t_cam_ENU) {$/;"	f
positionECEF2LLA	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void positionECEF2LLA(cv::Point3d const & Position, double & lat, double & lon, double & alt) {$/;"	f
positionECEF2LLA_construct	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline cv::Point3d positionECEF2LLA_construct(cv::Point3d const& PositionECEF) {$/;"	f
positionPX2LLA	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void positionPX2LLA(cv::Mat& frame, Eigen::Vector2d& pixel_coords, const cv::Point3d& ECEF_origin, const Eigen::Vector2d &center, const double &max_extent, const double &num_pixels, Eigen::Vector3d& point_LLA, Eigen::Matrix3d& R, Eigen::Vector3d& t, ocam_model& o) {$/;"	f
prRes	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<int16_t>  prRes;$/;"	m	class:NAVSig	file:
prepareObjectForNonUniformReading	SRC/TimeSeries.h	/^template <typename valueType> void timeSeries<valueType>::prepareObjectForNonUniformReading(void) {$/;"	f	class:timeSeries
prev	SRC/Earcut.hpp	/^        Node* prev = nullptr;$/;"	m	struct:mapbox::detail::Earcut::Node
prevZ	SRC/Earcut.hpp	/^        Node* prevZ = nullptr;$/;"	m	struct:mapbox::detail::Earcut::Node
print	SRC/Journal.h	/^inline void Journal::print(std::string const & Message) {$/;"	f	class:Journal
printItem	SRC/TimeSeries.h	/^template <typename valueType> void timeSeries<valueType>::printItem(std::ostream & os, Eigen::Vector2d const & x) {$/;"	f	class:timeSeries
printItem	SRC/TimeSeries.h	/^template <typename valueType> void timeSeries<valueType>::printItem(std::ostream & os, Eigen::Vector3d const & x) {$/;"	f	class:timeSeries
printItem	SRC/TimeSeries.h	/^template <typename valueType> void timeSeries<valueType>::printItem(std::ostream & os, Eigen::Vector4d const & x) {$/;"	f	class:timeSeries
printItem	SRC/TimeSeries.h	/^template <typename valueType> void timeSeries<valueType>::printItem(std::ostream & os, double const & x) {$/;"	f	class:timeSeries
print_continued	SRC/Journal.h	/^inline void Journal::print_continued(std::string const & Message) {$/;"	f	class:Journal
printf	SRC/Journal.h	/^inline void Journal::printf(const char * fmt, ...) {$/;"	f	class:Journal
printf_continued	SRC/Journal.h	/^inline void Journal::printf_continued(const char * fmt, ...) {$/;"	f	class:Journal
qualityInd	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<uint8_t>  qualityInd;$/;"	m	class:NAVSig	file:
radiusEarth	SRC/Modules/Guidance/Guidance.cpp	28;"	d	file:
ref_descriptors	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			cv::Mat ref_descriptors;   \/\/Computed in SetReferenceFrame()$/;"	m	class:ShadowDetection::ShadowDetectionEngine
removeNode	SRC/Earcut.hpp	/^void Earcut<N>::removeNode(Node* p) {$/;"	f	class:mapbox::detail::Earcut
reprojectionError	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline double reprojectionError(cv::Mat &orig_PX, std::Evector<Eigen::Vector3d>&orig_LEA, Eigen::Matrix3d& R_cam_LEA, Eigen::Vector3d& t_cam_LEA, ocam_model& o, double percent_include) {$/;"	f
reset	SRC/Earcut.hpp	/^        void reset(std::size_t newBlockSize) {$/;"	f	class:mapbox::detail::Earcut::ObjectPool
reset	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		void reset(void) {$/;"	f	class:NAVSolution
root2real	SRC/Modules/Shadow-Detection/lambda_twist.h	/^	bool root2real(double b, double c, double& r1, double& r2) {$/;"	f	namespace:__anon1
roundVec	SRC/UI/MapWidget.cpp	/^static inline Eigen::Vector2d roundVec(Eigen::Vector2d const & v) { return Eigen::Vector2d(std::round(v(0)), std::round(v(1))); }$/;"	f	file:
s_instance	SRC/Maps/DataTileProvider.cpp	/^	DataTileProvider * DataTileProvider::s_instance = nullptr;$/;"	m	class:Maps::DataTileProvider	file:
s_instance	SRC/Maps/DataTileProvider.hpp	/^			static DataTileProvider * s_instance;$/;"	m	struct:Maps::DataTileProvider
s_instance	SRC/Maps/SatelliteCacheMaster.cpp	/^SatelliteCacheMaster * SatelliteCacheMaster::s_instance = nullptr;$/;"	m	class:Maps::SatelliteCacheMaster	file:
s_instance	SRC/Maps/SatelliteCacheMaster.hpp	/^		static SatelliteCacheMaster * s_instance;$/;"	m	class:Maps::SatelliteCacheMaster
s_instance	SRC/ProgOptions.hpp	/^		static ProgOptions * s_instance; \/\/Must be instantiated in exactly one translation unit (we do it in CheetahMain.cpp)$/;"	m	class:ProgOptions
s_instance	SRC/ReconMain.cpp	/^ProgOptions * ProgOptions::s_instance = nullptr;$/;"	m	class:ProgOptions	file:
sampleENUSquare	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void sampleENUSquare(cv::Mat& inputFrame, ocam_model& o, Eigen::Matrix3d& R, Eigen::Vector3d& t, const Eigen::Vector2d& center, const double& max_extent, const double &num_pixels, bool showFrames, cv::Mat& outputFrame) {$/;"	f
sampleMatrix	SRC/Modules/Shadow-Detection/transform_utils.hpp	/^inline void sampleMatrix(const std::Evector<Eigen::Vector3d>& src, const int pool_size, const unsigned seed, Eigen::Matrix3d& dst) {$/;"	f
sanitizeIndex	SRC/TimeSeries.h	/^template <typename valueType> unsigned int timeSeries<valueType>::sanitizeIndex(unsigned int Index) {$/;"	f	class:timeSeries
save	SRC/Polygon.hpp	/^            save(Archive & ar, Eigen::PlainObjectBase<Derived> const & m){$/;"	f	namespace:cereal
save_minimal	SRC/ProgOptions.hpp	/^	template <class Archive> std::string save_minimal(Archive const &, Themes::Theme const & obj) {$/;"	f	namespace:cereal
score	SRC/Polygon.hpp	/^        int score;$/;"	m	struct:TriangleAdjacencyMap::Triangle
secondsIntoAnimation	SRC/UI/Animation.hpp	/^inline double AnimatedVariable1D::secondsIntoAnimation(void) {$/;"	f	class:AnimatedVariable1D
sectorContainsSector	SRC/Earcut.hpp	/^bool Earcut<N>::sectorContainsSector(const Node* m, const Node* p) {$/;"	f	class:mapbox::detail::Earcut
serialize	SRC/Polygon.hpp	/^    template<class Archive> void serialize(Archive & archive) { archive(m_boundary, m_holes); }$/;"	f	class:Polygon
serialize	SRC/Polygon.hpp	/^    template<class Archive> void serialize(Archive & archive) { archive(m_components); }$/;"	f	class:PolygonCollection
serialize	SRC/Polygon.hpp	/^    template<class Archive> void serialize(Archive & archive) { archive(m_endpoint1, m_endpoint2); }$/;"	f	class:LineSegment
serialize	SRC/Polygon.hpp	/^    template<class Archive> void serialize(Archive & archive) { archive(m_pointA, m_pointB, m_pointC); }$/;"	f	class:Triangle
serialize	SRC/Polygon.hpp	/^    template<class Archive> void serialize(Archive & archive) { archive(m_vertices); }$/;"	f	class:SimplePolygon
serialize	SRC/ProgOptions.hpp	/^		template<class Archive> void serialize(Archive & archive) {$/;"	f	class:ProgOptions
serialize	SRC/SurveyRegionManager.hpp	/^		template<class Archive> void serialize(Archive & archive) { archive(CEREAL_NVP(m_ActiveRegionName)); }$/;"	f	class:SurveyRegionManager
serialize	SRC/SurveyRegionManager.hpp	/^		template<class Archive> void serialize(Archive & archive) { archive(m_Region); }$/;"	f	class:SurveyRegion
serialize	SRC/UI/BookmarkManager.hpp	/^		template<class Archive> void serialize(Archive & archive) { archive(CEREAL_NVP(Bookmarks)); }$/;"	f	class:BookmarkManager
serialize	SRC/UI/BookmarkManager.hpp	/^	template<class Archive> void serialize(Archive & archive) { archive(Name, MinLat, MaxLat, MinLon, MaxLon); }$/;"	f	struct:LocationBookmark
serialize	SRC/UI/VisWidget.hpp	/^		template<class Archive> void serialize(Archive & archive) {$/;"	f	class:VisWidget
set_NewValue	SRC/Modules/Shadow-Detection/shadow_utils.hpp	/^inline void set_NewValue(const int mapRows, const int mapCols, FRFLayer* newLayer, cv::Mat binary_sampled){$/;"	f
sgn	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^static double sgn(double val) {$/;"	f	file:
showRequest	SRC/UI/ModalDialogs.hpp	/^		bool showRequest = false;$/;"	m	class:InformationDialog
show_demo_window	SRC/UI/ReconUI.hpp	/^		bool show_demo_window = false;$/;"	m	class:ReconUI
sigFlags	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<uint16_t> sigFlags;$/;"	m	class:NAVSig	file:
sigId	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<uint8_t>  sigId;$/;"	m	class:NAVSig	file:
sign	SRC/Earcut.hpp	/^int Earcut<N>::sign(double val) {$/;"	f	class:mapbox::detail::Earcut
size	SRC/TimeSeries.h	/^template <typename valueType> unsigned int timeSeries<valueType>::size(void) {$/;"	f	class:timeSeries
soLoudMutex	SRC/UI/ReconUI.hpp	/^		std::mutex soLoudMutex; \/\/Mutex for gSoloud object. Lock when accessing since library is not explicit about thread-safety$/;"	m	class:ReconUI
sortLinked	SRC/Earcut.hpp	/^Earcut<N>::sortLinked(Node* list) {$/;"	f	class:mapbox::detail::Earcut
splitEarcut	SRC/Earcut.hpp	/^void Earcut<N>::splitEarcut(Node* start) {$/;"	f	class:mapbox::detail::Earcut
splitPolygon	SRC/Earcut.hpp	/^Earcut<N>::splitPolygon(Node* a, Node* b) {$/;"	f	class:mapbox::detail::Earcut
startTime	SRC/TimeSeries.h	/^template <typename valueType> double timeSeries<valueType>::startTime(void) {$/;"	f	class:timeSeries
state	SRC/UI/Animation.hpp	/^		int state; \/\/0: Val A, 1: A --> B transition, 2: Val B, 3: B --> A transition$/;"	m	class:AnimatedVariable1D
std	SRC/EigenAliases.h	/^namespace std {$/;"	n
steiner	SRC/Earcut.hpp	/^        bool steiner = false;$/;"	m	struct:mapbox::detail::Earcut::Node
str2double	SRC/Utilities.hpp	/^inline bool str2double(std::string str, double & Value) {$/;"	f
str2int	SRC/Utilities.hpp	/^inline bool str2int(std::string str, int & Value) {$/;"	f
styleSitter	SRC/UI/Themes.hpp	/^			ImExt::Style styleSitter;$/;"	m	class:Themes::ThemeSitter
svId	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::vector<uint8_t>  svId;$/;"	m	class:NAVSig	file:
tAcc	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint32_t tAcc  = 0U;$/;"	m	class:NAVSolution	file:
t_cam_ENU	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^    			Eigen::Vector3d t_cam_ENU; \/\/Computed in SetFiducials()$/;"	m	class:ShadowDetection::ShadowDetectionEngine
tile	SRC/Maps/DataTileTypes.hpp	/^		Tile tile;$/;"	m	struct:Maps::VizualizationTileKey
tileWidth	SRC/UI/MapWidget.cpp	/^constexpr int32_t MapWidget::tileWidth; \/\/Constexprs need to be defines in a translation unit unless using C++17$/;"	m	class:MapWidget	file:
tileWidth	SRC/UI/MapWidget.hpp	/^		static constexpr int32_t tileWidth = 256;$/;"	m	class:MapWidget
timeMultiplier	SRC/TimeSeries.h	/^		double timeMultiplier = 0.0;$/;"	m	class:timeSeries
timeSeries	SRC/TimeSeries.h	/^		timeSeries() { }$/;"	f	class:timeSeries
timeSeries	SRC/TimeSeries.h	/^template <typename valueType> class timeSeries {$/;"	c
timeSeries	SRC/TimeSeries.h	/^template <typename valueType> timeSeries<valueType>::timeSeries(double T0, double deltaT, std::Evector<valueType> const & Values) {$/;"	f	class:timeSeries
timeSeries	SRC/TimeSeries.h	/^template <typename valueType> timeSeries<valueType>::timeSeries(double T0, double deltaT, std::vector<valueType> const & Values) {$/;"	f	class:timeSeries
timeSeries	SRC/TimeSeries.h	/^template <typename valueType> timeSeries<valueType>::timeSeries(std::vector<double> const & Times, std::Evector<valueType> const & Values) {$/;"	f	class:timeSeries
timeSeries	SRC/TimeSeries.h	/^template <typename valueType> timeSeries<valueType>::timeSeries(std::vector<double> const & Times, std::vector<valueType> const & Values) {$/;"	f	class:timeSeries
timeSeries1D	SRC/TimeSeries.h	/^typedef timeSeries<double>          timeSeries1D;$/;"	t
timeSeries2D	SRC/TimeSeries.h	/^typedef timeSeries<Eigen::Vector2d> timeSeries2D;$/;"	t
timeSeries3D	SRC/TimeSeries.h	/^typedef timeSeries<Eigen::Vector3d> timeSeries3D;$/;"	t
timeSeries4D	SRC/TimeSeries.h	/^typedef timeSeries<Eigen::Vector4d> timeSeries4D;$/;"	t
timeStampToIndexVector	SRC/TimeSeries.h	/^		std::vector<int> timeStampToIndexVector;$/;"	m	class:timeSeries
timeout	SRC/Modules/DJI-Drone-Interface/DroneComms.hpp	/^			float   timeout;$/;"	m	class:DroneInterface::Packet_VirtualStickCommand
timeout	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float timeout   = 2.0f;  \/\/s: If a new command isn't received within this time, the drone should hover$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeB
timeout	SRC/Modules/DJI-Drone-Interface/DroneDataStructures.h	/^		float timeout = 2.0f;   \/\/s: If a new command isn't received within this time, the drone should hover$/;"	m	struct:DroneInterface::VirtualStickCommand_ModeA
times	SRC/TimeSeries.h	/^		std::vector<double> times;$/;"	m	class:timeSeries
timestamp	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::chrono::time_point<std::chrono::steady_clock> timestamp; \/\/Time when first component is decoded.$/;"	m	class:NAVSolution	file:
timestamp	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		std::chrono::time_point<std::chrono::steady_clock> timestamp;$/;"	m	class:NAVSig	file:
toolActive	SRC/UI/AvoidanceZonesTool.hpp	/^		bool toolActive;$/;"	m	class:AvoidanceZonesTool
toolActive	SRC/UI/LandingZonesTool.hpp	/^		bool toolActive;$/;"	m	class:LandingZonesTool
toolActive	SRC/UI/MSATool.hpp	/^		bool toolActive;$/;"	m	class:MSATool
toolActive	SRC/UI/SurveyRegionTool.hpp	/^		bool toolActive;$/;"	m	class:SurveyRegionsTool
transitionFun	SRC/UI/Animation.hpp	/^		timeSeries1D transitionFun; \/\/In normalized time (0 to 1) and normalized range (0 for State A, 1 for State B)$/;"	m	class:AnimatedVariable1D
transitionStartTime	SRC/UI/Animation.hpp	/^		TimePoint transitionStartTime;$/;"	m	class:AnimatedVariable1D
ttff	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint32_t ttff    = 0U;$/;"	m	class:NAVSolution	file:
uniformTimeSeries	SRC/TimeSeries.h	/^		bool uniformTimeSeries = false; \/\/True if all measurements are exactly evenly spaced in time. False otherwise$/;"	m	class:timeSeries
uniformTimeSeriesDeltaT	SRC/TimeSeries.h	/^		double uniformTimeSeriesDeltaT = 0.0;$/;"	m	class:timeSeries
uniformTimeSeriesT0	SRC/TimeSeries.h	/^		double uniformTimeSeriesT0 = 0.0;$/;"	m	class:timeSeries
util	SRC/Earcut.hpp	/^namespace util {$/;"	n	namespace:mapbox
vAcc	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint32_t vAcc = 0U;$/;"	m	class:NAVSolution	file:
valid	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint8_t  valid = 0U;$/;"	m	class:NAVSolution	file:
values	SRC/TimeSeries.h	/^		std::Evector<valueType> values; \/\/STL vector of values with Eigen memory allocator (for aligned mallocs that work with Eigen)$/;"	m	class:timeSeries
vehicleState	SRC/UI/VehicleControlWidget.hpp	/^		vehicleState(std::string const & Serial) : m_serial(Serial) { }$/;"	f	struct:VehicleControlWidget::vehicleState
vehicleState	SRC/UI/VehicleControlWidget.hpp	/^	struct vehicleState {$/;"	s	class:VehicleControlWidget
version	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		uint8_t version, numSigs;$/;"	m	class:NAVSig	file:
vertexIndex	SRC/UI/SurveyRegionTool.hpp	/^		int vertexIndex = -1;$/;"	m	struct:SurveyRegionsTool::VertexAddress
vertices	SRC/Earcut.hpp	/^    std::size_t vertices = 0;$/;"	m	class:mapbox::detail::Earcut
week	SRC/Modules/GNSS-Receiver/GNSSReceiver.cpp	/^		int16_t  week  = 0;$/;"	m	class:NAVSolution	file:
width	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	int width;         \/\/ image width$/;"	m	struct:ocam_model
world2cam	SRC/Modules/Shadow-Detection/ocam_utils.h	/^inline void world2cam(double point2D[2], double point3D[3], struct ocam_model* myocam_model)$/;"	f
x	SRC/Earcut.hpp	/^        const double x;$/;"	m	struct:mapbox::detail::Earcut::Node
xc	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	double xc;         \/\/ row coordinate of the center$/;"	m	struct:ocam_model
y	SRC/Earcut.hpp	/^        const double y;$/;"	m	struct:mapbox::detail::Earcut::Node
yc	SRC/Modules/Shadow-Detection/ocam_utils.h	/^	double yc;         \/\/ column coordinate of the center$/;"	m	struct:ocam_model
z	SRC/Earcut.hpp	/^        int32_t z = 0;$/;"	m	struct:mapbox::detail::Earcut::Node
zOrder	SRC/Earcut.hpp	/^int32_t Earcut<N>::zOrder(const double x_, const double y_) {$/;"	f	class:mapbox::detail::Earcut
zoom	SRC/UI/MapWidget.hpp	/^		double zoom; \/\/When zoom is 0, 1 screen pixel equals 1 pixel on pyramid level 0. When zoom is 1, 1 screen pixel equals 1 pixel on pyramid level 1, etc.$/;"	m	class:MapWidget
zoomProfile	SRC/UI/MapWidget.hpp	/^		timeSeries1D                     zoomProfile;           \/\/zoom as a function of normalized time$/;"	m	class:MapWidget
zoomSpeed	SRC/ProgOptions.hpp	/^		float zoomSpeed;         \/\/Normalized so that 1.0 is reasonable.$/;"	m	class:ProgOptions
~AboutWindow	SRC/UI/AboutWindow.hpp	/^		~AboutWindow() { }$/;"	f	class:AboutWindow
~AnimatedVariable1D	SRC/UI/Animation.hpp	/^		~AnimatedVariable1D() { }$/;"	f	class:AnimatedVariable1D
~BookmarkManager	SRC/UI/BookmarkManager.hpp	/^		~BookmarkManager() { SaveToDisk(); }$/;"	f	class:BookmarkManager
~CacheFile	SRC/Maps/CacheFile.cpp	/^CacheFile::~CacheFile() {$/;"	f	class:Maps::CacheFile
~CommandWidget	SRC/UI/CommandWidget.hpp	/^		~CommandWidget() {$/;"	f	class:CommandWidget
~ConsoleWidget	SRC/UI/ConsoleWidget.cpp	/^ConsoleWidget::~ConsoleWidget() {$/;"	f	class:ConsoleWidget
~DataTileCacheItem	SRC/Maps/DataTileProvider.cpp	/^	DataTileCacheItem::~DataTileCacheItem() {$/;"	f	class:Maps::DataTileCacheItem
~DataTileProvider	SRC/Maps/DataTileProvider.cpp	/^	DataTileProvider::~DataTileProvider() {$/;"	f	class:Maps::DataTileProvider
~DrawableHost	SRC/UI/Drawable.hpp	/^		virtual ~DrawableHost() {$/;"	f	class:DrawableHost
~DroneManager	SRC/Modules/DJI-Drone-Interface/DroneManager.hpp	/^			~DroneManager() {$/;"	f	class:DroneInterface::DroneManager
~FRFTileStore	SRC/Maps/FRFTileStore.cpp	/^FRFTileStore::~FRFTileStore() {$/;"	f	class:Maps::FRFTileStore
~GNSSManager	SRC/Modules/GNSS-Receiver/GNSSReceiver.hpp	/^			~GNSSManager() { Shutdown(); }$/;"	f	class:GNSSReceiver::GNSSManager
~GuidanceEngine	SRC/Modules/Guidance/Guidance.hpp	/^			~GuidanceEngine() {$/;"	f	class:Guidance::GuidanceEngine
~Journal	SRC/Journal.h	/^inline Journal::~Journal() {$/;"	f	class:Journal
~MapWidget	SRC/UI/MapWidget.cpp	/^MapWidget::~MapWidget() {$/;"	f	class:MapWidget
~ObjectPool	SRC/Earcut.hpp	/^        ~ObjectPool() {$/;"	f	class:mapbox::detail::Earcut::ObjectPool
~ProgOptions	SRC/ProgOptions.hpp	/^		~ProgOptions() { SaveToDisk(); }$/;"	f	class:ProgOptions
~RealDrone	SRC/Modules/DJI-Drone-Interface/RealDrone.cpp	/^	RealDrone::~RealDrone() {$/;"	f	class:DroneInterface::RealDrone
~ReconUI	SRC/UI/ReconUI.cpp	/^ReconUI::~ReconUI() {$/;"	f	class:ReconUI
~SatelliteCacheMaster	SRC/Maps/SatelliteCacheMaster.cpp	/^SatelliteCacheMaster::~SatelliteCacheMaster() {$/;"	f	class:Maps::SatelliteCacheMaster
~ShadowDetectionEngine	SRC/Modules/Shadow-Detection/ShadowDetection.hpp	/^			~ShadowDetectionEngine() {$/;"	f	class:ShadowDetection::ShadowDetectionEngine
~ShadowPropagationEngine	SRC/Modules/Shadow-Propagation/ShadowPropagation.hpp	/^			~ShadowPropagationEngine() {$/;"	f	class:ShadowPropagation::ShadowPropagationEngine
~SimpleKVStore	SRC/SimpleKVStore.hpp	/^		~SimpleKVStore() { Close(); }$/;"	f	class:SimpleKVStore
~SimulatedDrone	SRC/Modules/DJI-Drone-Interface/SimulatedDrone.cpp	/^	SimulatedDrone::~SimulatedDrone() {$/;"	f	class:DroneInterface::SimulatedDrone
~SurveyRegion	SRC/SurveyRegionManager.hpp	/^		~SurveyRegion() {$/;"	f	class:SurveyRegion
~SurveyRegionManager	SRC/SurveyRegionManager.hpp	/^		~SurveyRegionManager() { std::scoped_lock lock(m_mutex); SaveStateToDisk();   }$/;"	f	class:SurveyRegionManager
~TextureUploadFlowRestrictor	SRC/UI/TextureUploadFlowRestrictor.hpp	/^		~TextureUploadFlowRestrictor() {$/;"	f	class:TextureUploadFlowRestrictor
~VehicleControlWidget	SRC/UI/VehicleControlWidget.hpp	/^		~VehicleControlWidget() {$/;"	f	class:VehicleControlWidget
~VisWidget	SRC/UI/VisWidget.hpp	/^		~VisWidget() { SaveToDisk(); }$/;"	f	class:VisWidget
~WebRetriever	SRC/Maps/WebRetriever.cpp	/^	WebRetriever::~WebRetriever() { WaitFinish(); }$/;"	f	class:Maps::WebRetriever
~timeSeries	SRC/TimeSeries.h	/^		~timeSeries() { }$/;"	f	class:timeSeries
